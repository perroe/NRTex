%!PS-Adobe-3.0 EPSF-3.0
%%Title: (rapport-s1.indd)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 14:09:25 02/15/05
%%For: (Lars)
%%DocumentData: Clean7Bit
%%BoundingBox: 0 0 595 842
%%HiResBoundingBox: 0.0 0.0 595.276001 841.889954
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf HB  0
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1195 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:f9a3687f-5838-4dda-85eb-b74ac6d8bb56' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0.1 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:f9a3687f-5838-4dda-85eb-b74ac6d8bb56' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreateDate='2005-02-01T01:43:12+01:00' xap:CreatorTool='Adobe InDesign CS (3.0.1)' xap:ModifyDate='2005-02-01T01:43:12+01:00'></rdf:Description>
<rdf:Description rdf:about='uuid:f9a3687f-5838-4dda-85eb-b74ac6d8bb56' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:458e3d09-2df5-4132-90f1-37a963e33aff'/>
<rdf:Description rdf:about='uuid:f9a3687f-5838-4dda-85eb-b74ac6d8bb56' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>rapport-s1.indd</rdf:li></rdf:Alt></dc:title><dc:creator><rdf:Seq><rdf:li>Lars</rdf:li></rdf:Seq></dc:creator></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 595 842 rectclip
0.0 0.0 595.276001 841.889954 re
W
n
n
0.50003 0.50003 594.275971 840.889924 re
0.0 0.0 0.0 0.0 setcmykcolor
f
n
51.024002 14.173 73.700005 749.574009 re
1.0 0.65882 0.0 0.0 setcmykcolor
f
4.0 M
true setSA
n
580.602051 756.0 m
580.602051 14.673 l
161.287003 14.673 l
S
q
n
51.024002 827.717041 530.077988 -63.968994 re
W
n
false setSA
n
51.024002 763.748047 530.077988 63.968994 re
0.0 0.0 0.0 0.0 setcmykcolor
f
n
392.476013 827.717041 m
357.442017 791.965027 310.738007 768.416016 258.792999 763.748047 c
617.954041 763.748047 l
617.954041 827.717041 l
392.476013 827.717041 l
1.0 0.65882 0.0 0.0 setcmykcolor
f
Q
false setSA
n
171.736008 788.79303 m
172.422012 789.126038 172.949997 789.54303 173.319016 790.046021 c
173.689011 790.547058 173.875015 791.195007 173.875015 791.992065 c
173.875015 792.571045 173.754013 793.052063 173.516006 793.437012 c
173.277008 793.819031 172.95401 794.132019 172.548004 794.373047 c
172.14801 794.614014 171.71701 794.771057 171.258011 794.844055 c
170.799011 794.916016 170.251007 794.952026 169.614014 794.952026 c
164.948013 794.952026 l
164.948013 784.166016 l
167.735001 784.166016 l
167.735001 788.127014 l
169.004013 788.127014 l
171.940002 784.166016 l
175.337006 784.166016 l
171.736008 788.79303 l
h
170.848007 790.933044 m
170.759003 790.752014 170.619003 790.587036 170.428009 790.438049 c
170.228012 790.28302 169.979996 790.186035 169.684006 790.142029 c
169.387009 790.09906 169.019012 790.078064 168.581009 790.078064 c
167.735001 790.078064 l
167.735001 792.973022 l
168.731003 792.973022 l
169.061005 792.973022 169.348007 792.963013 169.597015 792.946045 c
169.846008 792.929016 170.063004 792.883057 170.25 792.80603 c
170.516006 792.695007 170.705002 792.54303 170.815002 792.352051 c
170.925003 792.159058 170.979996 791.927063 170.979996 791.657043 c
170.979996 791.354065 170.936005 791.113037 170.848007 790.933044 c
f
n
184.746002 788.673035 m
184.746002 789.929016 184.41301 790.891052 183.746002 791.558044 c
183.080002 792.228027 182.085007 792.561035 180.762009 792.561035 c
179.327011 792.561035 178.197006 792.16803 177.374008 791.382019 c
176.550003 790.598022 176.139008 789.53302 176.139008 788.190002 c
176.139008 786.835022 176.574005 785.787048 177.443008 785.05304 c
178.313004 784.320007 179.564011 783.953064 181.196014 783.953064 c
181.82901 783.953064 182.406006 784.006042 182.928009 784.111023 c
183.449997 784.219055 184.004013 784.391052 184.594009 784.629028 c
184.594009 786.727051 l
184.304016 786.727051 l
184.004013 786.493042 183.596008 786.27301 183.080002 786.070007 c
182.562012 785.867065 182.029007 785.766052 181.478012 785.766052 c
180.608002 785.766052 179.949005 785.938049 179.503006 786.279053 c
179.056015 786.619995 178.814011 787.115051 178.774002 787.763062 c
184.746002 787.763062 l
184.746002 788.673035 l
h
178.768005 789.286011 m
178.806015 789.858032 178.988007 790.277039 179.312012 790.539063 c
179.636002 790.799011 180.050003 790.93103 180.553009 790.93103 c
181.095001 790.93103 181.494003 790.79303 181.75 790.517029 c
182.007004 790.241028 182.142014 789.831055 182.157013 789.286011 c
178.768005 789.286011 l
f
n
195.053009 792.302063 m
192.513016 792.302063 l
192.419006 791.944031 l
192.124008 792.126038 191.797012 792.271057 191.437012 792.373047 c
191.077011 792.478027 190.678009 792.529968 190.238007 792.529968 c
189.751007 792.529968 189.274002 792.436035 188.808014 792.247009 c
188.34201 792.059998 187.949997 791.796021 187.631012 791.459045 c
187.289001 791.096008 187.02301 790.671021 186.835007 790.184021 c
186.647003 789.695007 186.553009 789.116028 186.553009 788.446045 c
186.553009 787.045044 186.861008 786.002014 187.479004 785.31604 c
188.097015 784.631042 188.976013 784.287048 190.115005 784.287048 c
190.584015 784.287048 191.008011 784.361023 191.391006 784.512024 c
191.771011 784.659973 192.119003 784.865051 192.433014 785.119019 c
192.433014 784.969055 l
192.433014 784.631042 192.399002 784.342041 192.331009 784.102051 c
192.264008 783.857056 192.155014 783.662048 192.005005 783.506042 c
191.847015 783.344055 191.616013 783.215027 191.315002 783.127014 c
191.012009 783.037048 190.619003 782.992065 190.136002 782.992065 c
189.774002 782.992065 189.365005 783.045044 188.905014 783.149963 c
188.446014 783.254028 188.058014 783.369019 187.73999 783.496033 c
187.421005 783.496033 l
187.421005 781.453064 l
187.822006 781.356018 188.298004 781.27301 188.846008 781.205017 c
189.396011 781.139038 189.953003 781.104065 190.519012 781.104065 c
191.215012 781.104065 191.841003 781.169983 192.394012 781.30304 c
192.948013 781.436035 193.419998 781.652039 193.813004 781.95105 c
194.20401 782.246033 194.508011 782.654053 194.727005 783.176025 c
194.944016 783.695007 195.053009 784.338013 195.053009 785.102051 c
195.053009 792.302063 l
h
191.746002 786.407043 m
191.497009 786.325012 191.242004 786.284058 190.98201 786.284058 c
190.409012 786.284058 189.976013 786.439026 189.686005 786.748047 c
189.395004 787.058044 189.249008 787.603027 189.249008 788.38501 c
189.249008 789.092041 189.419998 789.641052 189.761002 790.034058 c
190.103012 790.429016 190.616013 790.626038 191.299011 790.626038 c
191.472015 790.626038 191.668015 790.607056 191.88501 790.571045 c
192.101013 790.534058 192.284012 790.484009 192.433014 790.422058 c
192.433014 786.734009 l
192.226013 786.598022 191.997009 786.488037 191.746002 786.407043 c
f
n
205.518005 784.166016 m
202.897003 784.166016 l
202.897003 788.208008 l
202.897003 788.536011 202.881012 788.863037 202.847015 789.190002 c
202.813004 789.517029 202.755005 789.758057 202.674011 789.913025 c
202.578003 790.092041 202.438004 790.223022 202.252014 790.304016 c
202.068008 790.387024 201.809998 790.429016 201.478012 790.429016 c
201.243011 790.429016 201.004013 790.389954 200.761017 790.312012 c
200.519012 790.233032 200.256012 790.111023 199.972015 789.94104 c
199.972015 784.166016 l
197.352005 784.166016 l
197.352005 792.302063 l
199.972015 792.302063 l
199.972015 791.407043 l
200.435013 791.769043 200.878006 792.047058 201.304016 792.239014 c
201.731003 792.433044 202.20401 792.529968 202.724014 792.529968 c
203.600006 792.529968 204.285004 792.27301 204.778015 791.762024 c
205.271011 791.25 205.518005 790.482056 205.518005 789.465027 c
205.518005 784.166016 l
f
n
216.129013 788.673035 m
216.129013 789.929016 215.796005 790.891052 215.12999 791.558044 c
214.464005 792.228027 213.469009 792.561035 212.145004 792.561035 c
210.711014 792.561035 209.582016 792.16803 208.758011 791.382019 c
207.935013 790.598022 207.52301 789.53302 207.52301 788.190002 c
207.52301 786.835022 207.958008 785.787048 208.827011 785.05304 c
209.697006 784.320007 210.948013 783.953064 212.580002 783.953064 c
213.212006 783.953064 213.789017 784.006042 214.311005 784.111023 c
214.833008 784.219055 215.388016 784.391052 215.978012 784.629028 c
215.978012 786.727051 l
215.687012 786.727051 l
215.388016 786.493042 214.979996 786.27301 214.464005 786.070007 c
213.946014 785.867065 213.41301 785.766052 212.861008 785.766052 c
211.992004 785.766052 211.334015 785.938049 210.886017 786.279053 c
210.440002 786.619995 210.197006 787.115051 210.158005 787.763062 c
216.129013 787.763062 l
216.129013 788.673035 l
h
210.152008 789.286011 m
210.189011 789.858032 210.371017 790.277039 210.695007 790.539063 c
211.019989 790.799011 211.433014 790.93103 211.937012 790.93103 c
212.478012 790.93103 212.878006 790.79303 213.13501 790.517029 c
213.391006 790.241028 213.526016 789.831055 213.539993 789.286011 c
210.152008 789.286011 l
f
n
225.721008 786.743042 m
225.721008 785.902039 225.344009 785.225037 224.589996 784.709045 c
223.837006 784.193054 222.804016 783.938049 221.49501 783.938049 c
220.771011 783.938049 220.114014 784.006042 219.524017 784.141052 c
218.935013 784.275024 218.461014 784.426025 218.104004 784.592041 c
218.104004 786.742065 l
218.34201 786.742065 l
218.473007 786.64801 218.625015 786.548035 218.796005 786.437012 c
218.96701 786.328064 219.209991 786.209045 219.524017 786.084045 c
219.795013 785.971008 220.102005 785.875061 220.445007 785.79303 c
220.78801 785.715027 221.155014 785.674011 221.546005 785.674011 c
222.059006 785.674011 222.439011 785.731018 222.686005 785.846008 c
222.931015 785.959045 223.055008 786.129028 223.055008 786.352051 c
223.055008 786.551025 222.98201 786.693054 222.837006 786.784058 c
222.692017 786.873047 222.416016 786.958008 222.009018 787.041016 c
221.81601 787.084045 221.553009 787.131042 221.222015 787.183044 c
220.891006 787.233032 220.589996 787.294067 220.318008 787.367065 c
219.57901 787.561035 219.029007 787.862061 218.671005 788.269958 c
218.314011 788.679993 218.134018 789.187012 218.134018 789.797058 c
218.134018 790.579041 218.506012 791.231018 219.248016 791.751038 c
219.991013 792.271057 221.005005 792.529968 222.293015 792.529968 c
222.902008 792.529968 223.486008 792.469055 224.045013 792.346008 c
224.604004 792.223022 225.039993 792.089966 225.355011 791.950012 c
225.355011 789.89502 l
225.129013 789.89502 l
224.742004 790.161011 224.30101 790.377014 223.804016 790.544067 c
223.307007 790.709961 222.805008 790.794067 222.297012 790.794067 c
221.876007 790.794067 221.519989 790.735046 221.233017 790.618042 c
220.944016 790.502014 220.800003 790.337036 220.800003 790.122009 c
220.800003 789.929016 220.865005 789.781067 220.996017 789.679993 c
221.127014 789.579041 221.434006 789.478027 221.918015 789.376038 c
222.184006 789.322021 222.470001 789.271057 222.778015 789.219055 c
223.086014 789.169983 223.394012 789.106018 223.703018 789.028015 c
224.389999 788.84906 224.89801 788.567017 225.227005 788.183044 c
225.556015 787.799011 225.721008 787.319031 225.721008 786.743042 c
f
n
235.904007 788.673035 m
235.904007 789.929016 235.571014 790.891052 234.904007 791.558044 c
234.238007 792.228027 233.243011 792.561035 231.919998 792.561035 c
230.484009 792.561035 229.35701 792.16803 228.532013 791.382019 c
227.709991 790.598022 227.297012 789.53302 227.297012 788.190002 c
227.297012 786.835022 227.73201 785.787048 228.601013 785.05304 c
229.470001 784.320007 230.722015 783.953064 232.354004 783.953064 c
232.987015 783.953064 233.564011 784.006042 234.086014 784.111023 c
234.60701 784.219055 235.162018 784.391052 235.751007 784.629028 c
235.751007 786.727051 l
235.462006 786.727051 l
235.162018 786.493042 234.754013 786.27301 234.238007 786.070007 c
233.721008 785.867065 233.187012 785.766052 232.63501 785.766052 c
231.766006 785.766052 231.108017 785.938049 230.659988 786.279053 c
230.214005 786.619995 229.971008 787.115051 229.932007 787.763062 c
235.904007 787.763062 l
235.904007 788.673035 l
h
229.925018 789.286011 m
229.963013 789.858032 230.146011 790.277039 230.469009 790.539063 c
230.795013 790.799011 231.208008 790.93103 231.711014 790.93103 c
232.253006 790.93103 232.651016 790.79303 232.908005 790.517029 c
233.165009 790.241028 233.299011 789.831055 233.315018 789.286011 c
229.925018 789.286011 l
f
n
246.225006 784.166016 m
243.605011 784.166016 l
243.605011 788.208008 l
243.605011 788.536011 243.588013 788.863037 243.554016 789.190002 c
243.521011 789.517029 243.463013 789.758057 243.382019 789.913025 c
243.286011 790.092041 243.145004 790.223022 242.959991 790.304016 c
242.775009 790.387024 242.517014 790.429016 242.186005 790.429016 c
241.951004 790.429016 241.712006 790.389954 241.469009 790.312012 c
241.227005 790.233032 240.963013 790.111023 240.679993 789.94104 c
240.679993 784.166016 l
238.059998 784.166016 l
238.059998 792.302063 l
240.679993 792.302063 l
240.679993 791.407043 l
241.142014 791.769043 241.587006 792.047058 242.012009 792.239014 c
242.439011 792.433044 242.912018 792.529968 243.431015 792.529968 c
244.308014 792.529968 244.992004 792.27301 245.485016 791.762024 c
245.979019 791.25 246.225006 790.482056 246.225006 789.465027 c
246.225006 784.166016 l
f
n
254.157013 784.244019 m
253.877014 784.172058 253.580002 784.117065 253.265015 784.074036 c
252.951019 784.03302 252.56601 784.014038 252.110001 784.014038 c
251.094009 784.014038 250.338013 784.219055 249.84201 784.629028 c
249.347015 785.039063 249.099014 785.73999 249.099014 786.734009 c
249.099014 790.534058 l
248.032013 790.534058 l
248.032013 792.302063 l
249.099014 792.302063 l
249.099014 794.633057 l
251.719009 794.633057 l
251.719009 792.302063 l
254.157013 792.302063 l
254.157013 790.534058 l
251.719009 790.534058 l
251.719009 787.649963 l
251.719009 787.364014 251.722015 787.117065 251.726013 786.903015 c
251.73201 786.692017 251.771011 786.501038 251.843018 786.331055 c
251.909988 786.162048 252.029999 786.029053 252.201019 785.929993 c
252.372009 785.832031 252.621017 785.781067 252.949005 785.781067 c
253.083008 785.781067 253.259995 785.809021 253.48201 785.867065 c
253.699005 785.924011 253.854019 785.977051 253.94101 786.02301 c
254.157013 786.02301 l
254.157013 784.244019 l
f
n
261.917023 789.818054 m
261.686005 789.818054 l
261.576019 789.858032 261.39801 789.889038 261.151001 789.909973 c
260.907013 789.93103 260.702026 789.940002 260.539001 789.940002 c
260.167999 789.940002 259.841003 789.916016 259.558014 789.866028 c
259.274017 789.820007 258.968018 789.737061 258.641998 789.621033 c
258.641998 784.166016 l
256.021027 784.166016 l
256.021027 792.302063 l
258.641998 792.302063 l
258.641998 791.106018 l
259.21402 791.59906 259.712006 791.926025 260.134003 792.08905 c
260.559021 792.251038 260.947998 792.333008 261.304016 792.333008 c
261.394012 792.333008 261.499023 792.329956 261.614014 792.325012 c
261.72998 792.320007 261.831024 792.313049 261.917023 792.304016 c
261.917023 789.818054 l
f
n
268.632019 784.166016 m
271.223022 784.166016 l
271.223022 789.698059 l
271.223022 790.674011 270.893005 791.389954 270.236023 791.846008 c
269.57901 792.302063 268.512024 792.529968 267.03302 792.529968 c
266.412018 792.529968 265.792023 792.481018 265.173004 792.381042 c
264.555023 792.28302 264.108002 792.197021 263.834015 792.126038 c
263.834015 790.169067 l
264.071014 790.169067 l
264.282013 790.251038 264.631012 790.367065 265.116028 790.521057 c
265.601013 790.671021 266.058014 790.747009 266.486023 790.747009 c
267.196014 790.747009 267.734009 790.662048 268.100006 790.48999 c
268.46402 790.318054 268.64801 790.007019 268.64801 789.557068 c
268.64801 789.514038 l
267.882019 789.469971 267.143005 789.403015 266.431 789.312012 c
265.718018 789.219055 265.122009 789.065063 264.639984 788.848022 c
264.154999 788.631042 263.779999 788.334045 263.515015 787.957031 c
263.25 787.581055 263.118011 787.095032 263.118011 786.501038 c
263.118011 785.758057 263.377014 785.147034 263.897003 784.66803 c
264.416016 784.19104 265.061005 783.953064 265.832001 783.953064 c
266.159027 783.953064 266.459991 783.979065 266.734009 784.03302 c
267.009003 784.089966 267.27301 784.174011 267.528015 784.289063 c
267.712006 784.377014 267.904999 784.494019 268.113007 784.64502 c
268.320007 784.79303 268.492004 784.919983 268.632019 785.027039 c
268.632019 784.166016 l
h
267.931 785.879028 m
267.665009 785.771057 267.401001 785.721008 267.143005 785.721008 c
266.81601 785.721008 266.576019 785.742065 266.423004 785.789063 c
266.269989 785.834045 266.138 785.904053 266.027008 786.002014 c
265.913025 786.100037 265.839996 786.199036 265.811005 786.307007 c
265.78302 786.412048 265.769012 786.549011 265.769012 786.717041 c
265.769012 786.97406 265.835999 787.179993 265.973022 787.33606 c
266.109009 787.492065 266.308014 787.611023 266.567017 787.692017 c
266.777008 787.761047 267.087006 787.820007 267.495026 787.869995 c
267.903015 787.922058 268.282013 787.959961 268.632019 787.98999 c
268.632019 786.299011 l
268.431 786.125061 268.197021 785.984009 267.931 785.879028 c
f
n
273.452026 784.166016 2.618988 11.27301 re
f
n
174.772003 798.682068 m
172.098007 798.682068 l
167.491013 806.084045 l
167.491013 798.682068 l
164.948013 798.682068 l
164.948013 809.467041 l
168.271011 809.467041 l
172.229004 803.287048 l
172.229004 809.467041 l
174.772003 809.467041 l
174.772003 798.682068 l
f
n
184.341003 805.914063 m
183.56601 806.688049 182.468002 807.075012 181.048004 807.075012 c
179.64801 807.075012 178.554001 806.690002 177.769989 805.922058 c
176.984009 805.153015 176.59201 804.094055 176.59201 802.744019 c
176.59201 801.404053 176.98201 800.349976 177.762009 799.579041 c
178.542007 798.808044 179.637009 798.421021 181.048004 798.421021 c
182.459015 798.421021 183.554016 798.808044 184.334015 799.579041 c
185.114014 800.349976 185.504013 801.404053 185.504013 802.744019 c
185.504013 804.084045 185.116013 805.141052 184.341003 805.914063 c
h
181.75 800.356018 m
181.533005 800.274048 181.307007 800.234009 181.069992 800.234009 c
180.795013 800.234009 180.548004 800.277039 180.332016 800.365051 c
180.116013 800.453064 179.932007 800.591064 179.776001 800.779968 c
179.616013 800.978027 179.494003 801.242065 179.41301 801.569031 c
179.32901 801.89801 179.289001 802.28302 179.289001 802.731018 c
179.289001 803.229065 179.337006 803.646057 179.429993 803.97406 c
179.524002 804.304016 179.652008 804.564026 179.813004 804.753052 c
179.991013 804.957031 180.179016 805.092041 180.376007 805.161011 c
180.572006 805.228027 180.796005 805.262024 181.048004 805.262024 c
181.30101 805.262024 181.536011 805.219971 181.753006 805.139038 c
181.972015 805.055054 182.158005 804.915039 182.314011 804.717041 c
182.469009 804.52301 182.589996 804.263062 182.677002 803.938049 c
182.764008 803.612061 182.808014 803.21106 182.808014 802.731018 c
182.808014 802.209961 182.765015 801.805054 182.679993 801.512024 c
182.596008 801.218018 182.469009 800.967041 182.299011 800.759033 c
182.149002 800.568054 181.965012 800.435059 181.75 800.356018 c
f
n
193.323013 804.333008 m
193.09201 804.333008 l
192.98201 804.373047 192.804016 804.403015 192.558014 804.425049 c
192.313004 804.445068 192.108002 804.454041 191.944016 804.454041 c
191.574005 804.454041 191.248016 804.429993 190.963013 804.381042 c
190.679993 804.334045 190.375015 804.25 190.048004 804.136047 c
190.048004 798.682068 l
187.427002 798.682068 l
187.427002 806.81604 l
190.048004 806.81604 l
190.048004 805.619995 l
190.619995 806.113037 191.118011 806.440002 191.541016 806.604065 c
191.965012 806.765015 192.354004 806.846008 192.709991 806.846008 c
192.80101 806.846008 192.904007 806.843018 193.019989 806.838013 c
193.13501 806.834045 193.237015 806.82605 193.323013 806.81604 c
193.323013 804.333008 l
f
n
202.429993 801.258057 m
202.429993 800.416016 202.052017 799.739014 201.299011 799.225037 c
200.545013 798.709045 199.514008 798.452026 198.20401 798.452026 c
197.479996 798.452026 196.822006 798.519958 196.233002 798.654053 c
195.644012 798.789978 195.169998 798.94104 194.813004 799.106018 c
194.813004 801.255066 l
195.05101 801.255066 l
195.182007 801.161011 195.333008 801.062012 195.505005 800.95105 c
195.67601 800.843018 195.919006 800.725037 196.233002 800.59906 c
196.503006 800.486023 196.811005 800.389954 197.154007 800.309021 c
197.498016 800.229065 197.864014 800.190002 198.256012 800.190002 c
198.769012 800.190002 199.14801 800.245056 199.395004 800.359985 c
199.641006 800.47406 199.763016 800.644043 199.763016 800.866028 c
199.763016 801.064026 199.69101 801.208008 199.545013 801.297058 c
199.400009 801.387024 199.125015 801.473022 198.718002 801.55603 c
198.524002 801.59906 198.262009 801.646057 197.931015 801.697021 c
197.600006 801.748047 197.298004 801.809021 197.027008 801.882019 c
196.287003 802.075012 195.737015 802.377014 195.379013 802.784058 c
195.022003 803.193054 194.843002 803.70105 194.843002 804.312012 c
194.843002 805.094055 195.214005 805.744019 195.957016 806.264038 c
196.699005 806.785034 197.714005 807.045044 199.002014 807.045044 c
199.611008 807.045044 200.195007 806.983032 200.753006 806.859985 c
201.313004 806.735046 201.75 806.604065 202.064011 806.465027 c
202.064011 804.409058 l
201.839005 804.409058 l
201.452011 804.675049 201.009003 804.892029 200.512009 805.058044 c
200.017014 805.225037 199.514008 805.309021 199.005005 805.309021 c
198.584015 805.309021 198.229996 805.249023 197.94101 805.133057 c
197.652008 805.016052 197.509003 804.852051 197.509003 804.637024 c
197.509003 804.443054 197.575012 804.296021 197.705002 804.194031 c
197.835007 804.094055 198.143005 803.98999 198.627014 803.889954 c
198.893005 803.837036 199.179016 803.785034 199.486008 803.733032 c
199.795013 803.684021 200.103012 803.619995 200.412003 803.542053 c
201.099014 803.362061 201.60701 803.082031 201.937012 802.697021 c
202.265015 802.314026 202.429993 801.834045 202.429993 801.258057 c
f
n
213.102005 798.682068 m
210.088013 798.682068 l
207.808014 802.228027 l
207.100006 801.349976 l
207.100006 798.682068 l
204.479996 798.682068 l
204.479996 809.955017 l
207.100006 809.955017 l
207.100006 803.23999 l
209.879013 806.81604 l
212.889008 806.81604 l
209.978012 803.309021 l
213.102005 798.682068 l
f
n
168.207001 773.508057 m
167.502014 773.508057 l
165.479996 777.332031 l
165.479996 773.508057 l
164.948013 773.508057 l
164.948013 777.78302 l
165.82901 777.78302 l
167.674011 774.29303 l
167.674011 777.78302 l
168.207001 777.78302 l
168.207001 773.508057 l
f
n
172.186005 777.725037 m
171.94101 777.824036 171.667007 777.873047 171.360001 777.873047 c
171.06601 777.873047 170.793015 777.824036 170.544006 777.725037 c
170.295013 777.625061 170.085007 777.481018 169.917007 777.29303 c
169.741013 777.096008 169.60701 776.859009 169.515015 776.584045 c
169.423004 776.307007 169.377014 775.994019 169.377014 775.643066 c
169.377014 775.291016 169.423004 774.975037 169.517014 774.699036 c
169.609009 774.424011 169.741013 774.19104 169.914001 774.002014 c
170.086014 773.811035 170.295013 773.666016 170.541016 773.568054 c
170.786011 773.469055 171.059006 773.41803 171.360001 773.41803 c
171.669006 773.41803 171.94101 773.467041 172.183014 773.565063 c
172.422012 773.659973 172.62999 773.807007 172.806015 774.002014 c
172.977005 774.188049 173.109009 774.41803 173.20401 774.697021 c
173.298004 774.977051 173.346008 775.291016 173.346008 775.643066 c
173.346008 775.996033 173.299011 776.311035 173.206009 776.589966 c
173.114014 776.867065 172.981003 777.102051 172.806015 777.29303 c
172.636002 777.481018 172.429001 777.623047 172.186005 777.725037 c
h
172.375015 774.354065 m
172.125015 774.055054 171.787003 773.904053 171.363007 773.904053 c
170.940002 773.904053 170.601013 774.055054 170.349991 774.354065 c
170.098007 774.652039 169.972015 775.082031 169.972015 775.64502 c
169.972015 776.20105 170.095001 776.631042 170.34201 776.934021 c
170.589005 777.234009 170.929001 777.387024 171.363007 777.387024 c
171.792007 777.387024 172.131012 777.234009 172.37999 776.934021 c
172.627014 776.631042 172.753006 776.20105 172.753006 775.64502 c
172.753006 775.082031 172.627014 774.652039 172.375015 774.354065 c
f
n
176.45401 775.377014 m
176.727005 775.482056 176.940002 775.639038 177.095001 775.848022 c
177.25 776.055054 177.328003 776.313049 177.328003 776.619019 c
177.328003 776.848022 177.285004 777.035034 177.197006 777.184021 c
177.110001 777.332031 176.989014 777.455017 176.834015 777.55304 c
176.695007 777.639038 176.541016 777.699036 176.369003 777.732056 c
176.196014 777.766052 175.981003 777.78302 175.723007 777.78302 c
174.525009 777.78302 l
174.525009 773.508057 l
175.097015 773.508057 l
175.097015 775.207031 l
175.894012 775.207031 l
177.323013 773.508057 l
178.059998 773.508057 l
176.45401 775.377014 l
h
176.672012 776.182007 m
176.631012 776.078064 176.567001 775.984009 176.48201 775.902039 c
176.387009 775.818054 176.274002 775.758057 176.139999 775.727051 c
176.006012 775.695007 175.849991 775.682007 175.669998 775.682007 c
175.097015 775.682007 l
175.097015 777.295044 l
175.765015 777.295044 l
175.917007 777.295044 176.050003 777.28302 176.16301 777.262024 c
176.276001 777.23999 176.374008 777.20105 176.455002 777.14502 c
176.555008 777.082031 176.627014 777.0 176.669006 776.906067 c
176.712006 776.811035 176.733002 776.70105 176.733002 776.579956 c
176.733002 776.41803 176.713013 776.285034 176.672012 776.182007 c
f
n
183.830002 777.78302 m
182.721008 773.508057 l
182.082016 773.508057 l
181.187012 777.057007 l
180.311005 773.508057 l
179.687012 773.508057 l
178.558014 777.78302 l
179.149002 777.78302 l
180.035004 774.22998 l
180.918015 777.78302 l
181.493011 777.78302 l
182.383011 774.195007 l
183.271011 777.78302 l
183.830002 777.78302 l
f
n
187.908005 773.508057 m
185.089996 773.508057 l
185.089996 777.78302 l
187.908005 777.78302 l
187.908005 777.281067 l
185.661011 777.281067 l
185.661011 776.107056 l
187.908005 776.107056 l
187.908005 775.604065 l
185.661011 775.604065 l
185.661011 774.012024 l
187.908005 774.012024 l
187.908005 773.508057 l
f
n
192.787003 773.818054 m
192.554016 773.71106 192.298004 773.617065 192.02301 773.537048 c
191.74501 773.457031 191.478012 773.41803 191.220001 773.41803 c
190.888016 773.41803 190.582016 773.463013 190.305008 773.555054 c
190.027008 773.647034 189.791016 773.785034 189.596008 773.971008 c
189.399002 774.156067 189.246002 774.387024 189.139999 774.66803 c
189.032013 774.945007 188.979004 775.271057 188.979004 775.646057 c
188.979004 776.329956 189.179016 776.869019 189.578003 777.266052 c
189.976013 777.659973 190.524002 777.859009 191.222015 777.859009 c
191.464005 777.859009 191.713013 777.829956 191.96701 777.772034 c
192.221008 777.713013 192.494003 777.613037 192.787003 777.473022 c
192.787003 776.799011 l
192.736008 776.799011 l
192.67601 776.844055 192.589996 776.906067 192.477005 776.981018 c
192.365005 777.05304 192.253006 777.115051 192.145004 777.166016 c
192.012009 777.225037 191.863007 777.27301 191.695007 777.313049 c
191.527008 777.352051 191.338013 777.371033 191.125015 777.371033 c
190.647003 777.371033 190.269012 777.217041 189.991013 776.90802 c
189.712006 776.602051 189.573013 776.186035 189.573013 775.659973 c
189.573013 775.107056 189.719009 774.674011 190.009003 774.367065 c
190.299011 774.059021 190.694016 773.904053 191.195007 773.904053 c
191.378006 773.904053 191.561005 773.924011 191.744003 773.96106 c
191.925003 773.996033 192.086014 774.04303 192.223007 774.102051 c
192.223007 775.154053 l
191.081009 775.154053 l
191.081009 775.65802 l
192.787003 775.65802 l
192.787003 773.818054 l
f
n
198.624008 777.78302 m
197.867004 777.78302 l
196.314011 773.508057 l
196.889999 773.508057 l
197.306015 774.697021 l
199.151016 774.697021 l
199.568008 773.508057 l
200.17601 773.508057 l
198.624008 777.78302 l
h
197.481003 775.184021 m
198.229004 777.279053 l
198.974014 775.184021 l
197.481003 775.184021 l
f
n
204.503006 773.508057 m
203.799011 773.508057 l
201.776016 777.332031 l
201.776016 773.508057 l
201.243011 773.508057 l
201.243011 777.78302 l
202.126007 777.78302 l
203.970001 774.29303 l
203.970001 777.78302 l
204.503006 777.78302 l
204.503006 773.508057 l
f
n
254.719009 773.820007 m
254.614014 773.775024 254.519989 773.731018 254.434006 773.690002 c
254.348007 773.652039 254.236008 773.609009 254.099014 773.565063 c
253.98201 773.529053 253.85701 773.498047 253.720001 773.473022 c
253.583008 773.445007 253.432007 773.434021 253.268005 773.434021 c
252.959015 773.434021 252.677017 773.477051 252.423019 773.563049 c
252.169998 773.649963 251.949997 773.787048 251.762009 773.973022 c
251.578018 774.154053 251.435013 774.38501 251.332016 774.664063 c
251.228012 774.945007 251.17601 775.269958 251.17601 775.641052 c
251.17601 775.994019 251.226013 776.309021 251.326019 776.584045 c
251.425018 776.863037 251.568008 777.098022 251.756012 777.289063 c
251.938019 777.473022 252.157013 777.615051 252.414017 777.71106 c
252.671005 777.809021 252.957016 777.859009 253.269989 777.859009 c
253.5 777.859009 253.729019 777.832031 253.958008 777.775024 c
254.187012 777.719055 254.439987 777.623047 254.719009 777.482056 c
254.719009 776.807007 l
254.675018 776.807007 l
254.439987 777.004028 254.208008 777.146057 253.976013 777.236023 c
253.746017 777.32605 253.499008 777.371033 253.235016 777.371033 c
253.019012 777.371033 252.825012 777.33606 252.652008 777.266052 c
252.479996 777.197021 252.325012 777.089966 252.189987 776.94104 c
252.058014 776.799011 251.955017 776.615051 251.882019 776.396057 c
251.808014 776.17804 251.771011 775.926025 251.771011 775.639038 c
251.771011 775.338013 251.811005 775.079956 251.893005 774.863037 c
251.974014 774.647034 252.078018 774.471008 252.207016 774.33606 c
252.341019 774.195007 252.497009 774.089966 252.675018 774.022034 c
252.853012 773.955017 253.043015 773.919983 253.23999 773.919983 c
253.514008 773.919983 253.769989 773.967041 254.009018 774.061035 c
254.247009 774.156067 254.470001 774.297058 254.678009 774.484009 c
254.719009 774.484009 l
254.719009 773.820007 l
f
n
258.899017 773.508057 m
256.07901 773.508057 l
256.07901 777.78302 l
258.899017 777.78302 l
258.899017 777.281067 l
256.651001 777.281067 l
256.651001 776.107056 l
258.899017 776.107056 l
258.899017 775.604065 l
256.651001 775.604065 l
256.651001 774.012024 l
258.899017 774.012024 l
258.899017 773.508057 l
f
n
263.472015 773.508057 m
262.768005 773.508057 l
260.745026 777.332031 l
260.745026 773.508057 l
260.212006 773.508057 l
260.212006 777.78302 l
261.094025 777.78302 l
262.939026 774.29303 l
262.939026 777.78302 l
263.472015 777.78302 l
263.472015 773.508057 l
f
n
268.141998 777.281067 m
266.618011 777.281067 l
266.618011 773.508057 l
266.047028 773.508057 l
266.047028 777.281067 l
264.524017 777.281067 l
264.524017 777.78302 l
268.141998 777.78302 l
268.141998 777.281067 l
f
n
272.019989 773.508057 m
269.202026 773.508057 l
269.202026 777.78302 l
272.019989 777.78302 l
272.019989 777.281067 l
269.77301 777.281067 l
269.77301 776.107056 l
272.019989 776.107056 l
272.019989 775.604065 l
269.77301 775.604065 l
269.77301 774.012024 l
272.019989 774.012024 l
272.019989 773.508057 l
f
n
275.265015 775.377014 m
275.535004 775.482056 275.749023 775.639038 275.904022 775.848022 c
276.059998 776.055054 276.138 776.313049 276.138 776.619019 c
276.138 776.848022 276.094025 777.035034 276.007019 777.184021 c
275.919983 777.332031 275.798004 777.455017 275.644012 777.55304 c
275.505005 777.639038 275.350006 777.699036 275.177002 777.732056 c
275.005005 777.766052 274.790009 777.78302 274.532013 777.78302 c
273.334015 777.78302 l
273.334015 773.508057 l
273.904999 773.508057 l
273.904999 775.207031 l
274.703003 775.207031 l
276.132019 773.508057 l
276.869019 773.508057 l
275.265015 775.377014 l
h
275.482025 776.182007 m
275.44101 776.078064 275.377014 775.984009 275.291016 775.902039 c
275.197021 775.818054 275.084015 775.758057 274.949005 775.727051 c
274.81601 775.695007 274.65802 775.682007 274.479004 775.682007 c
273.904999 775.682007 l
273.904999 777.295044 l
274.574005 777.295044 l
274.726013 777.295044 274.859985 777.28302 274.972015 777.262024 c
275.085999 777.23999 275.182007 777.20105 275.265015 777.14502 c
275.364014 777.082031 275.436005 777.0 275.479004 776.906067 c
275.522003 776.811035 275.542999 776.70105 275.542999 776.579956 c
275.542999 776.41803 275.522003 776.285034 275.482025 776.182007 c
f
n
194.440002 773.508057 0.565979 4.275391 re
f
n
212.039017 773.820007 m
211.934006 773.775024 211.838013 773.731018 211.754013 773.690002 c
211.669006 773.652039 211.558014 773.609009 211.419998 773.565063 c
211.303009 773.529053 211.177017 773.498047 211.039993 773.473022 c
210.902008 773.445007 210.753006 773.434021 210.588013 773.434021 c
210.278015 773.434021 209.997009 773.477051 209.744003 773.563049 c
209.48999 773.649963 209.269989 773.787048 209.082016 773.973022 c
208.899017 774.154053 208.756012 774.38501 208.652008 774.664063 c
208.549011 774.945007 208.498016 775.269958 208.498016 775.641052 c
208.498016 775.994019 208.547012 776.309021 208.646011 776.584045 c
208.746017 776.863037 208.889008 777.098022 209.077011 777.289063 c
209.258011 777.473022 209.477005 777.615051 209.735016 777.71106 c
209.992004 777.809021 210.277008 777.859009 210.591003 777.859009 c
210.821014 777.859009 211.049988 777.832031 211.277008 777.775024 c
211.506012 777.719055 211.761017 777.623047 212.039017 777.482056 c
212.039017 776.807007 l
211.997009 776.807007 l
211.762009 777.004028 211.528015 777.146057 211.297012 777.236023 c
211.067017 777.32605 210.818008 777.371033 210.555008 777.371033 c
210.339996 777.371033 210.145004 777.33606 209.972015 777.266052 c
209.799011 777.197021 209.645004 777.089966 209.509995 776.94104 c
209.378006 776.799011 209.275009 776.615051 209.202011 776.396057 c
209.128006 776.17804 209.091003 775.926025 209.091003 775.639038 c
209.091003 775.338013 209.132004 775.079956 209.213013 774.863037 c
209.295013 774.647034 209.399017 774.471008 209.527008 774.33606 c
209.661011 774.195007 209.817017 774.089966 209.99501 774.022034 c
210.174011 773.955017 210.363007 773.919983 210.561005 773.919983 c
210.834015 773.919983 211.089996 773.967041 211.32901 774.061035 c
211.567017 774.156067 211.791016 774.297058 212.0 774.484009 c
212.039017 774.484009 l
212.039017 773.820007 l
f
n
215.826004 777.725037 m
215.583008 777.824036 215.307007 777.873047 215.001007 777.873047 c
214.706009 777.873047 214.434006 777.824036 214.184006 777.725037 c
213.935013 777.625061 213.725006 777.481018 213.557007 777.29303 c
213.381012 777.096008 213.247009 776.859009 213.155014 776.584045 c
213.063004 776.307007 213.017014 775.994019 213.017014 775.643066 c
213.017014 775.291016 213.064011 774.975037 213.157013 774.699036 c
213.249008 774.424011 213.382004 774.19104 213.553009 774.002014 c
213.725006 773.811035 213.936005 773.666016 214.181015 773.568054 c
214.42601 773.469055 214.699005 773.41803 215.001007 773.41803 c
215.309998 773.41803 215.584015 773.467041 215.823013 773.565063 c
216.064011 773.659973 216.271011 773.807007 216.447006 774.002014 c
216.617004 774.188049 216.75 774.41803 216.845016 774.697021 c
216.940002 774.977051 216.987015 775.291016 216.987015 775.643066 c
216.987015 775.996033 216.94101 776.311035 216.848007 776.589966 c
216.754013 776.867065 216.621017 777.102051 216.447006 777.29303 c
216.276016 777.481018 216.069016 777.623047 215.826004 777.725037 c
h
216.016006 774.354065 m
215.765015 774.055054 215.427017 773.904053 215.004013 773.904053 c
214.57901 773.904053 214.241013 774.055054 213.989014 774.354065 c
213.737015 774.652039 213.612015 775.082031 213.612015 775.64502 c
213.612015 776.20105 213.735016 776.631042 213.98201 776.934021 c
214.229996 777.234009 214.569016 777.387024 215.004013 777.387024 c
215.433014 777.387024 215.772003 777.234009 216.021011 776.934021 c
216.269012 776.631042 216.393005 776.20105 216.393005 775.64502 c
216.393005 775.082031 216.267014 774.652039 216.016006 774.354065 c
f
n
222.112015 773.508057 m
221.541016 773.508057 l
221.541016 777.190002 l
220.355011 774.682007 l
220.016006 774.682007 l
218.837006 777.190002 l
218.837006 773.508057 l
218.303009 773.508057 l
218.303009 777.78302 l
219.081009 777.78302 l
220.220001 775.400024 l
221.321014 777.78302 l
222.112015 777.78302 l
222.112015 773.508057 l
f
n
226.335007 777.107056 m
226.247009 777.269958 226.121017 777.406067 225.958008 777.516052 c
225.819992 777.607056 225.662018 777.674011 225.484009 777.717041 c
225.307007 777.762024 225.089005 777.78302 224.833008 777.78302 c
223.673004 777.78302 l
223.673004 773.508057 l
224.244003 773.508057 l
224.244003 775.102051 l
224.812012 775.102051 l
225.118011 775.102051 225.371017 775.137024 225.571014 775.213013 c
225.772003 775.285034 225.946014 775.397034 226.093018 775.54303 c
226.212006 775.662048 226.303009 775.80304 226.369995 775.965027 c
226.436005 776.125061 226.468018 776.301025 226.468018 776.48999 c
226.468018 776.73999 226.425018 776.945007 226.335007 777.107056 c
h
225.818008 776.137024 m
225.782013 776.035034 225.718018 775.938049 225.629013 775.848022 c
225.539017 775.758057 225.422012 775.69104 225.279999 775.649963 c
225.136017 775.609009 224.949997 775.588013 224.722015 775.588013 c
224.244003 775.588013 l
224.244003 777.295044 l
224.805008 777.295044 l
224.984009 777.295044 225.132004 777.281067 225.25 777.256042 c
225.367004 777.231018 225.472015 777.190002 225.563004 777.127014 c
225.668015 777.059021 225.746017 776.971008 225.797012 776.861023 c
225.848007 776.752014 225.874008 776.625061 225.874008 776.477051 c
225.874008 776.352051 225.856018 776.238037 225.818008 776.137024 c
f
n
230.848007 775.223022 m
230.848007 774.914063 230.814011 774.643066 230.746017 774.412048 c
230.678009 774.182007 230.567017 773.988037 230.412018 773.83606 c
230.265015 773.690002 230.093018 773.584045 229.897018 773.519958 c
229.699997 773.45105 229.470001 773.41803 229.209015 773.41803 c
228.94101 773.41803 228.709015 773.453064 228.509995 773.52301 c
228.311005 773.596008 228.144012 773.699036 228.008011 773.83606 c
227.854004 773.994019 227.742004 774.184021 227.674011 774.404053 c
227.606018 774.627014 227.573013 774.900024 227.573013 775.223022 c
227.573013 777.78302 l
228.144012 777.78302 l
228.144012 775.195007 l
228.144012 774.963013 228.159012 774.779053 228.19101 774.647034 c
228.222015 774.512024 228.276016 774.391052 228.349991 774.281067 c
228.434006 774.15802 228.546005 774.065063 228.69101 774.0 c
228.835007 773.936035 229.007004 773.904053 229.209015 773.904053 c
229.41301 773.904053 229.586014 773.936035 229.729004 773.998047 c
229.872009 774.061035 229.986008 774.154053 230.071014 774.281067 c
230.146011 774.391052 230.197006 774.516052 230.229996 774.656067 c
230.259995 774.797058 230.277008 774.971008 230.277008 775.179993 c
230.277008 777.78302 l
230.848007 777.78302 l
230.848007 775.223022 l
f
n
235.39801 777.281067 m
233.876007 777.281067 l
233.876007 773.508057 l
233.303009 773.508057 l
233.303009 777.281067 l
231.779999 777.281067 l
231.779999 777.78302 l
235.39801 777.78302 l
235.39801 777.281067 l
f
n
242.10701 773.508057 m
241.402008 773.508057 l
239.37999 777.332031 l
239.37999 773.508057 l
238.847015 773.508057 l
238.847015 777.78302 l
239.729996 777.78302 l
241.574005 774.29303 l
241.574005 777.78302 l
242.10701 777.78302 l
242.10701 773.508057 l
f
n
247.225006 773.818054 m
246.992004 773.71106 246.736008 773.617065 246.461014 773.537048 c
246.183014 773.457031 245.916016 773.41803 245.657013 773.41803 c
245.324005 773.41803 245.019989 773.463013 244.742004 773.555054 c
244.464005 773.647034 244.228012 773.785034 244.034012 773.971008 c
243.836014 774.156067 243.684006 774.387024 243.577011 774.66803 c
243.469009 774.945007 243.417007 775.271057 243.417007 775.646057 c
243.417007 776.329956 243.617004 776.869019 244.015015 777.266052 c
244.414017 777.659973 244.962006 777.859009 245.659988 777.859009 c
245.902008 777.859009 246.149994 777.829956 246.405014 777.772034 c
246.658005 777.713013 246.932007 777.613037 247.225006 777.473022 c
247.225006 776.799011 l
247.174011 776.799011 l
247.113007 776.844055 247.027008 776.906067 246.915009 776.981018 c
246.802017 777.05304 246.69101 777.115051 246.583008 777.166016 c
246.449005 777.225037 246.300003 777.27301 246.133011 777.313049 c
245.965012 777.352051 245.775009 777.371033 245.563019 777.371033 c
245.085007 777.371033 244.707016 777.217041 244.427017 776.90802 c
244.149017 776.602051 244.009995 776.186035 244.009995 775.659973 c
244.009995 775.107056 244.155014 774.674011 244.445007 774.367065 c
244.736008 774.059021 245.132019 773.904053 245.632019 773.904053 c
245.81601 773.904053 245.998016 773.924011 246.181015 773.96106 c
246.363007 773.996033 246.524017 774.04303 246.661011 774.102051 c
246.661011 775.154053 l
245.519012 775.154053 l
245.519012 775.65802 l
247.225006 775.65802 l
247.225006 773.818054 l
f
n
236.537018 773.508057 0.567001 4.275391 re
f
n
74.736 793.813049 m
65.625 808.085022 l
57.938004 808.085022 l
57.938004 783.179993 l
63.833004 783.179993 l
63.833004 800.272034 l
74.435005 783.179993 l
80.629005 783.179993 l
80.629005 808.085022 l
74.736 808.085022 l
74.736 793.813049 l
0.0 0.0 0.0 0.0 setcmykcolor
f
n
99.814003 798.80304 m
99.608002 798.387024 99.283005 798.008057 98.839005 797.663025 c
98.375008 797.309021 97.797005 797.08606 97.106003 796.986023 c
96.423004 796.886047 95.567001 796.83606 94.546005 796.83606 c
92.579994 796.83606 l
92.579994 803.496033 l
94.896004 803.496033 l
95.663002 803.496033 96.329994 803.469971 96.911003 803.432068 c
97.483002 803.392029 97.989998 803.289063 98.422005 803.111023 c
99.042007 802.852051 99.485008 802.509033 99.737007 802.065063 c
99.992004 801.617065 100.122002 801.08905 100.122002 800.469055 c
100.122002 799.772034 100.018005 799.217041 99.814003 798.80304 c
h
105.529999 796.753052 m
106.384003 797.90802 106.817001 799.403015 106.817001 801.247009 c
106.817001 802.584045 106.538002 803.695068 105.988007 804.579041 c
105.432007 805.469055 104.685005 806.185059 103.745003 806.746033 c
102.818008 807.301025 101.823006 807.664063 100.762001 807.831055 c
99.698006 808.001038 98.43 808.085022 96.953003 808.085022 c
86.155006 808.085022 l
86.155006 783.179993 l
92.579994 783.179993 l
92.579994 792.323059 l
95.534004 792.323059 l
102.323006 783.179993 l
110.183006 783.179993 l
101.856003 793.859009 l
103.451004 794.627014 104.673004 795.588013 105.529999 796.753052 c
f
n
98.422005 803.111023 m
97.989998 803.289063 97.483002 803.392029 96.911003 803.432068 c
96.329994 803.469971 95.663002 803.496033 94.896004 803.496033 c
92.579994 803.496033 l
92.579994 796.83606 l
94.546005 796.83606 l
95.567001 796.83606 96.423004 796.886047 97.106003 796.986023 c
97.797005 797.08606 98.375008 797.309021 98.839005 797.663025 c
99.283005 798.008057 99.608002 798.387024 99.814003 798.80304 c
100.018005 799.217041 100.122002 799.772034 100.122002 800.469055 c
100.122002 801.08905 99.992004 801.617065 99.737007 802.065063 c
99.485008 802.509033 99.042007 802.852051 98.422005 803.111023 c
1.0 0.65882 0.0 0.0 setcmykcolor
f
n
102.323006 783.179993 m
95.534004 792.323059 l
92.579994 792.323059 l
92.579994 783.179993 l
86.155006 783.179993 l
86.155006 808.085022 l
96.953003 808.085022 l
98.43 808.085022 99.698006 808.001038 100.762001 807.831055 c
101.823006 807.664063 102.818008 807.301025 103.745003 806.746033 c
104.685005 806.185059 105.432007 805.469055 105.988007 804.579041 c
106.538002 803.695068 106.817001 802.584045 106.817001 801.247009 c
106.817001 799.403015 106.384003 797.90802 105.529999 796.753052 c
104.673004 795.588013 103.451004 794.627014 101.856003 793.859009 c
110.183006 783.179993 l
102.323006 783.179993 l
h
80.629005 783.179993 m
74.435005 783.179993 l
63.833004 800.272034 l
63.833004 783.179993 l
57.938004 783.179993 l
57.938004 808.085022 l
65.625 808.085022 l
74.736 793.813049 l
74.736 808.085022 l
80.629005 808.085022 l
80.629005 783.179993 l
h
112.362007 795.632019 m
112.362007 805.264038 117.833008 813.612061 125.834007 817.756042 c
51.024002 817.756042 l
51.024002 773.508057 l
125.833008 773.508057 l
125.083008 773.896057 124.355003 774.322021 123.652008 774.78302 c
116.855003 779.229065 112.362007 786.903015 112.362007 795.632019 c
f
n
137.267014 773.508057 m
137.267014 773.508057 l
136.60701 773.508057 135.955002 773.542053 135.309998 773.59906 c
135.955002 773.542053 136.60701 773.508057 137.267014 773.508057 c
h
127.411003 775.825012 m
126.269997 776.394043 125.185005 777.05603 124.166008 777.80603 c
125.184006 777.05603 126.269997 776.394043 127.411003 775.825012 c
h
117.904007 784.929016 m
117.717003 785.265015 117.561005 785.619995 117.392006 785.967041 c
117.363007 785.967041 l
117.534004 785.615051 117.716003 785.269958 117.904007 784.929016 c
h
137.274002 791.971008 m
137.264999 791.971008 l
135.264008 789.973022 132.501999 788.735046 129.449997 788.735046 c
116.245003 788.735046 l
116.559006 787.778015 116.956009 786.861023 117.392006 785.967041 c
129.449997 785.967041 l
132.501999 785.967041 135.264008 787.202026 137.264999 789.202026 c
137.274002 789.202026 l
139.276001 787.202026 142.039993 785.967041 145.091003 785.967041 c
157.172012 785.967041 l
157.605011 786.857056 157.977005 787.78302 158.289001 788.735046 c
145.091003 788.735046 l
142.039993 788.735046 139.276001 789.973022 137.274002 791.971008 c
h
159.389999 795.64801 m
145.091003 795.64801 l
142.039993 795.64801 139.276001 796.886047 137.274002 798.884033 c
137.264999 798.884033 l
135.264008 796.886047 132.501999 795.64801 129.449997 795.64801 c
115.144005 795.64801 l
115.144005 795.642029 115.144005 795.636047 115.144005 795.631042 c
115.144005 794.699036 115.208008 793.78302 115.32 792.881042 c
129.449997 792.881042 l
132.501999 792.881042 135.264008 794.116028 137.264999 796.114014 c
137.274002 796.114014 l
139.276001 794.116028 142.039993 792.881042 145.091003 792.881042 c
159.214005 792.881042 l
159.326004 793.78302 159.391006 794.699036 159.391006 795.631042 c
159.391006 795.636047 159.389999 795.642029 159.389999 795.64801 c
h
150.367004 777.80603 m
149.349991 777.057007 148.266006 776.396057 147.127014 775.827026 c
148.266006 776.396057 149.351013 777.057007 150.367004 777.80603 c
h
137.274002 785.059021 m
137.264999 785.059021 l
135.264008 783.059021 132.501999 781.822021 129.449997 781.822021 c
119.988007 781.822021 l
120.786003 780.825012 121.669006 779.89801 122.625008 779.05304 c
129.449997 779.05304 l
132.501999 779.05304 135.264008 780.289063 137.264999 782.291016 c
137.274002 782.291016 l
139.276001 780.289063 142.039993 779.05304 145.091003 779.05304 c
151.909012 779.05304 l
152.865005 779.89801 153.748001 780.825012 154.546005 781.822021 c
145.091003 781.822021 l
142.039993 781.822021 139.276001 783.059021 137.274002 785.059021 c
h
137.264999 809.942017 m
137.274002 809.942017 l
139.276001 807.943054 142.039993 806.707031 145.091003 806.707031 c
156.416 806.707031 l
155.852005 807.679016 155.218002 808.604065 154.518005 809.476013 c
145.091003 809.476013 l
142.039993 809.476013 139.276001 810.71106 137.274002 812.71106 c
137.264999 812.71106 l
135.264008 810.71106 132.501999 809.476013 129.449997 809.476013 c
120.016006 809.476013 l
119.316002 808.604065 118.682007 807.679016 118.119003 806.707031 c
129.449997 806.707031 l
132.501999 806.707031 135.264008 807.943054 137.264999 809.942017 c
h
137.264999 803.027039 m
137.274002 803.027039 l
139.276001 801.029053 142.039993 799.792053 145.091003 799.792053 c
158.994003 799.792053 l
158.814011 800.738037 158.573013 801.663025 158.277008 802.563049 c
145.091003 802.563049 l
142.039993 802.563049 139.276001 803.798035 137.274002 805.799011 c
137.264999 805.799011 l
135.264008 803.798035 132.501999 802.563049 129.449997 802.563049 c
116.258003 802.563049 l
115.961006 801.663025 115.720001 800.738037 115.540001 799.792053 c
129.449997 799.792053 l
132.501999 799.792053 135.264008 801.029053 137.264999 803.027039 c
h
137.267014 817.756042 m
136.855011 817.756042 136.447006 817.743042 136.041 817.719971 c
136.447006 817.743042 136.856003 817.756042 137.267014 817.756042 c
137.267014 817.756042 l
0.0 0.0 0.0 0.0 setcmykcolor
f
n
145.091003 779.05304 m
142.039993 779.05304 139.276001 780.289063 137.274002 782.291016 c
137.264999 782.291016 l
135.264008 780.289063 132.501999 779.05304 129.449997 779.05304 c
122.619995 779.05304 l
126.521004 775.604065 131.649994 773.508057 137.268005 773.508057 c
142.884003 773.508057 148.012009 775.604065 151.914001 779.05304 c
145.091003 779.05304 l
1.0 0.65882 0.0 0.0 setcmykcolor
f
n
137.264999 805.799011 m
137.274002 805.799011 l
139.276001 803.798035 142.039993 802.563049 145.091003 802.563049 c
158.281006 802.563049 l
157.804001 804.017029 157.179993 805.402039 156.423004 806.707031 c
145.091003 806.707031 l
142.039993 806.707031 139.276001 807.943054 137.274002 809.942017 c
137.264999 809.942017 l
135.264008 807.943054 132.501999 806.707031 129.449997 806.707031 c
118.111008 806.707031 l
117.356003 805.402039 116.731003 804.017029 116.253006 802.563049 c
129.449997 802.563049 l
132.501999 802.563049 135.264008 803.798035 137.264999 805.799011 c
f
n
137.264999 791.971008 m
137.274002 791.971008 l
139.276001 789.973022 142.039993 788.735046 145.091003 788.735046 c
158.294006 788.735046 l
158.729996 790.065063 159.044006 791.45105 159.221008 792.881042 c
145.091003 792.881042 l
142.039993 792.881042 139.276001 794.116028 137.274002 796.114014 c
137.264999 796.114014 l
135.264008 794.116028 132.501999 792.881042 129.449997 792.881042 c
115.314003 792.881042 l
115.489998 791.45105 115.804008 790.065063 116.241005 788.735046 c
129.449997 788.735046 l
132.501999 788.735046 135.264008 789.973022 137.264999 791.971008 c
f
n
137.264999 798.884033 m
137.274002 798.884033 l
139.276001 796.886047 142.039993 795.64801 145.091003 795.64801 c
159.391006 795.64801 l
159.389008 797.06604 159.254013 798.449036 158.999008 799.792053 c
145.091003 799.792053 l
142.039993 799.792053 139.276001 801.029053 137.274002 803.027039 c
137.264999 803.027039 l
135.264008 801.029053 132.501999 799.792053 129.449997 799.792053 c
115.536003 799.792053 l
115.281006 798.449036 115.144005 797.06604 115.144005 795.64801 c
129.449997 795.64801 l
132.501999 795.64801 135.264008 796.886047 137.264999 798.884033 c
f
n
137.264999 812.71106 m
137.274002 812.71106 l
139.276001 810.71106 142.039993 809.476013 145.091003 809.476013 c
154.522003 809.476013 l
150.469009 814.52301 144.246002 817.756042 137.268005 817.756042 c
130.289001 817.756042 124.068008 814.52301 120.011009 809.476013 c
129.449997 809.476013 l
132.501999 809.476013 135.264008 810.71106 137.264999 812.71106 c
f
n
137.264999 785.059021 m
137.274002 785.059021 l
139.276001 783.059021 142.039993 781.822021 145.091003 781.822021 c
154.550003 781.822021 l
155.571014 783.098022 156.451004 784.484009 157.172012 785.967041 c
145.091003 785.967041 l
142.039993 785.967041 139.276001 787.202026 137.274002 789.202026 c
137.264999 789.202026 l
135.264008 787.202026 132.501999 785.967041 129.449997 785.967041 c
117.363007 785.967041 l
118.083008 784.484009 118.964005 783.098022 119.984009 781.822021 c
129.449997 781.822021 l
132.501999 781.822021 135.264008 783.059021 137.264999 785.059021 c
f
true setSA
n
68.447006 40.329002 m
68.005005 40.091003 67.659996 39.751003 67.413002 39.308002 c
67.165001 38.865002 67.041 38.403004 67.041 37.922001 c
67.041 37.447002 67.163002 36.989002 67.407005 36.549999 c
67.651001 36.111 67.992004 35.77 68.43 35.527 c
68.868004 35.284 69.327003 35.163002 69.805 35.163002 c
70.283005 35.163002 70.741005 35.284 71.179001 35.527 c
71.617004 35.77 71.958 36.111 72.201004 36.549999 c
72.443001 36.989002 72.565002 37.447002 72.565002 37.922001 c
72.565002 38.403004 72.442001 38.865002 72.195 39.308002 c
71.949005 39.751003 71.604004 40.091003 71.163002 40.329002 c
70.721001 40.567001 70.269005 40.686001 69.805 40.686001 c
69.341003 40.686001 68.889 40.567001 68.447006 40.329002 c
h
70.934006 39.927002 m
71.302002 39.729 71.589005 39.445004 71.795006 39.076 c
72.001007 38.706001 72.104004 38.322002 72.104004 37.922001 c
72.104004 37.525002 72.003006 37.145 71.800003 36.779999 c
71.598007 36.416 71.314003 36.132 70.949005 35.929001 c
70.583 35.725002 70.202003 35.624001 69.805 35.624001 c
69.408005 35.624001 69.026001 35.725002 68.661003 35.929001 c
68.295006 36.132 68.011002 36.416 67.807007 36.779999 c
67.604004 37.145 67.502007 37.525002 67.502007 37.922001 c
67.502007 38.322002 67.606003 38.706001 67.813004 39.076 c
68.019997 39.445004 68.307007 39.729 68.674004 39.927002 c
69.040001 40.126003 69.417 40.225002 69.805 40.225002 c
70.189995 40.225002 70.566002 40.126003 70.934006 39.927002 c
h
70.361 36.961002 m
70.196007 36.835003 70.004005 36.772003 69.785004 36.772003 c
69.512001 36.772003 69.290001 36.867001 69.119003 37.058002 c
68.947006 37.249001 68.862 37.531002 68.862 37.904003 c
68.862 38.276001 68.952003 38.562 69.134003 38.762001 c
69.315002 38.961002 69.546005 39.061001 69.826004 39.061001 c
70.018005 39.061001 70.185005 39.012001 70.328003 38.914001 c
70.470001 38.816002 70.578003 38.675003 70.651001 38.491001 c
71.088005 38.608002 l
71.010002 38.875 70.864006 39.086002 70.649002 39.242001 c
70.434006 39.397003 70.165001 39.475002 69.839996 39.475002 c
69.549995 39.475002 69.292 39.415001 69.066002 39.294003 c
68.839996 39.173 68.666 38.994003 68.545006 38.756001 c
68.423004 38.518002 68.362 38.238003 68.362 37.916 c
68.362 37.423 68.496002 37.038002 68.764 36.759998 c
69.032005 36.481003 69.381004 36.342003 69.811005 36.342003 c
70.150002 36.342003 70.438004 36.433002 70.676003 36.614002 c
70.914001 36.795002 71.07 37.038002 71.143005 37.342003 c
70.689995 37.475002 l
70.636002 37.259003 70.527 37.088001 70.361 36.961002 c
h
78.489998 36.092003 m
78.215004 35.863003 77.879005 35.749001 77.482002 35.749001 c
77.155006 35.749001 76.852005 35.833 76.572006 36.001003 c
76.291 36.169003 76.085007 36.423 75.952003 36.763 c
75.819 37.103001 75.753006 37.501003 75.753006 37.956001 c
75.753006 38.309998 75.809006 38.653004 75.921005 38.985001 c
76.032005 39.318001 76.226006 39.583 76.503006 39.781002 c
76.779007 39.978001 77.122002 40.077003 77.533005 40.077003 c
77.891006 40.077003 78.188004 39.988003 78.424004 39.809998 c
78.659996 39.632004 78.839996 39.348003 78.964005 38.958 c
79.667007 39.123001 l
79.523003 39.618 79.268005 40.002003 78.902 40.276001 c
78.537003 40.549004 78.086006 40.686001 77.549004 40.686001 c
77.076004 40.686001 76.643005 40.578003 76.249001 40.362003 c
75.855003 40.146004 75.552002 39.829998 75.338005 39.415001 c
75.125 38.999001 75.018005 38.511002 75.018005 37.953003 c
75.018005 37.441002 75.113007 36.961002 75.302002 36.515003 c
75.491005 36.068001 75.767006 35.728001 76.129005 35.492001 c
76.491005 35.257 76.961006 35.139 77.540001 35.139 c
78.098007 35.139 78.571007 35.292 78.957001 35.598003 c
79.344002 35.905003 79.612007 36.349998 79.759995 36.933002 c
79.049995 37.112003 l
78.952003 36.661003 78.766006 36.321003 78.489998 36.092003 c
h
80.813004 35.662003 m
81.148003 35.314003 81.588005 35.139 82.132004 35.139 c
82.471001 35.139 82.784004 35.218002 83.07 35.377003 c
83.357002 35.536003 83.575005 35.758003 83.725006 36.045002 c
83.875008 36.332001 83.949997 36.725002 83.949997 37.225002 c
83.949997 37.843002 83.781006 38.326 83.442001 38.676003 c
83.103004 39.026001 82.666 39.202003 82.132004 39.202003 c
81.651001 39.202003 81.244003 39.058002 80.909996 38.77 c
80.509995 38.423 80.309998 37.889999 80.309998 37.169998 c
80.309998 36.514 80.477005 36.011002 80.813004 35.662003 c
h
81.314003 38.285004 m
81.531006 38.531002 81.803001 38.655003 82.132004 38.655003 c
82.455002 38.655003 82.726006 38.531002 82.944 38.283001 c
83.162003 38.035004 83.271004 37.671001 83.271004 37.189999 c
83.271004 36.68 83.162003 36.301003 82.946007 36.052002 c
82.729004 35.803001 82.458 35.678001 82.132004 35.678001 c
81.803001 35.678001 81.531006 35.802002 81.314003 36.049999 c
81.098007 36.298 80.989006 36.669998 80.989006 37.168003 c
80.989006 37.666 81.098007 38.038002 81.314003 38.285004 c
h
85.379005 33.733002 m
85.379005 35.627003 l
85.492004 35.486 85.635002 35.369999 85.809998 35.278 c
85.984001 35.185001 86.182007 35.139 86.402 35.139 c
86.702003 35.139 86.988007 35.224003 87.261002 35.393002 c
87.533005 35.563004 87.741005 35.807003 87.884003 36.125 c
88.026001 36.444 88.098007 36.802002 88.098007 37.200001 c
88.098007 37.571003 88.033005 37.911003 87.904007 38.223003 c
87.774002 38.534 87.582001 38.775002 87.327003 38.945004 c
87.073006 39.116001 86.779999 39.202003 86.447006 39.202003 c
86.192001 39.202003 85.976006 39.152 85.797005 39.053001 c
85.619003 38.955002 85.459007 38.807003 85.317001 38.609001 c
85.317001 39.116001 l
84.723007 39.116001 l
84.723007 33.733002 l
85.379005 33.733002 l
h
85.639999 38.292004 m
85.856003 38.555 86.104004 38.686001 86.384003 38.686001 c
86.666 38.686001 86.909996 38.563004 87.113007 38.316002 c
87.316002 38.069 87.418007 37.698002 87.418007 37.202003 c
87.418007 36.682003 87.314003 36.298 87.106003 36.049999 c
86.897003 35.802002 86.647003 35.678001 86.355003 35.678001 c
86.067001 35.678001 85.822006 35.798 85.619995 36.037003 c
85.418007 36.276001 85.317001 36.647003 85.317001 37.147003 c
85.317001 37.648003 85.425003 38.029999 85.639999 38.292004 c
h
89.297005 33.647003 m
89.508003 33.647003 89.689003 33.698002 89.841003 33.799 c
89.993004 33.900002 90.127007 34.059002 90.245003 34.276001 c
90.333008 34.437 90.457001 34.731003 90.616005 35.158001 c
92.092003 39.116001 l
91.433006 39.116001 l
90.599998 36.846001 l
90.495003 36.558002 90.403008 36.261002 90.324005 35.957001 c
90.241005 36.272003 90.147003 36.573002 90.041008 36.859001 c
89.228004 39.116001 l
88.527 39.116001 l
90.004005 35.212002 l
89.977005 35.141003 89.957001 35.087002 89.945007 35.049999 c
89.852005 34.789001 89.785004 34.625 89.744003 34.559002 c
89.688004 34.471001 89.616005 34.402 89.528008 34.353001 c
89.439995 34.304001 89.323006 34.279999 89.177002 34.279999 c
89.07 34.279999 88.944008 34.299 88.800003 34.338001 c
88.871002 33.727001 l
89.027 33.674 89.169006 33.647003 89.297005 33.647003 c
h
93.293007 35.225002 m
93.293007 37.262001 l
93.293007 37.540001 93.329002 37.797001 93.403008 38.031002 c
93.452003 38.185001 93.534004 38.305 93.648003 38.392002 c
93.763008 38.479 93.892006 38.522003 94.035004 38.522003 c
94.196007 38.522003 94.357002 38.476002 94.518005 38.383003 c
94.754005 38.991001 l
94.523003 39.131001 94.297005 39.202003 94.074005 39.202003 c
93.919998 39.202003 93.779007 39.158001 93.650002 39.07 c
93.522003 38.982002 93.382004 38.801003 93.229996 38.526001 c
93.229996 39.116001 l
92.636002 39.116001 l
92.636002 35.225002 l
93.293007 35.225002 l
h
95.806007 39.842003 m
95.150002 39.842003 0.656197 0.75 re
95.806007 39.842003 m
h
95.806007 35.225002 m
95.150002 35.225002 0.656197 3.890999 re
95.806007 35.225002 m
h
97.103004 33.959999 m
97.389008 33.752003 97.764008 33.647003 98.228004 33.647003 c
98.619003 33.647003 98.948006 33.719997 99.215004 33.867001 c
99.482002 34.013 99.678001 34.213001 99.801003 34.466003 c
99.924004 34.718002 99.986008 35.148003 99.986008 35.753002 c
99.986008 39.116001 l
99.377007 39.116001 l
99.377007 38.639 l
99.079002 39.014004 98.700005 39.202003 98.241005 39.202003 c
97.897003 39.202003 97.597008 39.116001 97.342003 38.945004 c
97.087006 38.774002 96.892006 38.532001 96.758003 38.218002 c
96.624008 37.905003 96.556007 37.562 96.556007 37.191002 c
96.556007 36.652 96.703003 36.189003 96.996002 35.804001 c
97.289001 35.418003 97.703003 35.225002 98.238007 35.225002 c
98.667007 35.225002 99.026001 35.394001 99.314003 35.733002 c
99.317001 35.304001 99.301003 35.022003 99.267006 34.888 c
99.208008 34.669003 99.096008 34.499001 98.93 34.377003 c
98.764008 34.255001 98.528008 34.194 98.223007 34.194 c
97.939995 34.194 97.717003 34.256001 97.553001 34.380001 c
97.431007 34.472 97.357002 34.618 97.329994 34.819 c
96.689003 34.905003 l
96.679001 34.484001 96.817001 34.169998 97.103004 33.959999 c
h
97.543007 38.298 m
97.748001 38.536003 97.997002 38.655003 98.290001 38.655003 c
98.587006 38.655003 98.842003 38.534 99.052002 38.293003 c
99.263008 38.051003 99.369003 37.693001 99.369003 37.217003 c
99.369003 36.719002 99.266006 36.354 99.062004 36.121002 c
98.857002 35.888 98.603004 35.772003 98.301003 35.772003 c
97.996002 35.772003 97.742004 35.889 97.540001 36.123001 c
97.337006 36.357002 97.236008 36.729 97.236008 37.239002 c
97.236008 37.707001 97.339005 38.059998 97.543007 38.298 c
h
101.635002 35.225002 m
101.635002 37.351002 l
101.635002 37.656002 101.672005 37.895 101.745003 38.068001 c
101.819008 38.241001 101.941002 38.378002 102.114006 38.479 c
102.286003 38.581001 102.470001 38.631001 102.666008 38.631001 c
102.927002 38.631001 103.129005 38.556004 103.272003 38.406002 c
103.415009 38.256001 103.487007 38.017002 103.487007 37.687 c
103.487007 35.225002 l
104.143005 35.225002 l
104.143005 37.689003 l
104.143005 38.07 104.097008 38.361 104.006004 38.561001 c
103.914001 38.761002 103.762009 38.918003 103.549995 39.031002 c
103.338005 39.145 103.087006 39.202003 102.799004 39.202003 c
102.331001 39.202003 101.943008 39.023003 101.635002 38.664001 c
101.635002 40.592003 l
100.979004 40.592003 l
100.979004 35.225002 l
101.635002 35.225002 l
h
106.302002 35.788002 m
106.203003 35.788002 106.127007 35.803001 106.074005 35.835003 c
106.021004 35.867001 105.982002 35.91 105.959007 35.963001 c
105.935005 36.017002 105.924004 36.138 105.924004 36.326 c
105.924004 38.600002 l
106.596008 38.600002 l
106.596008 39.116001 l
105.924004 39.116001 l
105.924004 40.474003 l
105.267006 40.079002 l
105.267006 39.116001 l
104.783005 39.116001 l
104.783005 38.600002 l
105.267006 38.600002 l
105.267006 36.361 l
105.267006 35.966003 105.294006 35.706001 105.348007 35.583 c
105.402008 35.459003 105.494003 35.360001 105.626007 35.284 c
105.758003 35.208 105.944008 35.169998 106.183006 35.169998 c
106.329994 35.169998 106.496002 35.189999 106.681007 35.229 c
106.596008 35.812 l
106.474007 35.796001 106.377007 35.788002 106.302002 35.788002 c
h
108.171005 38.366001 m
107.421005 38.366001 0.75 0.75 re
108.171005 38.366001 m
h
108.171005 35.225002 m
108.171005 35.975002 l
107.421005 35.975002 l
107.421005 35.225002 l
108.171005 35.225002 l
0.0 0.0 0.0 0.0 setcmykcolor
f
n
56.039001 24.225 m
56.039001 28.439001 l
58.859001 24.225 l
59.586002 24.225 l
59.586002 29.592001 l
58.906002 29.592001 l
58.906002 25.379002 l
56.087002 29.592001 l
55.359001 29.592001 l
55.359001 24.225 l
56.039001 24.225 l
h
60.959003 24.662001 m
61.294003 24.314001 61.734001 24.139002 62.278004 24.139002 c
62.617004 24.139002 62.93 24.218 63.216003 24.377001 c
63.503002 24.536001 63.721004 24.758001 63.871002 25.045002 c
64.021004 25.332001 64.096001 25.725 64.096001 26.225 c
64.096001 26.843 63.927002 27.326002 63.587002 27.676001 c
63.248001 28.026001 62.812004 28.202002 62.278004 28.202002 c
61.797005 28.202002 61.389999 28.058001 61.056004 27.769999 c
60.655003 27.423002 60.456001 26.889999 60.456001 26.17 c
60.456001 25.514002 60.623001 25.011002 60.959003 24.662001 c
h
61.459999 27.285002 m
61.677002 27.531002 61.949001 27.655001 62.278004 27.655001 c
62.601002 27.655001 62.872002 27.531002 63.09 27.283001 c
63.308002 27.035002 63.416004 26.671001 63.416004 26.189999 c
63.416004 25.68 63.308002 25.301001 63.092003 25.052002 c
62.875004 24.803001 62.604004 24.678001 62.278004 24.678001 c
61.949001 24.678001 61.677002 24.802002 61.459999 25.049999 c
61.244003 25.298 61.135002 25.67 61.135002 26.168001 c
61.135002 26.666 61.244003 27.038002 61.459999 27.285002 c
h
65.517006 24.225 m
65.517006 26.262001 l
65.517006 26.539999 65.554001 26.797001 65.628006 27.031002 c
65.677002 27.185001 65.759003 27.305002 65.873001 27.392002 c
65.988007 27.479002 66.117004 27.522001 66.260002 27.522001 c
66.421005 27.522001 66.582001 27.476002 66.742004 27.383001 c
66.978004 27.991001 l
66.748001 28.131001 66.522003 28.202002 66.299004 28.202002 c
66.145004 28.202002 66.004005 28.158001 65.875 28.07 c
65.747002 27.982002 65.606003 27.801001 65.455002 27.526001 c
65.455002 28.116001 l
64.861 28.116001 l
64.861 24.225 l
65.517006 24.225 l
h
67.615005 24.454 m
67.879997 24.244001 68.265007 24.139002 68.769997 24.139002 c
69.074005 24.139002 69.347 24.192001 69.589005 24.298 c
69.830002 24.404001 70.015007 24.554001 70.143005 24.748001 c
70.271004 24.942001 70.335007 25.149002 70.335007 25.368002 c
70.335007 25.593 70.282005 25.779999 70.177002 25.932001 c
70.071007 26.083002 69.925003 26.198002 69.739998 26.277 c
69.555 26.357 69.229996 26.458002 68.768005 26.583002 c
68.447006 26.671001 68.255005 26.727001 68.189003 26.752001 c
68.075005 26.798 67.992004 26.857 67.938004 26.928001 c
67.885002 26.997002 67.859001 27.074001 67.859001 27.159 c
67.859001 27.294001 67.923004 27.412001 68.051003 27.512001 c
68.18 27.612001 68.394005 27.663002 68.695 27.663002 c
68.949005 27.663002 69.146004 27.606001 69.286003 27.493002 c
69.425003 27.379999 69.509003 27.223001 69.538002 27.022001 c
70.187004 27.108002 l
70.145004 27.359999 70.07 27.561001 69.959999 27.712002 c
69.849998 27.862001 69.68 27.981001 69.449997 28.069002 c
69.220001 28.158001 68.952003 28.202002 68.648003 28.202002 c
68.445 28.202002 68.256004 28.175001 68.079002 28.123001 c
67.902 28.07 67.763 28.006001 67.659996 27.931002 c
67.524002 27.833002 67.416 27.711 67.337006 27.563002 c
67.258003 27.416 67.218002 27.255001 67.218002 27.082001 c
67.218002 26.892002 67.266006 26.718 67.363007 26.561001 c
67.459999 26.404001 67.601006 26.281002 67.789001 26.192001 c
67.976006 26.103001 68.309006 25.997002 68.789001 25.875002 c
69.146004 25.785002 69.369003 25.709999 69.459999 25.651001 c
69.589996 25.566002 69.655006 25.448002 69.655006 25.299002 c
69.655006 25.132002 69.582001 24.987001 69.436005 24.864 c
69.290001 24.74 69.065002 24.678001 68.763 24.678001 c
68.463005 24.678001 68.229004 24.748001 68.062004 24.888 c
67.895004 25.027 67.794006 25.228001 67.757004 25.491001 c
67.109001 25.389002 l
67.182007 24.976002 67.351006 24.665001 67.615005 24.454 c
h
71.779007 24.225 m
71.779007 25.765001 l
72.239998 26.213001 l
73.529999 24.225 l
74.343002 24.225 l
72.709007 26.67 l
74.195007 28.116001 l
73.341003 28.116001 l
71.779007 26.529001 l
71.779007 29.592001 l
71.122002 29.592001 l
71.122002 24.225 l
71.779007 24.225 l
h
77.755005 24.225 m
77.755005 26.608002 l
78.580002 26.608002 l
78.763 26.608002 78.895004 26.599001 78.976006 26.583002 c
79.086006 26.556002 79.194 26.509001 79.300003 26.442001 c
79.407005 26.374001 79.527 26.255001 79.661003 26.084002 c
79.796005 25.913002 79.967003 25.666 80.175003 25.343 c
80.886002 24.225 l
81.774002 24.225 l
80.844002 25.688002 l
80.659004 25.973001 80.462006 26.212002 80.255005 26.403002 c
80.157005 26.491001 80.015007 26.58 79.827003 26.67 c
80.342003 26.741001 80.724007 26.907001 80.970001 27.168001 c
81.217003 27.429001 81.341003 27.749001 81.341003 28.129999 c
81.341003 28.424002 81.266006 28.694002 81.117004 28.938002 c
80.968002 29.181002 80.769005 29.351002 80.519997 29.448002 c
80.269997 29.544001 79.906006 29.592001 79.427002 29.592001 c
77.044006 29.592001 l
77.044006 24.225 l
77.755005 24.225 l
h
77.755005 28.999001 m
79.456001 28.999001 l
79.854004 28.999001 80.145004 28.917002 80.330002 28.754002 c
80.514008 28.59 80.606003 28.382002 80.606003 28.128002 c
80.606003 27.955002 80.559006 27.795002 80.464005 27.647001 c
80.368004 27.5 80.229004 27.393002 80.046005 27.326002 c
79.863007 27.259001 79.609001 27.225 79.284004 27.225 c
77.755005 27.225 l
77.755005 28.999001 l
h
84.624001 24.869999 m
84.453003 24.742001 84.246002 24.678001 84.004005 24.678001 c
83.679001 24.678001 83.408005 24.791 83.189995 25.018002 c
82.973007 25.245001 82.852005 25.572001 82.827003 25.999001 c
85.729996 25.999001 l
85.732002 26.077002 85.734001 26.135002 85.734001 26.174002 c
85.734001 26.817001 85.569008 27.316002 85.239006 27.67 c
84.909004 28.024002 84.484001 28.202002 83.964005 28.202002 c
83.427002 28.202002 82.989998 28.021002 82.653008 27.66 c
82.316002 27.299002 82.148003 26.791 82.148003 26.137001 c
82.148003 25.505001 82.314003 25.014002 82.648003 24.664001 c
82.981003 24.314001 83.432007 24.139002 84.001007 24.139002 c
84.453003 24.139002 84.824005 24.249001 85.115005 24.469002 c
85.405006 24.689001 85.604004 24.998001 85.712006 25.397001 c
85.031006 25.483002 l
84.931007 25.202002 84.795006 24.998001 84.624001 24.869999 c
h
83.209007 27.356001 m
83.415001 27.561001 83.669998 27.663002 83.973007 27.663002 c
84.307007 27.663002 84.579002 27.535002 84.789001 27.279001 c
84.926003 27.114002 85.009003 26.867001 85.038002 26.538002 c
82.866005 26.538002 l
82.888 26.879002 83.003006 27.152 83.209007 27.356001 c
h
86.833008 22.959999 m
87.119003 22.752001 87.493004 22.647001 87.957001 22.647001 c
88.348007 22.647001 88.677002 22.719999 88.945007 22.867001 c
89.212006 23.013 89.407005 23.213001 89.531006 23.466002 c
89.654007 23.718 89.716003 24.148001 89.716003 24.753 c
89.716003 28.116001 l
89.106003 28.116001 l
89.106003 27.639002 l
88.808006 28.014002 88.43 28.202002 87.971001 28.202002 c
87.627007 28.202002 87.327003 28.116001 87.072006 27.945002 c
86.817001 27.774002 86.622002 27.532001 86.488007 27.218 c
86.353004 26.905001 86.286003 26.562002 86.286003 26.191002 c
86.286003 25.652 86.432007 25.189001 86.725006 24.804001 c
87.019005 24.418001 87.432007 24.225 87.967003 24.225 c
88.397003 24.225 88.756004 24.394001 89.044006 24.733002 c
89.046005 24.304001 89.029999 24.022001 88.996002 23.888 c
88.938004 23.669001 88.825005 23.499001 88.659004 23.377001 c
88.493004 23.255001 88.258003 23.194 87.953003 23.194 c
87.669998 23.194 87.446007 23.256001 87.283005 23.379999 c
87.161003 23.472002 87.086006 23.618002 87.059998 23.819 c
86.419006 23.905001 l
86.409004 23.484001 86.547005 23.17 86.833008 22.959999 c
h
87.273003 27.298002 m
87.478004 27.536001 87.727005 27.655001 88.019005 27.655001 c
88.317001 27.655001 88.571007 27.534 88.782005 27.293001 c
88.993004 27.051001 89.099007 26.693001 89.099007 26.217001 c
89.099007 25.719002 88.996002 25.354002 88.791008 25.121 c
88.586006 24.888 88.333008 24.772001 88.029999 24.772001 c
87.725006 24.772001 87.472008 24.889002 87.269005 25.123001 c
87.067001 25.357 86.966003 25.729002 86.966003 26.239 c
86.966003 26.707001 87.068001 27.059999 87.273003 27.298002 c
h
91.365005 24.225 m
91.365005 26.349001 l
91.365005 26.847002 91.467003 27.186001 91.672005 27.364002 c
91.877007 27.542002 92.121002 27.631001 92.403008 27.631001 c
92.579994 27.631001 92.734001 27.592001 92.865005 27.512001 c
92.996002 27.433001 93.088005 27.327002 93.139008 27.194002 c
93.191002 27.061001 93.217003 26.859999 93.217003 26.591002 c
93.217003 24.225 l
93.873001 24.225 l
93.873001 26.616001 l
93.873001 26.921001 93.861008 27.135002 93.836006 27.257002 c
93.797005 27.445002 93.728004 27.607002 93.631004 27.744001 c
93.533005 27.881001 93.386002 27.991001 93.189003 28.075001 c
92.992004 28.16 92.776001 28.202002 92.542007 28.202002 c
92.002007 28.202002 91.588005 27.989002 91.302002 27.563002 c
91.302002 28.116001 l
90.709007 28.116001 l
90.709007 24.225 l
91.365005 24.225 l
h
97.137001 24.869999 m
96.966003 24.742001 96.759995 24.678001 96.518005 24.678001 c
96.193001 24.678001 95.921005 24.791 95.704002 25.018002 c
95.486008 25.245001 95.365005 25.572001 95.341003 25.999001 c
98.243004 25.999001 l
98.246002 26.077002 98.247002 26.135002 98.247002 26.174002 c
98.247002 26.817001 98.082008 27.316002 97.753006 27.67 c
97.423004 28.024002 96.998001 28.202002 96.478004 28.202002 c
95.941002 28.202002 95.504005 28.021002 95.167007 27.66 c
94.829994 27.299002 94.661003 26.791 94.661003 26.137001 c
94.661003 25.505001 94.828003 25.014002 95.161003 24.664001 c
95.494003 24.314001 95.946007 24.139002 96.515007 24.139002 c
96.966003 24.139002 97.337006 24.249001 97.628006 24.469002 c
97.919006 24.689001 98.118004 24.998001 98.225006 25.397001 c
97.544006 25.483002 l
97.444008 25.202002 97.308006 24.998001 97.137001 24.869999 c
h
95.722008 27.356001 m
95.928001 27.561001 96.183006 27.663002 96.486008 27.663002 c
96.82 27.663002 97.093002 27.535002 97.303001 27.279001 c
97.439003 27.114002 97.522003 26.867001 97.552002 26.538002 c
95.379997 26.538002 l
95.402008 26.879002 95.516006 27.152 95.722008 27.356001 c
h
99.300003 24.454 m
99.564003 24.244001 99.949005 24.139002 100.454002 24.139002 c
100.759003 24.139002 101.032005 24.192001 101.273003 24.298 c
101.515007 24.404001 101.700005 24.554001 101.828003 24.748001 c
101.956001 24.942001 102.019997 25.149002 102.019997 25.368002 c
102.019997 25.593 101.967003 25.779999 101.861008 25.932001 c
101.756004 26.083002 101.610001 26.198002 101.425003 26.277 c
101.239006 26.357 100.915009 26.458002 100.452003 26.583002 c
100.132004 26.671001 99.939003 26.727001 99.874008 26.752001 c
99.759995 26.798 99.676003 26.857 99.623001 26.928001 c
99.57 26.997002 99.543007 27.074001 99.543007 27.159 c
99.543007 27.294001 99.607002 27.412001 99.736008 27.512001 c
99.864006 27.612001 100.079002 27.663002 100.379005 27.663002 c
100.634003 27.663002 100.831001 27.606001 100.970001 27.493002 c
101.110001 27.379999 101.194008 27.223001 101.223007 27.022001 c
101.871002 27.108002 l
101.829994 27.359999 101.754005 27.561001 101.645004 27.712002 c
101.535004 27.862001 101.365005 27.981001 101.135002 28.069002 c
100.904007 28.158001 100.637001 28.202002 100.332008 28.202002 c
100.129997 28.202002 99.939995 28.175001 99.764008 28.123001 c
99.587006 28.07 99.447006 28.006001 99.345001 27.931002 c
99.208008 27.833002 99.099998 27.711 99.021004 27.563002 c
98.942001 27.416 98.903008 27.255001 98.903008 27.082001 c
98.903008 26.892002 98.951004 26.718 99.047005 26.561001 c
99.144005 26.404001 99.286003 26.281002 99.473007 26.192001 c
99.659996 26.103001 99.994003 25.997002 100.474007 25.875002 c
100.829994 25.785002 101.054008 25.709999 101.145004 25.651001 c
101.275002 25.566002 101.339996 25.448002 101.339996 25.299002 c
101.339996 25.132002 101.267006 24.987001 101.121002 24.864 c
100.974007 24.74 100.75 24.678001 100.447006 24.678001 c
100.148003 24.678001 99.914001 24.748001 99.747002 24.888 c
99.579994 25.027 99.478004 25.228001 99.442001 25.491001 c
98.793007 25.389002 l
98.866005 24.976002 99.035004 24.665001 99.300003 24.454 c
h
105.058006 24.869999 m
104.887009 24.742001 104.681007 24.678001 104.439003 24.678001 c
104.114006 24.678001 103.842003 24.791 103.625008 25.018002 c
103.407005 25.245001 103.286003 25.572001 103.262009 25.999001 c
106.164001 25.999001 l
106.167007 26.077002 106.168007 26.135002 106.168007 26.174002 c
106.168007 26.817001 106.003006 27.316002 105.674004 27.67 c
105.344002 28.024002 104.919006 28.202002 104.399002 28.202002 c
103.862007 28.202002 103.425003 28.021002 103.088005 27.66 c
102.751007 27.299002 102.582008 26.791 102.582008 26.137001 c
102.582008 25.505001 102.749008 25.014002 103.082008 24.664001 c
103.415009 24.314001 103.867004 24.139002 104.436005 24.139002 c
104.887009 24.139002 105.258003 24.249001 105.549004 24.469002 c
105.839996 24.689001 106.039001 24.998001 106.146004 25.397001 c
105.465004 25.483002 l
105.365005 25.202002 105.229996 24.998001 105.058006 24.869999 c
h
103.643005 27.356001 m
103.849998 27.561001 104.104004 27.663002 104.407005 27.663002 c
104.742004 27.663002 105.014008 27.535002 105.224007 27.279001 c
105.361008 27.114002 105.444008 26.867001 105.473007 26.538002 c
103.301003 26.538002 l
103.323006 26.879002 103.437004 27.152 103.643005 27.356001 c
h
107.628006 24.225 m
107.628006 26.349001 l
107.628006 26.847002 107.731003 27.186001 107.936005 27.364002 c
108.141006 27.542002 108.384003 27.631001 108.666008 27.631001 c
108.843002 27.631001 108.997002 27.592001 109.128006 27.512001 c
109.259995 27.433001 109.351006 27.327002 109.403008 27.194002 c
109.454002 27.061001 109.479996 26.859999 109.479996 26.591002 c
109.479996 24.225 l
110.136002 24.225 l
110.136002 26.616001 l
110.136002 26.921001 110.124008 27.135002 110.099998 27.257002 c
110.059998 27.445002 109.992004 27.607002 109.894005 27.744001 c
109.796005 27.881001 109.649002 27.991001 109.452003 28.075001 c
109.256004 28.16 109.040001 28.202002 108.805008 28.202002 c
108.265007 28.202002 107.852005 27.989002 107.566002 27.563002 c
107.566002 28.116001 l
106.972008 28.116001 l
106.972008 24.225 l
107.628006 24.225 l
h
112.295006 24.788002 m
112.196007 24.788002 112.119995 24.803001 112.067009 24.835001 c
112.014008 24.867001 111.975006 24.91 111.952003 24.963001 c
111.928009 25.017002 111.917007 25.138 111.917007 25.326002 c
111.917007 27.6 l
112.589005 27.6 l
112.589005 28.116001 l
111.917007 28.116001 l
111.917007 29.474001 l
111.259995 29.079 l
111.259995 28.116001 l
110.776009 28.116001 l
110.776009 27.6 l
111.259995 27.6 l
111.259995 25.361002 l
111.259995 24.966002 111.287003 24.706001 111.341003 24.583002 c
111.395004 24.459002 111.487007 24.359999 111.619003 24.284 c
111.751007 24.208002 111.937004 24.17 112.176003 24.17 c
112.323006 24.17 112.489006 24.189999 112.674004 24.229002 c
112.589005 24.812 l
112.467003 24.796001 112.369995 24.788002 112.295006 24.788002 c
h
113.875008 24.225 m
113.875008 26.262001 l
113.875008 26.539999 113.912003 26.797001 113.986008 27.031002 c
114.035004 27.185001 114.117004 27.305002 114.231003 27.392002 c
114.346008 27.479002 114.475006 27.522001 114.618004 27.522001 c
114.779007 27.522001 114.939995 27.476002 115.099998 27.383001 c
115.336006 27.991001 l
115.106003 28.131001 114.879997 28.202002 114.657005 28.202002 c
114.503006 28.202002 114.362007 28.158001 114.233002 28.07 c
114.105003 27.982002 113.965004 27.801001 113.813004 27.526001 c
113.813004 28.116001 l
113.219002 28.116001 l
113.219002 24.225 l
113.875008 24.225 l
h
118.396004 24.225 m
119.084007 24.225 l
119.003006 24.374001 118.949005 24.529999 118.922005 24.693001 c
118.894005 24.856001 118.881004 25.243002 118.881004 25.856001 c
118.881004 26.735001 l
118.881004 27.027 118.869995 27.23 118.848007 27.342001 c
118.809006 27.523001 118.739998 27.672001 118.643005 27.789999 c
118.545006 27.908001 118.393005 28.007002 118.185005 28.085001 c
117.978004 28.163002 117.708008 28.202002 117.376007 28.202002 c
117.042007 28.202002 116.748009 28.156002 116.494003 28.065001 c
116.239998 27.973001 116.046005 27.843 115.912003 27.673002 c
115.778008 27.504002 115.682007 27.282001 115.623009 27.006001 c
116.271004 26.92 l
116.342003 27.194002 116.451004 27.385002 116.598007 27.493002 c
116.745003 27.601002 116.973007 27.655001 117.282005 27.655001 c
117.613007 27.655001 117.863007 27.58 118.031006 27.432001 c
118.155006 27.322001 118.217003 27.133001 118.217003 26.866001 c
118.217003 26.841002 118.215004 26.784 118.213005 26.694002 c
117.961006 26.606001 117.57 26.529999 117.037003 26.467001 c
116.776009 26.435001 116.579994 26.402 116.451004 26.368002 c
116.275009 26.319002 116.117004 26.247002 115.976006 26.152 c
115.836006 26.057001 115.722008 25.931002 115.636009 25.773001 c
115.549004 25.616001 115.506004 25.442001 115.506004 25.252001 c
115.506004 24.927002 115.621002 24.661001 115.849998 24.452002 c
116.079994 24.243002 116.408005 24.139002 116.836006 24.139002 c
117.094002 24.139002 117.337006 24.182001 117.563004 24.268002 c
117.789009 24.354002 118.025009 24.501001 118.271004 24.709002 c
118.290001 24.525002 118.332008 24.363001 118.396004 24.225 c
h
118.213005 25.937002 m
118.213005 25.646002 118.178009 25.426001 118.107002 25.278002 c
118.014008 25.085001 117.869003 24.933001 117.671005 24.822001 c
117.473007 24.709999 117.247009 24.655001 116.993004 24.655001 c
116.736008 24.655001 116.542007 24.713001 116.409004 24.831001 c
116.275009 24.948002 116.209007 25.094002 116.209007 25.269999 c
116.209007 25.385002 116.239006 25.489 116.301003 25.583002 c
116.362007 25.677002 116.449005 25.749001 116.561005 25.797001 c
116.674004 25.846001 116.866005 25.889999 117.138008 25.929001 c
117.617004 25.998001 117.977005 26.081001 118.217003 26.178001 c
118.213005 25.937002 l
h
120.536003 24.225 m
120.536003 29.592001 l
119.879997 29.592001 l
119.879997 24.225 l
120.536003 24.225 l
f
n
102.489998 411.147034 m
90.553001 411.147034 l
90.553001 412.318024 l
90.553001 413.647034 90.659004 414.616028 90.872002 415.228027 c
91.085007 415.83902 91.477005 416.419006 92.052002 416.966034 c
92.626007 417.513031 94.015007 418.528015 96.219002 420.013031 c
102.489998 424.128021 l
102.489998 430.959015 l
96.912003 427.489014 l
94.688004 426.131012 93.139999 425.051025 92.269005 424.25 c
91.398003 423.449005 90.598007 422.434021 89.869995 421.20401 c
89.506004 423.679016 88.623001 425.537018 87.223007 426.781006 c
85.822006 428.025024 84.047005 428.647034 81.897003 428.647034 c
80.204002 428.647034 78.699005 428.232025 77.383003 427.402008 c
76.067001 426.572021 75.152 425.468018 74.638 424.087006 c
74.123001 422.706024 73.865005 420.493011 73.865005 417.447021 c
73.865005 405.334015 l
102.489998 405.334015 l
102.489998 411.147034 l
h
78.739998 411.147034 m
78.739998 415.613007 l
78.739998 417.934021 78.773003 419.325012 78.838005 419.789032 c
78.994003 420.71701 79.367004 421.436035 79.958 421.945007 c
80.549995 422.45401 81.326004 422.709015 82.287003 422.709015 c
83.144005 422.709015 83.859001 422.516022 84.431007 422.129028 c
85.004005 421.742035 85.406006 421.207031 85.639999 420.524017 c
85.874001 419.839996 85.989998 418.126007 85.989998 415.381012 c
85.989998 411.147034 l
78.739998 411.147034 l
h
86.072006 440.754028 m
85.684006 441.303009 85.489998 442.068024 85.489998 443.049988 c
85.489998 444.501007 85.717003 445.48703 86.169006 446.011017 c
86.621002 446.534027 87.378006 446.796021 88.439003 446.796021 c
88.989998 446.796021 l
89.407005 445.808014 89.856003 444.032013 90.338005 441.471008 c
90.702003 439.571014 91.128006 438.118011 91.616005 437.109985 c
92.104004 436.10202 92.807007 435.318024 93.725006 434.759979 c
94.643005 434.200012 95.687004 433.921021 96.859001 433.921021 c
98.629997 433.921021 100.095001 434.531006 101.253006 435.753021 c
102.411003 436.97403 102.989998 438.644012 102.989998 440.764008 c
102.989998 441.965027 102.761002 443.096008 102.303001 444.155029 c
101.845001 445.215027 101.157005 446.209991 100.239998 447.142029 c
100.344002 447.179993 100.557007 447.244019 100.879997 447.335022 c
101.592003 447.542023 102.129005 447.716034 102.489998 447.858032 c
102.489998 453.358032 l
101.502007 452.876007 100.576004 452.548035 99.711006 452.372009 c
98.846008 452.196014 97.503006 452.108032 95.681007 452.108032 c
89.282005 452.171021 l
86.902 452.171021 85.266006 451.927032 84.376007 451.439026 c
83.485001 450.951019 82.75 450.109009 82.171005 448.914032 c
81.593002 447.718018 81.303001 445.897034 81.303001 443.45401 c
81.303001 440.763031 81.788002 438.734009 82.758003 437.369019 c
83.728004 436.004028 85.223007 435.042023 87.239998 434.483032 c
88.115005 439.421021 l
87.141006 439.761017 86.461006 440.205017 86.072006 440.754028 c
h
93.646004 446.796021 m
94.962006 446.796021 95.853004 446.725006 96.322006 446.582031 c
97.039001 446.374023 97.644005 445.939026 98.139008 445.278015 c
98.790001 444.383026 99.115005 443.442017 99.115005 442.456024 c
99.115005 441.573029 98.836006 440.847015 98.275002 440.276031 c
97.716003 439.706024 97.052002 439.421021 96.283005 439.421021 c
95.502007 439.421021 94.857002 439.777008 94.349007 440.491028 c
94.037003 440.958008 93.719002 441.949982 93.392006 443.468018 c
93.067001 444.985016 92.787003 446.095032 92.553001 446.796021 c
93.646004 446.796021 l
h
110.428009 458.617035 m
110.428009 464.117035 l
99.963005 464.117035 l
101.07 465.14502 101.851006 466.125031 102.306007 467.05603 c
102.762009 467.988037 102.989998 469.027008 102.989998 470.174011 c
102.989998 472.583008 102.029999 474.634033 100.108002 476.327026 c
98.187004 478.019989 95.494003 478.867035 92.029007 478.867035 c
88.656006 478.867035 86.024002 478.026031 84.136002 476.345032 c
82.247002 474.665009 81.303001 472.619995 81.303001 470.209991 c
81.303001 468.82901 81.623001 467.571014 82.264008 466.438019 c
82.904007 465.305023 83.746002 464.406036 84.787003 463.742035 c
81.739998 463.742035 l
81.739998 458.617035 l
110.428009 458.617035 l
h
87.169998 465.378021 m
86.134003 466.259979 85.615005 467.369995 85.615005 468.707031 c
85.615005 469.991028 86.143005 471.068024 87.199005 471.937012 c
88.255005 472.80603 89.871002 473.242035 92.047005 473.242035 c
94.379997 473.242035 96.057007 472.819977 97.081001 471.976013 c
98.104004 471.133026 98.615005 470.075012 98.615005 468.803009 c
98.615005 467.479034 98.058006 466.357025 96.944008 465.436035 c
95.829994 464.514008 94.106003 464.054016 91.773003 464.054016 c
89.739998 464.054016 88.206001 464.495026 87.169998 465.378021 c
h
110.428009 484.251038 m
110.428009 489.751038 l
99.963005 489.751038 l
101.07 490.779022 101.851006 491.758026 102.306007 492.690002 c
102.762009 493.622009 102.989998 494.661011 102.989998 495.807037 c
102.989998 498.216034 102.029999 500.267029 100.108002 501.959991 c
98.187004 503.654022 95.494003 504.501038 92.029007 504.501038 c
88.656006 504.501038 86.024002 503.660004 84.136002 501.979034 c
82.247002 500.298035 81.303001 498.253021 81.303001 495.843018 c
81.303001 494.462036 81.623001 493.205017 82.264008 492.072021 c
82.904007 490.939026 83.746002 490.039978 84.787003 489.376038 c
81.739998 489.376038 l
81.739998 484.251038 l
110.428009 484.251038 l
h
87.169998 491.011017 m
86.134003 491.894012 85.615005 493.003021 85.615005 494.339996 c
85.615005 495.625031 86.143005 496.702026 87.199005 497.571014 c
88.255005 498.440002 89.871002 498.876038 92.047005 498.876038 c
94.379997 498.876038 96.057007 498.45401 97.081001 497.609985 c
98.104004 496.766022 98.615005 495.709015 98.615005 494.437012 c
98.615005 493.113037 98.058006 491.991028 96.944008 491.069977 c
95.829994 490.14801 94.106003 489.688019 91.773003 489.688019 c
89.739998 489.688019 88.206001 490.128021 87.169998 491.011017 c
h
97.919998 510.105011 m
99.581001 511.001038 100.842003 512.312012 101.701004 514.035034 c
102.559006 515.757019 102.989998 517.568054 102.989998 519.466003 c
102.989998 522.535034 101.958008 525.079041 99.893005 527.101013 c
97.829002 529.122009 95.227005 530.134033 92.088005 530.134033 c
88.974007 530.134033 86.399002 529.132019 84.360001 527.130005 c
82.322006 525.128052 81.303001 522.559998 81.303001 519.427002 c
81.303001 517.399048 81.753006 515.562012 82.651001 513.917053 c
83.549995 512.27301 84.852005 511.001038 86.558006 510.105011 c
88.265007 509.207031 90.029999 508.759033 91.853004 508.759033 c
94.237007 508.759033 96.259995 509.207031 97.919998 510.105011 c
h
87.437004 515.847046 m
86.348007 516.822998 85.803001 518.026001 85.803001 519.456055 c
85.803001 520.886047 86.348007 522.085999 87.437004 523.055054 c
88.527 524.024048 90.084007 524.509033 92.107002 524.509033 c
94.183006 524.509033 95.765007 524.024048 96.855003 523.055054 c
97.945007 522.085999 98.489998 520.886047 98.489998 519.456055 c
98.489998 518.026001 97.945007 516.822998 96.855003 515.847046 c
95.765007 514.871033 94.196007 514.384033 92.146004 514.384033 c
90.098007 514.384033 88.527 514.871033 87.437004 515.847046 c
h
96.099007 540.955017 m
92.579994 540.955017 90.267006 541.107056 89.163002 541.411011 c
88.059006 541.716003 87.296005 542.134033 86.874001 542.665039 c
86.452003 543.196045 86.239998 543.844055 86.239998 544.609009 c
86.239998 545.399048 86.540001 546.254028 87.139008 547.174011 c
82.341003 548.893005 l
81.649002 547.737 81.303001 546.537048 81.303001 545.291016 c
81.303001 544.40802 81.519005 543.619995 81.951004 542.926025 c
82.384003 542.232056 83.297005 541.449036 84.689003 540.580017 c
81.739998 540.580017 l
81.739998 535.455017 l
102.489998 535.455017 l
102.489998 540.955017 l
96.099007 540.955017 l
h
81.739998 558.222046 m
74.365005 558.222046 l
77.615005 552.722046 l
81.739998 552.722046 l
81.739998 550.222046 l
86.115005 550.222046 l
86.115005 552.722046 l
95.178001 552.722046 l
97.124008 552.722046 98.416008 552.779053 99.055008 552.89502 c
99.956001 553.038025 100.671005 553.29303 101.199005 553.661011 c
101.728004 554.028015 102.159004 554.606018 102.491005 555.393005 c
102.823006 556.18103 102.989998 557.065002 102.989998 558.048035 c
102.989998 559.64801 102.716003 561.081055 102.168007 562.347046 c
97.900002 561.940002 l
98.252007 560.979004 98.428001 560.246033 98.428001 559.73999 c
98.428001 559.377014 98.337006 559.068054 98.154007 558.815002 c
97.971008 558.561035 97.739998 558.399048 97.459007 558.328003 c
97.179001 558.257019 96.189995 558.222046 94.493004 558.222046 c
86.115005 558.222046 l
86.115005 561.972046 l
81.739998 561.972046 l
81.739998 558.222046 l
f
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
