%!PS-Adobe-3.0 EPSF-3.0
%%Title: (NR-logo_utvidet_60-5mm_cmyk.indd)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 14:13:05 02/15/05
%%For: (Lars)
%%DocumentData: Clean7Bit
%%BoundingBox: 0 0 171 34
%%HiResBoundingBox: 0.0 0.0 171.496002 33.673004
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf HB  0
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1212 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:96a3bcca-16c5-4778-a5b6-73531974b538' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0.1 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:96a3bcca-16c5-4778-a5b6-73531974b538' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreateDate='2004-12-20T21:05:51+01:00' xap:CreatorTool='Adobe InDesign CS (3.0.1)' xap:ModifyDate='2004-12-20T21:05:51+01:00'></rdf:Description>
<rdf:Description rdf:about='uuid:96a3bcca-16c5-4778-a5b6-73531974b538' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:1ef7a4da-3c72-475a-8cef-83ad699456cc'/>
<rdf:Description rdf:about='uuid:96a3bcca-16c5-4778-a5b6-73531974b538' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>NR-logo_utvidet_60-5mm_cmyk.indd</rdf:li></rdf:Alt></dc:title><dc:creator><rdf:Seq><rdf:li>Lars</rdf:li></rdf:Seq></dc:creator></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 171 34 rectclip
0.0 0.0 171.496002 33.673004 re
W
n
n
91.663002 11.677001 m
92.183006 11.929999 92.585007 12.246 92.866005 12.628 c
93.146004 13.009001 93.287003 13.501 93.287003 14.106001 c
93.287003 14.546 93.196007 14.911 93.014008 15.202001 c
92.833008 15.493001 92.588005 15.73 92.279999 15.914001 c
91.975006 16.098001 91.648003 16.216002 91.300003 16.271 c
90.952003 16.326 90.535004 16.353001 90.051003 16.353001 c
86.508003 16.353001 l
86.508003 8.163899 l
88.625008 8.163899 l
88.625008 11.171 l
89.589005 11.171 l
91.817001 8.163899 l
94.397003 8.163899 l
91.663002 11.677001 l
h
90.988007 13.302001 m
90.921005 13.164001 90.815002 13.039001 90.669998 12.926001 c
90.517006 12.809001 90.329002 12.734 90.104004 12.701 c
89.879997 12.668 89.599998 12.652 89.266006 12.652 c
88.625008 12.652 l
88.625008 14.851001 l
89.381004 14.851001 l
89.631004 14.851001 89.849998 14.844001 90.039001 14.831 c
90.227005 14.817 90.392006 14.782001 90.534004 14.724001 c
90.737007 14.639999 90.881004 14.524001 90.964005 14.379001 c
91.047005 14.232 91.089005 14.057001 91.089005 13.852 c
91.089005 13.622001 91.055008 13.438001 90.988007 13.302001 c
1.0 0.65882 0.0 0.0 setcmykcolor
f
n
101.542007 11.586 m
101.542007 12.539001 101.290001 13.269001 100.783005 13.776001 c
100.277008 14.284 99.521004 14.538001 98.516006 14.538001 c
97.427002 14.538001 96.569008 14.239 95.944008 13.643001 c
95.318001 13.047001 95.006004 12.239 95.006004 11.219999 c
95.006004 10.189 95.337006 9.3954 95.997002 8.8378 c
96.657005 8.2802 97.607002 8.0018 98.846008 8.0018 c
99.327003 8.0018 99.765007 8.0419 100.162003 8.1229 c
100.558006 8.203 100.979004 8.333899 101.426003 8.5145 c
101.426003 10.107 l
101.207008 10.107 l
100.979004 9.9296 100.668007 9.7635 100.277008 9.6093 c
99.883003 9.455001 99.479004 9.378799 99.059998 9.378799 c
98.400002 9.378799 97.900002 9.5077 97.559998 9.7675 c
97.221008 10.027 97.037003 10.403001 97.007004 10.894 c
101.542007 10.894 l
101.542007 11.586 l
h
97.003006 12.051001 m
97.031006 12.486001 97.169998 12.805 97.416008 13.002001 c
97.662003 13.2 97.976006 13.3 98.358002 13.3 c
98.769005 13.3 99.073006 13.195001 99.267006 12.986001 c
99.463005 12.776001 99.565002 12.465 99.576004 12.051001 c
97.003006 12.051001 l
f
n
109.369003 14.341001 m
107.439995 14.341001 l
107.368004 14.069 l
107.144005 14.208001 106.896004 14.317 106.623009 14.395 c
106.349007 14.475 106.046005 14.515 105.712006 14.515 c
105.342003 14.515 104.979996 14.443001 104.626007 14.3 c
104.273003 14.156001 103.975006 13.957001 103.733002 13.7 c
103.473007 13.425 103.271004 13.102 103.127007 12.732 c
102.985008 12.362 102.914001 11.922001 102.914001 11.413 c
102.914001 10.349999 103.148003 9.5575 103.617004 9.037001 c
104.086006 8.5165 104.753006 8.2557 105.619995 8.2557 c
105.975006 8.2557 106.297005 8.3124 106.587006 8.4257 c
106.876007 8.5399 107.139999 8.6942 107.379005 8.8885 c
107.379005 8.7733 l
107.379005 8.5165 107.353004 8.2968 107.302002 8.1132 c
107.25 7.9296 107.167007 7.7802 107.054008 7.663001 c
106.934006 7.538001 106.759003 7.4423 106.529999 7.3739 c
106.300003 7.3065 106.001007 7.2733 105.635002 7.2733 c
105.361008 7.2733 105.049004 7.3124 104.701004 7.3915 c
104.352005 7.4706 104.057007 7.5585 103.815002 7.6542 c
103.573006 7.6542 l
103.573006 6.1034 l
103.877007 6.0292 104.239006 5.9667 104.656006 5.9149 c
105.073006 5.8641 105.496002 5.8387 105.926003 5.8387 c
106.455002 5.8387 106.929008 5.8876 107.349998 5.9891 c
107.769997 6.0897 108.129005 6.2538 108.426003 6.4813 c
108.724007 6.705 108.955002 7.0145 109.121002 7.411 c
109.286003 7.8065 109.369003 8.2948 109.369003 8.8729 c
109.369003 14.341001 l
h
106.858002 9.8651 m
106.667007 9.8026 106.475006 9.771399 106.278008 9.771399 c
105.842003 9.771399 105.513008 9.8885 105.293007 10.124001 c
105.072006 10.358001 104.961006 10.773001 104.961006 11.367001 c
104.961006 11.903001 105.091003 12.321001 105.349998 12.62 c
105.610001 12.919001 106.0 13.069 106.518005 13.069 c
106.649994 13.069 106.797005 13.054001 106.962006 13.027 c
107.127007 12.999001 107.266006 12.961 107.379005 12.914001 c
107.379005 10.113001 l
107.221008 10.01 107.047005 9.9266 106.858002 9.8651 c
f
n
117.315002 8.163899 m
115.325005 8.163899 l
115.325005 11.232 l
115.325005 11.481001 115.313004 11.73 115.287003 11.978001 c
115.261009 12.226001 115.217003 12.409 115.156006 12.527 c
115.083008 12.663001 114.976006 12.763 114.835007 12.824 c
114.696007 12.887001 114.5 12.918 114.248009 12.918 c
114.069008 12.918 113.887009 12.889001 113.704002 12.83 c
113.519005 12.77 113.319008 12.678 113.104004 12.549001 c
113.104004 8.163899 l
111.115005 8.163899 l
111.115005 14.341001 l
113.104004 14.341001 l
113.104004 13.661 l
113.456009 13.936001 113.792007 14.147 114.115005 14.294001 c
114.439995 14.44 114.798004 14.515 115.194008 14.515 c
115.859009 14.515 116.378006 14.32 116.753006 13.932001 c
117.127007 13.542001 117.315002 12.96 117.315002 12.186001 c
117.315002 8.163899 l
f
n
125.374008 11.586 m
125.374008 12.539001 125.121002 13.269001 124.615005 13.776001 c
124.108009 14.284 123.352005 14.538001 122.347008 14.538001 c
121.258003 14.538001 120.402008 14.239 119.776009 13.643001 c
119.151009 13.047001 118.837006 12.239 118.837006 11.219999 c
118.837006 10.189 119.167007 9.3954 119.828003 8.8378 c
120.489006 8.2802 121.438004 8.0018 122.678009 8.0018 c
123.158005 8.0018 123.596008 8.0419 123.993004 8.1229 c
124.388008 8.203 124.809998 8.333899 125.258003 8.5145 c
125.258003 10.107 l
125.037003 10.107 l
124.809998 9.9296 124.5 9.7635 124.108009 9.6093 c
123.715004 9.455001 123.309998 9.378799 122.891006 9.378799 c
122.231003 9.378799 121.731003 9.5077 121.392006 9.7675 c
121.052002 10.027 120.868004 10.403001 120.838005 10.894 c
125.374008 10.894 l
125.374008 11.586 l
h
120.833008 12.051001 m
120.862007 12.486001 121.0 12.805 121.247009 13.002001 c
121.494003 13.2 121.807007 13.3 122.189003 13.3 c
122.599998 13.3 122.904007 13.195001 123.099007 12.986001 c
123.293007 12.776001 123.396004 12.465 123.407005 12.051001 c
120.833008 12.051001 l
f
n
132.656006 10.121 m
132.656006 9.4823 132.371002 8.9667 131.797012 8.576 c
131.226013 8.1854 130.442001 7.9901 129.448013 7.9901 c
128.897003 7.9901 128.399002 8.0419 127.951004 8.1444 c
127.503006 8.2469 127.143005 8.361199 126.872009 8.486199 c
126.872009 10.119 l
127.053009 10.119 l
127.153008 10.048 127.268005 9.9716 127.398003 9.8876 c
127.528008 9.8055 127.712006 9.7157 127.951004 9.619 c
128.157013 9.5341 128.389008 9.4608 128.651001 9.4003 c
128.911011 9.338699 129.189011 9.308499 129.487 9.308499 c
129.875 9.308499 130.165009 9.351399 130.351013 9.438399 c
130.53801 9.5253 130.632004 9.6542 130.632004 9.8231 c
130.632004 9.973499 130.577011 10.082001 130.466003 10.15 c
130.35701 10.219001 130.147003 10.284 129.838013 10.347 c
129.692001 10.379001 129.492004 10.415001 129.23999 10.453 c
128.989014 10.492001 128.759995 10.539001 128.554001 10.595 c
127.993004 10.741 127.575005 10.969999 127.303009 11.28 c
127.032005 11.59 126.895004 11.976001 126.895004 12.439 c
126.895004 13.033001 127.17701 13.528001 127.741005 13.923 c
128.305008 14.317 129.076004 14.515 130.053009 14.515 c
130.514999 14.515 130.959 14.468 131.384003 14.375001 c
131.807999 14.28 132.139008 14.181001 132.378006 14.074 c
132.378006 12.514001 l
132.208008 12.514001 l
131.91301 12.715 131.578003 12.879001 131.201004 13.006001 c
130.824005 13.132001 130.442001 13.196001 130.056 13.196001 c
129.737 13.196001 129.466003 13.151001 129.249008 13.062 c
129.029007 12.974001 128.919006 12.849001 128.919006 12.685 c
128.919006 12.539001 128.969009 12.428 129.069 12.351001 c
129.167999 12.273001 129.401001 12.196001 129.769012 12.119 c
129.970001 12.079 130.188004 12.039001 130.421005 12.001 c
130.654999 11.962001 130.889008 11.914001 131.125 11.854 c
131.646011 11.719001 132.032013 11.506001 132.281006 11.213 c
132.532013 10.922001 132.656006 10.558001 132.656006 10.121 c
f
n
140.389008 11.586 m
140.389008 12.539001 140.136002 13.269001 139.629013 13.776001 c
139.124008 14.284 138.368011 14.538001 137.363007 14.538001 c
136.274002 14.538001 135.417007 14.239 134.792007 13.643001 c
134.167007 13.047001 133.853012 12.239 133.853012 11.219999 c
133.853012 10.189 134.183014 9.3954 134.843002 8.8378 c
135.503006 8.2802 136.45401 8.0018 137.694 8.0018 c
138.173004 8.0018 138.612 8.0419 139.008011 8.1229 c
139.405014 8.203 139.826004 8.333899 140.27301 8.5145 c
140.27301 10.107 l
140.053009 10.107 l
139.826004 9.9296 139.516006 9.7635 139.124008 9.6093 c
138.731003 9.455001 138.326004 9.378799 137.907013 9.378799 c
137.247009 9.378799 136.747009 9.5077 136.407013 9.7675 c
136.068008 10.027 135.883011 10.403001 135.854004 10.894 c
140.389008 10.894 l
140.389008 11.586 l
h
135.848999 12.051001 m
135.876999 12.486001 136.016006 12.805 136.262009 13.002001 c
136.509003 13.2 136.823013 13.3 137.205002 13.3 c
137.616013 13.3 137.919006 13.195001 138.114014 12.986001 c
138.309006 12.776001 138.412003 12.465 138.422012 12.051001 c
135.848999 12.051001 l
f
n
148.226013 8.163899 m
146.237 8.163899 l
146.237 11.232 l
146.237 11.481001 146.224014 11.73 146.198013 11.978001 c
146.172012 12.226001 146.129013 12.409 146.068008 12.527 c
145.99501 12.663001 145.887009 12.763 145.747009 12.824 c
145.60701 12.887001 145.411011 12.918 145.159012 12.918 c
144.981003 12.918 144.799011 12.889001 144.615005 12.83 c
144.429993 12.77 144.231003 12.678 144.016006 12.549001 c
144.016006 8.163899 l
142.026001 8.163899 l
142.026001 14.341001 l
144.016006 14.341001 l
144.016006 13.661 l
144.367004 13.936001 144.70401 14.147 145.027008 14.294001 c
145.351013 14.44 145.709991 14.515 146.105011 14.515 c
146.770004 14.515 147.291 14.32 147.665009 13.932001 c
148.039993 13.542001 148.226013 12.96 148.226013 12.186001 c
148.226013 8.163899 l
f
n
154.25 8.2225 m
154.037003 8.1678 153.811005 8.1259 153.572006 8.093599 c
153.333008 8.0634 153.042007 8.0477 152.696014 8.0477 c
151.924011 8.0477 151.349014 8.203 150.973007 8.5145 c
150.597 8.826 150.409012 9.3583 150.409012 10.113001 c
150.409012 12.999001 l
149.598007 12.999001 l
149.598007 14.341001 l
150.409012 14.341001 l
150.409012 16.111 l
152.39801 16.111 l
152.39801 14.341001 l
154.25 14.341001 l
154.25 12.999001 l
152.39801 12.999001 l
152.39801 10.809001 l
152.39801 10.592001 152.400009 10.403001 152.404007 10.242001 c
152.408005 10.081 152.437012 9.9354 152.493011 9.8075 c
152.543015 9.6796 152.634003 9.578 152.764008 9.5028 c
152.894012 9.4276 153.083008 9.3895 153.333008 9.3895 c
153.434006 9.3895 153.569 9.412001 153.737015 9.455001 c
153.902008 9.498899 154.019012 9.538 154.085007 9.5751 c
154.25 9.5751 l
154.25 8.2225 l
f
n
160.142014 12.456 m
159.966003 12.456 l
159.882004 12.485001 159.748001 12.509001 159.561005 12.524 c
159.375 12.54 159.219009 12.548 159.095001 12.548 c
158.814011 12.548 158.56601 12.529 158.351013 12.492001 c
158.134003 12.456 157.903 12.393001 157.655014 12.305 c
157.655014 8.163899 l
155.665009 8.163899 l
155.665009 14.341001 l
157.655014 14.341001 l
157.655014 13.433001 l
158.089005 13.807001 158.46701 14.056001 158.78801 14.179001 c
159.111008 14.302001 159.406006 14.364 159.67601 14.364 c
159.74501 14.364 159.825012 14.362 159.91301 14.358001 c
160.0 14.355 160.077011 14.349999 160.142014 14.342001 c
160.142014 12.456 l
f
n
165.242004 8.163899 m
167.208008 8.163899 l
167.208008 12.364 l
167.208008 13.104001 166.958008 13.648001 166.459015 13.995001 c
165.959991 14.341001 165.149994 14.515 164.027008 14.515 c
163.555008 14.515 163.084015 14.476001 162.615005 14.401001 c
162.145004 14.327001 161.806015 14.263 161.598007 14.207001 c
161.598007 12.722001 l
161.778015 12.722001 l
161.938004 12.783001 162.203003 12.873 162.572006 12.988001 c
162.940002 13.103001 163.287003 13.161 163.612015 13.161 c
164.151001 13.161 164.559006 13.096001 164.836014 12.966001 c
165.114014 12.834001 165.252014 12.599001 165.252014 12.257001 c
165.252014 12.224001 l
164.671005 12.191001 164.110001 12.139999 163.569992 12.07 c
163.028015 12.0 162.576004 11.883 162.209015 11.719001 c
161.841003 11.554001 161.556015 11.328 161.356003 11.042001 c
161.154007 10.756001 161.054001 10.388 161.054001 9.936399 c
161.054001 9.3729 161.25 8.9081 161.645004 8.5458 c
162.039993 8.1825 162.529999 8.0018 163.115005 8.0018 c
163.363007 8.0018 163.59201 8.0223 163.800003 8.0634 c
164.008011 8.1053 164.209015 8.168799 164.403015 8.2567 c
164.542007 8.3231 164.689011 8.413 164.847015 8.526199 c
165.004013 8.6405 165.13501 8.7372 165.242004 8.8182 c
165.242004 8.163899 l
h
164.708008 9.463699 m
164.506012 9.383699 164.307007 9.343599 164.110001 9.343599 c
163.862015 9.343599 163.679993 9.361199 163.564011 9.3954 c
163.447006 9.4305 163.347015 9.4833 163.263 9.5575 c
163.17601 9.6307 163.121002 9.7069 163.099014 9.788 c
163.078003 9.868 163.067001 9.9725 163.067001 10.101001 c
163.067001 10.295 163.118011 10.451 163.222015 10.571 c
163.326004 10.689 163.476013 10.779 163.673004 10.842001 c
163.833008 10.893001 164.068008 10.937 164.377014 10.976001 c
164.688004 11.015 164.975006 11.045 165.242004 11.067 c
165.242004 9.7831 l
165.088013 9.651199 164.911011 9.5448 164.708008 9.463699 c
f
n
168.901001 8.163899 1.988998 8.5601 re
f
n
93.968002 19.185001 m
91.938004 19.185001 l
88.439003 24.807001 l
88.439003 19.185001 l
86.508003 19.185001 l
86.508003 27.375002 l
89.032005 27.375002 l
92.037003 22.683001 l
92.037003 27.375002 l
93.968002 27.375002 l
93.968002 19.185001 l
f
n
101.235008 24.678001 m
100.646004 25.265001 99.812004 25.559002 98.734001 25.559002 c
97.671005 25.559002 96.839996 25.267002 96.245003 24.683001 c
95.648003 24.099001 95.349998 23.295002 95.349998 22.271002 c
95.349998 21.253 95.647003 20.452002 96.239006 19.867001 c
96.831001 19.281 97.663002 18.988001 98.734001 18.988001 c
99.805008 18.988001 100.637001 19.281 101.229004 19.867001 c
101.822006 20.452002 102.118004 21.253 102.118004 22.271002 c
102.118004 23.288002 101.823006 24.09 101.235008 24.678001 c
h
99.267006 20.456001 m
99.102005 20.395 98.93 20.365002 98.751007 20.365002 c
98.542007 20.365002 98.354004 20.397001 98.189995 20.464001 c
98.026001 20.531 97.886002 20.635 97.768005 20.779999 c
97.647003 20.93 97.554001 21.129999 97.492004 21.379002 c
97.428001 21.627001 97.398003 21.921001 97.398003 22.26 c
97.398003 22.639002 97.434006 22.955002 97.506004 23.204 c
97.577003 23.455002 97.674004 23.652 97.796005 23.796001 c
97.931007 23.951 98.074005 24.053001 98.223007 24.105001 c
98.373001 24.157001 98.543007 24.183001 98.734001 24.183001 c
98.926003 24.183001 99.104004 24.151001 99.269997 24.089001 c
99.435005 24.025002 99.577003 23.918001 99.695007 23.768002 c
99.813004 23.621 99.905006 23.423 99.971008 23.177002 c
100.037003 22.93 100.07 22.625002 100.07 22.26 c
100.07 21.866001 100.038002 21.557001 99.973007 21.334002 c
99.909004 21.111 99.813004 20.921001 99.684006 20.763 c
99.57 20.619001 99.43 20.517 99.267006 20.456001 c
f
n
108.055008 23.476002 m
107.879005 23.476002 l
107.795006 23.507002 107.661003 23.529999 107.474007 23.546001 c
107.288002 23.562 107.132004 23.569 107.008003 23.569 c
106.727005 23.569 106.479004 23.551001 106.263008 23.514002 c
106.048004 23.478001 105.816002 23.414001 105.568008 23.327002 c
105.568008 19.185001 l
103.578003 19.185001 l
103.578003 25.363001 l
105.568008 25.363001 l
105.568008 24.454 l
106.002007 24.828001 106.379997 25.077002 106.702003 25.201002 c
107.024002 25.324001 107.319008 25.386002 107.589005 25.386002 c
107.659004 25.386002 107.737007 25.383001 107.825005 25.379999 c
107.913002 25.376001 107.989998 25.369999 108.055008 25.363001 c
108.055008 23.476002 l
f
n
114.970001 21.143002 m
114.970001 20.503 114.683006 19.988001 114.112007 19.598001 c
113.540001 19.207001 112.755005 19.012001 111.761002 19.012001 c
111.211006 19.012001 110.712006 19.062 110.265007 19.165001 c
109.817009 19.268002 109.458008 19.382 109.186005 19.508001 c
109.186005 21.139999 l
109.368004 21.139999 l
109.466003 21.069 109.582008 20.993002 109.711006 20.91 c
109.841003 20.826 110.026009 20.736 110.265007 20.641001 c
110.470001 20.556002 110.704002 20.483002 110.963005 20.421001 c
111.225006 20.361 111.503006 20.33 111.801003 20.33 c
112.189995 20.33 112.478004 20.373001 112.666008 20.459999 c
112.852005 20.547001 112.946007 20.675001 112.946007 20.845001 c
112.946007 20.995001 112.889999 21.104 112.779999 21.172001 c
112.669998 21.24 112.459999 21.305 112.152008 21.368002 c
112.004005 21.4 111.805008 21.436001 111.554008 21.475 c
111.302002 21.514002 111.074005 21.559999 110.868004 21.616001 c
110.305008 21.763 109.888008 21.991001 109.617004 22.302002 c
109.345009 22.612001 109.209007 22.997002 109.209007 23.459999 c
109.209007 24.055 109.491005 24.549002 110.055008 24.944 c
110.619003 25.339001 111.389999 25.536001 112.367004 25.536001 c
112.831009 25.536001 113.273003 25.489 113.698006 25.395 c
114.122002 25.302002 114.454002 25.202002 114.692009 25.096001 c
114.692009 23.535002 l
114.522003 23.535002 l
114.227005 23.737001 113.891006 23.901001 113.514008 24.027 c
113.138008 24.154001 112.756004 24.218 112.369995 24.218 c
112.049004 24.218 111.781006 24.173 111.562004 24.084002 c
111.342003 23.995001 111.234009 23.869999 111.234009 23.707001 c
111.234009 23.559999 111.284004 23.449001 111.382004 23.372002 c
111.481003 23.295002 111.715004 23.217001 112.083008 23.141001 c
112.284004 23.101002 112.501007 23.059999 112.735008 23.022001 c
112.969002 22.984001 113.203003 22.935001 113.438004 22.876001 c
113.959007 22.74 114.345009 22.527 114.595009 22.235001 c
114.845009 21.943001 114.970001 21.579 114.970001 21.143002 c
f
n
123.075005 19.185001 m
120.786003 19.185001 l
119.054008 21.878 l
118.516006 21.211 l
118.516006 19.185001 l
116.527008 19.185001 l
116.527008 27.746002 l
118.516006 27.746002 l
118.516006 22.648001 l
120.627007 25.363001 l
122.91301 25.363001 l
120.702003 22.700001 l
123.075005 19.185001 l
f
q
n
0.014999 33.669998 171.481003 -33.655003 re
W
n
n
88.983002 0.071207 m
88.448006 0.071207 l
86.912003 2.9745 l
86.912003 0.071207 l
86.508003 0.071207 l
86.508003 3.3163 l
87.177002 3.3163 l
88.579002 0.66591 l
88.579002 3.3163 l
88.983002 3.3163 l
88.983002 0.071207 l
f
n
92.005005 3.2714 m
91.818001 3.3466 91.610001 3.3856 91.378006 3.3856 c
91.154007 3.3856 90.947006 3.3485 90.757004 3.2714 c
90.568001 3.1962 90.409996 3.0878 90.281006 2.9442 c
90.147003 2.7948 90.046005 2.6151 89.976006 2.4052 c
89.907005 2.1952 89.872002 1.9569 89.872002 1.6923 c
89.872002 1.4227 89.907005 1.1835 89.977005 0.9745 c
90.048004 0.76551 90.148003 0.58871 90.279007 0.4452 c
90.409996 0.29971 90.569008 0.19031 90.756004 0.11511 c
90.942001 0.039904 91.149002 0.001806 91.378006 0.001806 c
91.612007 0.001806 91.819008 0.038002 92.003006 0.11321 c
92.184006 0.18641 92.341003 0.2968 92.475006 0.4452 c
92.605003 0.58581 92.706001 0.76161 92.777008 0.97351 c
92.849007 1.1854 92.885002 1.4247 92.885002 1.6923 c
92.885002 1.9598 92.849998 2.1991 92.779007 2.41 c
92.709999 2.621 92.608002 2.7987 92.475006 2.9442 c
92.346001 3.0868 92.189003 3.1942 92.005005 3.2714 c
h
92.148003 0.71181 m
91.958008 0.4852 91.702003 0.3719 91.379997 0.3719 c
91.058006 0.3719 90.801003 0.4852 90.610001 0.71181 c
90.419006 0.93841 90.323006 1.2655 90.323006 1.6923 c
90.323006 2.1151 90.417007 2.4413 90.604004 2.6708 c
90.793007 2.9003 91.049995 3.0155 91.379997 3.0155 c
91.706001 3.0155 91.964005 2.9003 92.152008 2.6708 c
92.339996 2.4413 92.434006 2.1151 92.434006 1.6923 c
92.434006 1.2655 92.339005 0.93841 92.148003 0.71181 c
f
Q
n
95.246002 1.4891 m
95.453003 1.5692 95.615005 1.6884 95.732002 1.8466 c
95.849998 2.0038 95.909004 2.1991 95.909004 2.4325 c
95.909004 2.6063 95.877007 2.7489 95.809006 2.8622 c
95.744003 2.9745 95.652008 3.0673 95.534004 3.1415 c
95.429001 3.2069 95.311005 3.2528 95.18 3.2782 c
95.049004 3.3036 94.886002 3.3163 94.689995 3.3163 c
93.781006 3.3163 l
93.781006 0.071207 l
94.215004 0.071207 l
94.215004 1.3612 l
94.82 1.3612 l
95.905006 0.071207 l
96.465004 0.071207 l
95.246002 1.4891 l
h
95.411003 2.1005 m
95.379997 2.0214 95.332001 1.951 95.266006 1.8895 c
95.195007 1.8241 95.109001 1.7792 95.007004 1.7557 c
94.906006 1.7313 94.787003 1.7196 94.650002 1.7196 c
94.215004 1.7196 l
94.215004 2.9462 l
94.722008 2.9462 l
94.838005 2.9462 94.939003 2.9364 95.024002 2.9208 c
95.110001 2.9042 95.184006 2.8739 95.247002 2.8319 c
95.322006 2.7831 95.377007 2.7225 95.409004 2.6503 c
95.441002 2.578 95.458008 2.496 95.458008 2.4032 c
95.458008 2.2802 95.442001 2.1796 95.411003 2.1005 c
f
n
100.846008 3.3163 m
100.004005 0.071207 l
99.519005 0.071207 l
98.839996 2.7645 l
98.173004 0.071207 l
97.700005 0.071207 l
96.843002 3.3163 l
97.292007 3.3163 l
97.965004 0.61801 l
98.635002 3.3163 l
99.072006 3.3163 l
99.748001 0.59171 l
100.421005 3.3163 l
100.846008 3.3163 l
f
q
n
0.014999 33.669998 171.481003 -33.655003 re
W
n
n
103.943008 0.071207 m
101.803001 0.071207 l
101.803001 3.3163 l
103.943008 3.3163 l
103.943008 2.9344 l
102.237007 2.9344 l
102.237007 2.0438 l
103.943008 2.0438 l
103.943008 1.662 l
102.237007 1.662 l
102.237007 0.453 l
103.943008 0.453 l
103.943008 0.071207 l
f
n
107.648003 0.3055 m
107.471008 0.22351 107.277008 0.1532 107.067001 0.091707 c
106.857002 0.032106 106.654007 0.001806 106.458008 0.001806 c
106.206001 0.001806 105.974007 0.037003 105.763008 0.1063 c
105.552002 0.1757 105.373009 0.28021 105.224007 0.42081 c
105.075005 0.56141 104.959007 0.7382 104.878006 0.95011 c
104.796005 1.161 104.756004 1.41 104.756004 1.6942 c
104.756004 2.2128 104.908005 2.6229 105.211006 2.9237 c
105.513008 3.2235 105.93 3.3739 106.459007 3.3739 c
106.644005 3.3739 106.833008 3.3514 107.025002 3.3075 c
107.218002 3.2626 107.425003 3.1884 107.648003 3.0819 c
107.648003 2.5702 l
107.609009 2.5702 l
107.564003 2.6044 107.499008 2.6503 107.413002 2.7069 c
107.328003 2.7626 107.242004 2.8094 107.159996 2.8475 c
107.059998 2.8925 106.946007 2.9296 106.819008 2.9589 c
106.692001 2.9891 106.547005 3.0038 106.386002 3.0038 c
106.023003 3.0038 105.736008 2.8866 105.525002 2.6522 c
105.313004 2.4188 105.208008 2.1024 105.208008 1.704 c
105.208008 1.2841 105.318008 0.9559 105.539001 0.72251 c
105.758003 0.48911 106.059006 0.3719 106.439003 0.3719 c
106.578003 0.3719 106.717003 0.38561 106.856003 0.4139 c
106.994003 0.44131 107.116005 0.4764 107.219002 0.5214 c
107.219002 1.3202 l
106.352005 1.3202 l
106.352005 1.702 l
107.648003 1.702 l
107.648003 0.3055 l
f
Q
n
112.081009 3.3163 m
111.505005 3.3163 l
110.327003 0.071207 l
110.763008 0.071207 l
111.079994 0.97351 l
112.479996 0.97351 l
112.797005 0.071207 l
113.258003 0.071207 l
112.081009 3.3163 l
h
111.211006 1.3436 m
111.779999 2.9335 l
112.346008 1.3436 l
111.211006 1.3436 l
f
q
n
0.014999 33.669998 171.481003 -33.655003 re
W
n
n
116.544006 0.071207 m
116.009995 0.071207 l
114.474007 2.9745 l
114.474007 0.071207 l
114.069008 0.071207 l
114.069008 3.3163 l
114.739998 3.3163 l
116.139999 0.66591 l
116.139999 3.3163 l
116.544006 3.3163 l
116.544006 0.071207 l
f
n
154.67601 0.30651 m
154.597 0.27231 154.525009 0.24011 154.459015 0.20891 c
154.395004 0.17861 154.309006 0.1473 154.206009 0.11321 c
154.117004 0.085808 154.021011 0.062407 153.917007 0.042807 c
153.813004 0.023306 153.699005 0.013506 153.575012 0.013506 c
153.339005 0.013506 153.125 0.046806 152.933014 0.11221 c
152.741013 0.17861 152.574005 0.28211 152.431 0.4227 c
152.292007 0.5604 152.182007 0.73521 152.104004 0.94911 c
152.025009 1.161 151.986008 1.4081 151.986008 1.6893 c
151.986008 1.9569 152.024002 2.1962 152.099014 2.4061 c
152.175003 2.618 152.284012 2.7958 152.42601 2.9413 c
152.564011 3.0809 152.731003 3.1884 152.92601 3.2626 c
153.121002 3.3368 153.338013 3.3739 153.576004 3.3739 c
153.75 3.3739 153.924011 3.3524 154.098007 3.3104 c
154.272003 3.2684 154.464005 3.1942 154.67601 3.0878 c
154.67601 2.576 l
154.643005 2.576 l
154.464005 2.7245 154.289001 2.8339 154.112015 2.9012 c
153.937012 2.9696 153.75 3.0038 153.549011 3.0038 c
153.38501 3.0038 153.238007 2.9774 153.10701 2.9237 c
152.975006 2.871 152.859009 2.7889 152.755005 2.6766 c
152.655014 2.5682 152.578003 2.4305 152.522003 2.2635 c
152.465012 2.0975 152.437012 1.9061 152.437012 1.6884 c
152.437012 1.4598 152.468002 1.2645 152.529999 1.1005 c
152.591003 0.9354 152.669998 0.80261 152.769012 0.6991 c
152.871002 0.59171 152.989014 0.5126 153.125 0.46081 c
153.259003 0.40911 153.403 0.38371 153.553009 0.38371 c
153.761002 0.38371 153.956009 0.41881 154.137009 0.49011 c
154.318008 0.56141 154.487015 0.6698 154.645004 0.81141 c
154.67601 0.81141 l
154.67601 0.30651 l
f
Q
n
157.849991 0.071207 m
155.708008 0.071207 l
155.708008 3.3163 l
157.849991 3.3163 l
157.849991 2.9344 l
156.143005 2.9344 l
156.143005 2.0438 l
157.849991 2.0438 l
157.849991 1.662 l
156.143005 1.662 l
156.143005 0.453 l
157.849991 0.453 l
157.849991 0.071207 l
f
n
161.323013 0.071207 m
160.78801 0.071207 l
159.252014 2.9745 l
159.252014 0.071207 l
158.847 0.071207 l
158.847 3.3163 l
159.517014 3.3163 l
160.917007 0.66591 l
160.917007 3.3163 l
161.323013 3.3163 l
161.323013 0.071207 l
f
n
164.869003 2.9344 m
163.711014 2.9344 l
163.711014 0.071207 l
163.278015 0.071207 l
163.278015 2.9344 l
162.122009 2.9344 l
162.122009 3.3163 l
164.869003 3.3163 l
164.869003 2.9344 l
f
q
n
0.014999 33.669998 171.481003 -33.655003 re
W
n
n
167.814011 0.071207 m
165.674011 0.071207 l
165.674011 3.3163 l
167.814011 3.3163 l
167.814011 2.9344 l
166.108002 2.9344 l
166.108002 2.0438 l
167.814011 2.0438 l
167.814011 1.662 l
166.108002 1.662 l
166.108002 0.453 l
167.814011 0.453 l
167.814011 0.071207 l
f
n
170.278015 1.4891 m
170.483002 1.5692 170.646011 1.6884 170.763 1.8466 c
170.881012 2.0038 170.94101 2.1991 170.94101 2.4325 c
170.94101 2.6063 170.908005 2.7489 170.841003 2.8622 c
170.775009 2.9745 170.683014 3.0673 170.565002 3.1415 c
170.459991 3.2069 170.34201 3.2528 170.211014 3.2782 c
170.081009 3.3036 169.917007 3.3163 169.721008 3.3163 c
168.812012 3.3163 l
168.812012 0.071207 l
169.246002 0.071207 l
169.246002 1.3612 l
169.851013 1.3612 l
170.936005 0.071207 l
171.496002 0.071207 l
170.278015 1.4891 l
h
170.443008 2.1005 m
170.411011 2.0214 170.363007 1.951 170.297012 1.8895 c
170.226013 1.8241 170.139999 1.7792 170.039001 1.7557 c
169.937012 1.7313 169.817001 1.7196 169.681015 1.7196 c
169.246002 1.7196 l
169.246002 2.9462 l
169.752014 2.9462 l
169.869003 2.9462 169.970001 2.9364 170.055008 2.9208 c
170.142014 2.9042 170.215012 2.8739 170.278015 2.8319 c
170.353012 2.7831 170.408005 2.7225 170.440002 2.6503 c
170.472015 2.578 170.489014 2.496 170.489014 2.4032 c
170.489014 2.2802 170.473007 2.1796 170.443008 2.1005 c
f
n
108.903008 0.071207 0.43 3.2451 re
f
n
122.267006 0.30651 m
122.187004 0.27231 122.115005 0.24011 122.049995 0.20891 c
121.986008 0.17861 121.902008 0.1473 121.797005 0.11321 c
121.708008 0.085808 121.613007 0.062407 121.508003 0.042807 c
121.404007 0.023306 121.290001 0.013506 121.166008 0.013506 c
120.929008 0.013506 120.716003 0.046806 120.524002 0.11221 c
120.332008 0.17861 120.164009 0.28211 120.022003 0.4227 c
119.882004 0.5604 119.774002 0.73521 119.695007 0.94911 c
119.617004 1.161 119.578003 1.4081 119.578003 1.6893 c
119.578003 1.9569 119.616005 2.1962 119.691002 2.4061 c
119.766006 2.618 119.875008 2.7958 120.017006 2.9413 c
120.156006 3.0809 120.322006 3.1884 120.518005 3.2626 c
120.712006 3.3368 120.929008 3.3739 121.167007 3.3739 c
121.342003 3.3739 121.516006 3.3524 121.689003 3.3104 c
121.863007 3.2684 122.056007 3.1942 122.267006 3.0878 c
122.267006 2.576 l
122.235008 2.576 l
122.056007 2.7245 121.879005 2.8339 121.704002 2.9012 c
121.529007 2.9696 121.339996 3.0038 121.139999 3.0038 c
120.977005 3.0038 120.829002 2.9774 120.698006 2.9237 c
120.56601 2.871 120.449005 2.7889 120.346008 2.6766 c
120.247009 2.5682 120.168007 2.4305 120.113007 2.2635 c
120.056007 2.0975 120.029007 1.9061 120.029007 1.6884 c
120.029007 1.4598 120.059006 1.2645 120.122009 1.1005 c
120.183006 0.9354 120.262009 0.80261 120.360001 0.6991 c
120.461006 0.59171 120.579994 0.5126 120.715004 0.46081 c
120.851006 0.40911 120.994003 0.38371 121.145004 0.38371 c
121.352005 0.38371 121.546005 0.41881 121.728004 0.49011 c
121.909004 0.56141 122.079002 0.6698 122.237007 0.81141 c
122.267006 0.81141 l
122.267006 0.30651 l
f
n
125.143005 3.2714 m
124.958008 3.3466 124.749008 3.3856 124.516006 3.3856 c
124.292007 3.3856 124.085007 3.3485 123.895004 3.2714 c
123.707008 3.1962 123.547005 3.0878 123.419006 2.9442 c
123.286003 2.7948 123.184006 2.6151 123.115005 2.4052 c
123.044006 2.1952 123.009995 1.9569 123.009995 1.6923 c
123.009995 1.4227 123.045006 1.1835 123.116005 0.9745 c
123.185005 0.76551 123.287003 0.58871 123.417007 0.4452 c
123.547005 0.29971 123.708008 0.19031 123.893005 0.11511 c
124.079994 0.039904 124.28801 0.001806 124.516006 0.001806 c
124.75 0.001806 124.958008 0.038002 125.139999 0.11321 c
125.323006 0.18641 125.481003 0.2968 125.614006 0.4452 c
125.744003 0.58581 125.844009 0.76161 125.917007 0.97351 c
125.988007 1.1854 126.02401 1.4247 126.02401 1.6923 c
126.02401 1.9598 125.989006 2.1991 125.918007 2.41 c
125.847008 2.621 125.747009 2.7987 125.614006 2.9442 c
125.485008 3.0868 125.328003 3.1942 125.143005 3.2714 c
h
125.287003 0.71181 m
125.096008 0.4852 124.839005 0.3719 124.518005 0.3719 c
124.196007 0.3719 123.939003 0.4852 123.748009 0.71181 c
123.556007 0.93841 123.461006 1.2655 123.461006 1.6923 c
123.461006 2.1151 123.555008 2.4413 123.743004 2.6708 c
123.93 2.9003 124.189003 3.0155 124.518005 3.0155 c
124.844009 3.0155 125.101006 2.9003 125.291008 2.6708 c
125.479004 2.4413 125.573006 2.1151 125.573006 1.6923 c
125.573006 1.2655 125.478004 0.93841 125.287003 0.71181 c
f
Q
n
129.916 0.071207 m
129.48201 0.071207 l
129.48201 2.8661 l
128.582001 0.96181 l
128.325012 0.96181 l
127.429008 2.8661 l
127.429008 0.071207 l
127.02401 0.071207 l
127.02401 3.3163 l
127.614006 3.3163 l
128.479004 1.5067 l
129.315002 3.3163 l
129.916 3.3163 l
129.916 0.071207 l
f
q
n
0.014999 33.669998 171.481003 -33.655003 re
W
n
n
133.123001 2.8036 m
133.055008 2.9266 132.959 3.0302 132.836014 3.1132 c
132.73201 3.1835 132.611008 3.2343 132.476013 3.2665 c
132.34201 3.2997 132.17601 3.3163 131.98201 3.3163 c
131.101013 3.3163 l
131.101013 0.071207 l
131.535004 0.071207 l
131.535004 1.2802 l
131.966003 1.2802 l
132.199005 1.2802 132.389999 1.3085 132.542007 1.3641 c
132.695007 1.4198 132.828003 1.5038 132.939011 1.6151 c
133.029007 1.7059 133.098999 1.8124 133.149994 1.9344 c
133.199005 2.0575 133.223999 2.1913 133.223999 2.3348 c
133.223999 2.5243 133.19101 2.6805 133.123001 2.8036 c
h
132.731003 2.0663 m
132.703003 1.9891 132.654999 1.9149 132.586014 1.8466 c
132.518005 1.7782 132.429993 1.7284 132.322006 1.6971 c
132.212006 1.6659 132.070999 1.6503 131.89801 1.6503 c
131.535004 1.6503 l
131.535004 2.9462 l
131.959991 2.9462 l
132.096008 2.9462 132.209 2.9354 132.298004 2.9159 c
132.387009 2.8964 132.46701 2.8651 132.537003 2.8192 c
132.616013 2.7675 132.675003 2.7001 132.714005 2.6171 c
132.753006 2.5341 132.77301 2.4374 132.77301 2.3251 c
132.77301 2.2294 132.759003 2.1434 132.731003 2.0663 c
f
n
136.549011 1.3729 m
136.549011 1.1376 136.524002 0.93251 136.472 0.7577 c
136.419998 0.58291 136.336014 0.4354 136.219009 0.3192 c
136.10701 0.20891 135.976013 0.12881 135.828003 0.078003 c
135.677002 0.027203 135.503006 0.001806 135.305008 0.001806 c
135.101013 0.001806 134.925003 0.028202 134.774002 0.082907 c
134.623001 0.1366 134.497009 0.2157 134.393005 0.3192 c
134.276001 0.43931 134.19101 0.58291 134.139999 0.75181 c
134.087006 0.9208 134.063004 1.1268 134.063004 1.3729 c
134.063004 3.3163 l
134.497009 3.3163 l
134.497009 1.3514 l
134.497009 1.1747 134.507004 1.036 134.532013 0.9344 c
134.555008 0.83291 134.596008 0.74111 134.653 0.65711 c
134.716003 0.56341 134.802002 0.4921 134.912003 0.4442 c
135.021011 0.39541 135.152008 0.3719 135.305008 0.3719 c
135.459 0.3719 135.591003 0.39541 135.699997 0.4423 c
135.808014 0.49011 135.895004 0.56141 135.959991 0.65711 c
136.016006 0.74111 136.056 0.83581 136.080002 0.94231 c
136.104004 1.0487 136.116013 1.1815 136.116013 1.3397 c
136.116013 3.3163 l
136.549011 3.3163 l
136.549011 1.3729 l
f
Q
n
140.004013 2.9344 m
138.848007 2.9344 l
138.848007 0.071207 l
138.415009 0.071207 l
138.415009 2.9344 l
137.257004 2.9344 l
137.257004 3.3163 l
140.004013 3.3163 l
140.004013 2.9344 l
f
q
n
0.014999 33.669998 171.481003 -33.655003 re
W
n
n
145.099014 0.071207 m
144.564011 0.071207 l
143.029007 2.9745 l
143.029007 0.071207 l
142.624008 0.071207 l
142.624008 3.3163 l
143.292999 3.3163 l
144.695007 0.66591 l
144.695007 3.3163 l
145.099014 3.3163 l
145.099014 0.071207 l
f
n
148.986008 0.3055 m
148.808014 0.22351 148.615005 0.1532 148.405014 0.091707 c
148.195007 0.032106 147.992004 0.001806 147.795013 0.001806 c
147.542007 0.001806 147.311005 0.037003 147.100006 0.1063 c
146.889008 0.1757 146.709 0.28021 146.562012 0.42081 c
146.41301 0.56141 146.296005 0.7382 146.215012 0.95011 c
146.134003 1.161 146.093002 1.41 146.093002 1.6942 c
146.093002 2.2128 146.246002 2.6229 146.548004 2.9237 c
146.851013 3.2235 147.268005 3.3739 147.797012 3.3739 c
147.981003 3.3739 148.169006 3.3514 148.363007 3.3075 c
148.555008 3.2626 148.763 3.1884 148.986008 3.0819 c
148.986008 2.5702 l
148.947006 2.5702 l
148.901001 2.6044 148.835007 2.6503 148.75 2.7069 c
148.665009 2.7626 148.580002 2.8094 148.498001 2.8475 c
148.397003 2.8925 148.284012 2.9296 148.156006 2.9589 c
148.029007 2.9891 147.88501 3.0038 147.724014 3.0038 c
147.361008 3.0038 147.073013 2.8866 146.861008 2.6522 c
146.649994 2.4188 146.544006 2.1024 146.544006 1.704 c
146.544006 1.2841 146.655014 0.9559 146.875 0.72251 c
147.096008 0.48911 147.396011 0.3719 147.776001 0.3719 c
147.916 0.3719 148.054001 0.38561 148.193008 0.4139 c
148.332001 0.44131 148.453003 0.4764 148.557007 0.5214 c
148.557007 1.3202 l
147.690002 1.3202 l
147.690002 1.702 l
148.986008 1.702 l
148.986008 0.3055 l
f
Q
n
140.869995 0.071207 0.429001 3.2451 re
f
n
18.006001 15.488001 m
11.088 26.326002 l
5.2502 26.326002 l
5.2502 7.4139 l
9.7267 7.4139 l
9.7267 20.393002 l
17.777 7.4139 l
22.481001 7.4139 l
22.481001 26.326002 l
18.006001 26.326002 l
18.006001 15.488001 l
0.0 0.0 0.0 0.0 setcmykcolor
f
n
37.049004 19.278002 m
36.892002 18.962002 36.646 18.673 36.309002 18.412001 c
35.956001 18.143002 35.517002 17.974001 34.993 17.898001 c
34.474003 17.822001 33.824001 17.785002 33.048 17.785002 c
31.555002 17.785002 l
31.555002 22.841002 l
33.314003 22.841002 l
33.897003 22.841002 34.403 22.821001 34.845001 22.793001 c
35.279003 22.762001 35.664001 22.684002 35.992001 22.549999 c
36.463001 22.352001 36.798 22.092001 36.989998 21.755001 c
37.184002 21.415001 37.282001 21.013 37.282001 20.543001 c
37.282001 20.013 37.204002 19.591002 37.049004 19.278002 c
h
41.389999 17.721001 m
42.038002 18.598001 42.366001 19.733002 42.366001 21.134001 c
42.366001 22.149 42.155003 22.993002 41.736004 23.664001 c
41.315002 24.34 40.748001 24.883001 40.034 25.309999 c
39.329998 25.73 38.575001 26.007002 37.769001 26.133001 c
36.961002 26.262001 35.998001 26.326002 34.876003 26.326002 c
26.677002 26.326002 l
26.677002 7.4139 l
31.555002 7.4139 l
31.555002 14.358001 l
33.799 14.358001 l
38.955002 7.4139 l
44.923 7.4139 l
38.599003 15.523001 l
39.811001 16.106001 40.739002 16.837 41.389999 17.721001 c
f
q
n
0.014999 33.669998 171.481003 -33.655003 re
W
n
n
35.992001 22.549999 m
35.664001 22.684002 35.279003 22.762001 34.845001 22.793001 c
34.403 22.821001 33.897003 22.841002 33.314003 22.841002 c
31.555002 22.841002 l
31.555002 17.785002 l
33.048 17.785002 l
33.824001 17.785002 34.474003 17.822001 34.993 17.898001 c
35.517002 17.974001 35.956001 18.143002 36.309002 18.412001 c
36.646 18.673 36.892002 18.962002 37.049004 19.278002 c
37.204002 19.591002 37.282001 20.013 37.282001 20.543001 c
37.282001 21.013 37.184002 21.415001 36.989998 21.755001 c
36.798 22.092001 36.463001 22.352001 35.992001 22.549999 c
1.0 0.65882 0.0 0.0 setcmykcolor
f
n
38.955002 7.4139 m
33.799 14.358001 l
31.555002 14.358001 l
31.555002 7.4139 l
26.677002 7.4139 l
26.677002 26.326002 l
34.876003 26.326002 l
35.998001 26.326002 36.961002 26.262001 37.769001 26.133001 c
38.575001 26.007002 39.329998 25.73 40.034 25.309999 c
40.748001 24.883001 41.315002 24.34 41.736004 23.664001 c
42.155003 22.993002 42.366001 22.149 42.366001 21.134001 c
42.366001 19.733002 42.038002 18.598001 41.389999 17.721001 c
40.739002 16.837 39.811001 16.106001 38.599003 15.523001 c
44.923 7.4139 l
38.955002 7.4139 l
h
22.481001 7.4139 m
17.777 7.4139 l
9.7267 20.393002 l
9.7267 7.4139 l
5.2502 7.4139 l
5.2502 26.326002 l
11.088 26.326002 l
18.006001 15.488001 l
18.006001 26.326002 l
22.481001 26.326002 l
22.481001 7.4139 l
h
46.577003 16.869999 m
46.577003 24.183001 50.732002 30.523001 56.807003 33.669998 c
0.000183 33.669998 l
0.000183 0.070204 l
56.806004 0.070204 l
56.237003 0.36611 55.684002 0.68841 55.149998 1.038 c
49.989002 4.4149 46.577003 10.242001 46.577003 16.869999 c
f
Q
n
65.494003 14.09 m
65.488007 14.09 l
63.968002 12.572001 61.871002 11.633 59.553001 11.633 c
49.533001 11.633 l
49.771004 10.907001 50.065002 10.209001 50.395004 9.5302 c
59.553001 9.5302 l
61.871002 9.5302 63.968002 10.469999 65.488007 11.987 c
65.494003 11.987 l
67.014 10.469999 69.113007 9.5302 71.43 9.5302 c
80.583 9.5302 l
80.913002 10.209001 81.207001 10.907001 81.445007 11.633 c
71.43 11.633 l
69.113007 11.633 67.014 12.572001 65.494003 14.09 c
h
65.494003 8.8417 m
65.488007 8.8417 l
63.968002 7.3221 61.871002 6.3837 59.553001 6.3837 c
52.376003 6.3837 l
52.985001 5.6239 53.662003 4.9237 54.392002 4.2802 c
59.553001 4.2802 l
61.871002 4.2802 63.968002 5.2206 65.488007 6.7391 c
65.494003 6.7391 l
67.014 5.2206 69.113007 4.2802 71.43 4.2802 c
76.586006 4.2802 l
77.316002 4.9237 77.993004 5.6239 78.602005 6.3837 c
71.43 6.3837 l
69.113007 6.3837 67.014 7.3221 65.494003 8.8417 c
h
82.288002 16.882 m
71.43 16.882 l
69.113007 16.882 67.014 17.821001 65.494003 19.339001 c
65.488007 19.339001 l
63.968002 17.821001 61.871002 16.882 59.553001 16.882 c
48.689999 16.882 l
48.689999 16.877001 48.689999 16.873001 48.689999 16.869001 c
48.689999 16.16 48.748001 15.466001 48.833004 14.78 c
59.553001 14.78 l
61.871002 14.78 63.968002 15.719999 65.488007 17.236 c
65.494003 17.236 l
67.014 15.719999 69.113007 14.78 71.43 14.78 c
82.145004 14.78 l
82.231003 15.466001 82.289001 16.16 82.289001 16.869001 c
82.289001 16.873001 82.288002 16.877001 82.288002 16.882 c
h
65.488007 22.486002 m
65.494003 22.486002 l
67.014 20.968 69.113007 20.029001 71.43 20.029001 c
81.982002 20.029001 l
81.845001 20.748001 81.661003 21.449001 81.435005 22.133001 c
71.43 22.133001 l
69.113007 22.133001 67.014 23.071001 65.494003 24.59 c
65.488007 24.59 l
63.968002 23.071001 61.871002 22.133001 59.553001 22.133001 c
49.543003 22.133001 l
49.317001 21.449001 49.133003 20.748001 48.996002 20.029001 c
59.553001 20.029001 l
61.871002 20.029001 63.968002 20.968 65.488007 22.486002 c
h
65.488007 27.737001 m
65.494003 27.737001 l
67.014 26.218 69.113007 25.279999 71.43 25.279999 c
80.016006 25.279999 l
79.589005 26.016001 79.113007 26.721001 78.582001 27.382002 c
71.43 27.382002 l
69.113007 27.382002 67.014 28.321001 65.494003 29.839001 c
65.488007 29.839001 l
63.968002 28.321001 61.871002 27.382002 59.553001 27.382002 c
52.396004 27.382002 l
51.865002 26.721001 51.389004 26.016001 50.962002 25.279999 c
59.553001 25.279999 l
61.871002 25.279999 63.968002 26.218 65.488007 27.737001 c
f
n
71.43 4.2802 m
69.113007 4.2802 67.014 5.2206 65.494003 6.7391 c
65.488007 6.7391 l
63.968002 5.2206 61.871002 4.2802 59.553001 4.2802 c
54.367004 4.2802 l
57.329002 1.661 61.223003 0.070204 65.489006 0.070204 c
69.755005 0.070204 73.649002 1.661 76.611 4.2802 c
71.43 4.2802 l
1.0 0.65882 0.0 0.0 setcmykcolor
f
n
65.488007 24.59 m
65.494003 24.59 l
67.014 23.071001 69.113007 22.133001 71.43 22.133001 c
81.446007 22.133001 l
81.083 23.237001 80.610001 24.289001 80.035004 25.279999 c
71.43 25.279999 l
69.113007 25.279999 67.014 26.218 65.494003 27.737001 c
65.488007 27.737001 l
63.968002 26.218 61.871002 25.279999 59.553001 25.279999 c
50.943001 25.279999 l
50.369003 24.289001 49.895004 23.237001 49.532001 22.133001 c
59.553001 22.133001 l
61.871002 22.133001 63.968002 23.071001 65.488007 24.59 c
f
n
65.488007 14.09 m
65.494003 14.09 l
67.014 12.572001 69.113007 11.633 71.43 11.633 c
81.456001 11.633 l
81.786003 12.643001 82.025002 13.694 82.159996 14.78 c
71.43 14.78 l
69.113007 14.78 67.014 15.719999 65.494003 17.236 c
65.488007 17.236 l
63.968002 15.719999 61.871002 14.78 59.553001 14.78 c
48.819004 14.78 l
48.953003 13.694 49.191002 12.643001 49.523003 11.633 c
59.553001 11.633 l
61.871002 11.633 63.968002 12.572001 65.488007 14.09 c
f
n
65.488007 19.339001 m
65.494003 19.339001 l
67.014 17.821001 69.113007 16.882 71.43 16.882 c
82.289001 16.882 l
82.287003 17.958 82.185005 19.009001 81.991005 20.029001 c
71.43 20.029001 l
69.113007 20.029001 67.014 20.968 65.494003 22.486002 c
65.488007 22.486002 l
63.968002 20.968 61.871002 20.029001 59.553001 20.029001 c
48.987003 20.029001 l
48.794003 19.009001 48.689999 17.958 48.689999 16.882 c
59.553001 16.882 l
61.871002 16.882 63.968002 17.821001 65.488007 19.339001 c
f
n
65.488007 29.839001 m
65.494003 29.839001 l
67.014 28.321001 69.113007 27.382002 71.43 27.382002 c
78.591003 27.382002 l
75.514 31.216002 70.789001 33.669003 65.489006 33.669003 c
60.189999 33.669003 55.466003 31.216002 52.386002 27.382002 c
59.553001 27.382002 l
61.871002 27.382002 63.968002 28.321001 65.488007 29.839001 c
f
n
65.488007 8.8417 m
65.494003 8.8417 l
67.014 7.3221 69.113007 6.3837 71.43 6.3837 c
78.612007 6.3837 l
79.388 7.3514 80.056007 8.4052 80.604004 9.5302 c
71.43 9.5302 l
69.113007 9.5302 67.014 10.469999 65.494003 11.987 c
65.488007 11.987 l
63.968002 10.469999 61.871002 9.5302 59.553001 9.5302 c
50.375004 9.5302 l
50.922001 8.4052 51.59 7.3514 52.365002 6.3837 c
59.553001 6.3837 l
61.871002 6.3837 63.968002 7.3221 65.488007 8.8417 c
f
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
