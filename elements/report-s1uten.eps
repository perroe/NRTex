%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: report-s1uten.pdf
%%Creator: Adobe Acrobat 11.0.17
%%For: anderslo
%%CreationDate: 23.08.2016, 13:57:26
%%BoundingBox: 0 0 596 842
%%HiResBoundingBox: 0 0 595.2760 841.8901
%%CropBox: 0 0 595.2760 841.8901
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1731 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreateDate="2016-08-23T13:49:19+02:00"
   xmp:MetadataDate="2016-08-23T13:49:20+02:00"
   xmp:ModifyDate="2016-08-23T13:49:20+02:00"
   xmp:CreatorTool="Adobe InDesign CS6 (Windows)"
   xmpMM:InstanceID="uuid:7f092ef4-8834-4306-b091-081474dfdc10"
   xmpMM:OriginalDocumentID="adobe:docid:indd:0ebf1898-73e5-11d9-8a9e-f215f03d3fdb"
   xmpMM:DocumentID="xmp.id:A126E8412769E611B3EECD8CB98B4FBD"
   xmpMM:RenditionClass="proof:pdf"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 10.0.1"
   pdf:Trapped="False">
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:5493B2CF2569E611B3EECD8CB98B4FBD"
    stRef:documentID="xmp.did:5193B2CF2569E611B3EECD8CB98B4FBD"
    stRef:originalDocumentID="adobe:docid:indd:0ebf1898-73e5-11d9-8a9e-f215f03d3fdb"
    stRef:renditionClass="default"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/x-indesign to application/pdf"
      stEvt:softwareAgent="Adobe InDesign CS6 (Windows)"
      stEvt:changed="/"
      stEvt:when="2016-08-23T13:49:19+02:00"/>
    </rdf:Seq>
   </xmpMM:History>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -841.89 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.89 li
595.276 841.89 li
595.276 0 li
cp
clp
.5 841.39 mo
594.775 841.39 li
594.775 .501038 li
.5 .501038 li
cp
false sop
0 0 0 0 cmyk
f
51.024 827.717 mo
124.725 827.717 li
124.725 78.1431 li
51.024 78.1431 li
cp
1 .878202 .154513 .0513008 cmyk
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210325d73000000cc000000606376
7420a11cd7eb0000012c000006546670676dcc79599a000007800000066e
676c7966c367bc370000886c000021e868656164e759290800000df00000
0036686865611233162600000e2800000024686d747874c0fd5400000e4c
000035746c6f636101bada42000043c0000035786d61787012b805df0000
7938000000206e616d6534ec225d00007958000003547072657025d64dbf
00007cac00000bbe67646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200004
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
4043555441403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b01060482046b0106048590a21211b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b8ff
f060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b
1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012
435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c
5a58381b2121592d2c4b5258b00425b0042549b00425b00425496120b000
5458212043b0005558b00325b00325b8ffc038b8ffc038591bb040545820
43b0005458b00225b8ffc038591b2043b0005458b00325b00325b8ffc038
b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
000000053852326662c55f0f3cf5081b080000000000a2e3272a00000000
d2947f1afaaffd671000080c00000009000100010000000000010000073e
fe4e00431000faaffa7a1000000100000000000000000000000000000d5d
06000100000000000239000002390000023900b002d7005e047300150473
0049071d0077055600580187005a02aa007c02aa007c031d004004ac0072
023900aa02aa0041023900ba0239000004730055047300df0473003c0473
00560473001a047300550473004d047300610473005304730055023900b9
023900aa04ac007004ac007204ac00700473005a081f006f0556fffd0556
009605c7006605c7009e055600a204e300a80639006d05c700a4023900bf
04000037055600960473009606aa009805c7009c063900630556009e0639
005805c700a10556005c04e3003005c700a105560009078d001905560009
0556000604e300290239008b023900000239002703c100360473ffe102aa
00590473004a0473008604000050047300460473004b0239001304730042
0473008701c7008801c7ffa20400008801c7008306aa0087047300870473
0044047300870473004802aa00850400003f02390024047300830400001a
05c700060400000f040000210400002802ac0039021400bc02ac002f04ac
00570556fffd0556fffd05c70068055600a205c7009c0639006305c700a1
0473004a0473004a0473004a0473004a0473004a0473004a040000500473
004b0473004b0473004b0473004b023900bd023900230239ffe502390009
047300870473004404730044047300440473004404730044047300830473
0083047300830473008304730049033300800473006b0473001b04730051
02cd006d044c000104e3009905e5000305e50003080000e102aa00de02aa
003d0464004e080000010639005305b4009a0464004e0464004d0464004d
0473fffd049c00a003f4003805b4007a069600a1046400000231000002f6
002f02ec002d0625007f071d004404e3008104e3009e02aa00e804ac0072
046400540473002e0464003304e5001a047300860473008c080000ef0556
fffd0556fffd0639006308000081078d00520473fffc0800000002aa0053
02aa004701c7008001c7006c0464004e03f4002f04000021055600060156
fe390473ffe402aa005c02aa005c040000170400001704730049023900b9
01c7006c02aa0047080000250556fffd055600a20556fffd055600a20556
00a20239008d0239ffe00239000402390015063900630639006306390063
05c700a105c700a105c700a1023900c602aa001902aa000602aa001d02aa
002e02aa00e502aa00a202aa006b02aa003a02aa004b02aa002804730000
01c700030556005c0400003f04e3002904000028021400bc05c7fffd0473
004905560006040000210556009e0473008704ac007204ac00a102aa006b
02aa001902aa002106ac006b06ac006b06ac0021047300000639006d0473
0042023900b10556005c0400003f05c700660400005005c7006604000050
04730046046bffe102aa00ee0556fffd0473004a0556fffd0473004a05c7
009e04eb004705c7fffd055600a20473004b055600a20473004b04730096
01c7004204730096025500880473009a02ac008305c7009c0473008705c7
009c04730087063900630473004405c700a102aa008505c700a102aa003c
0556005c0400003f04e300300239002404e300300300002305c700a10473
008305c700a10473008304e300290400002804e3002904000028046800a4
063900600662005504a00048047400480391006204f000440329002e0530
0048046bffe1040000b002eb005208c000330800004f040000990800004f
040000990800004f040000980400009807d5016a05c0009e04ab007204d5
009d04ac007104d5022204d5010505abffe9050001c905ab027e05abffe9
05ab027e05abffe905ab027e05abffe905abffe905abffe905abffe905ab
ffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe9
05ab027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab
01c005ab01c005abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905ab02d605ab006605abffea05d5ffff04d50092
0800000007eb013007eb012007eb013007eb012004d500b204d5008004d5
002a082b0198086b01b807550010060000f40600006f0440003a05400037
04c0003f04150040040000250600005505e100bf038d008904d5ffd90180
008002d50086071500610296000f04d5009202d6008302d6008304d500b2
02d600700556fffd0473004a05c700660400005005c70066040000500556
00a20473004b055600a20473004b055600a20473004b0639006d04730042
0639006d047300420639006d0473004205c700a40473008705c7001f0473
00060239ffce0239ffce0239ffe40239ffe40239fff60239fff50239004b
01c700190400003701c7ffa20556009604000088040000860473009601c7
fffa05c7009c0473008705c900a50473008b063900630473004406390063
0473004405c700a102aa006b0556005c0400003f04e300300239000c05c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
078d001905c70006055600060400002101c700890556fffd0473004a0800
0001071d00440639005304e30081023900b9078d001905c70006078d0019
05c70006078d001905c70006055600060400002101c7008a02aaffe10473
001b04cd005a06ac006b06ac002206ac002206ac004a02aa00e202aa006b
02aa00de02aaffea0557ffff0646ffa706b4ffa80312ffa80632ffa706d8
ffa70605ffa701c7ff780556fffd055600960558fffe055600a204e30029
05c700a4023900bf055600960558000b06aa009805c7009c0533006d0639
006305c700a40556009e04f2009404e30030055600060556000906af007f
05fb0061023900040556000604a00048039100620473008b01c7006b0460
0088049a008c04000019038700480473008b0473005c01c7008904000086
04000018049c00a00400001a0395005c04730044048d008303db00560460
00880433001105b4007a063f005701c7ffc9046000880473004804600088
063f0057055700a206eb0032045500a105c000640556005c023900bf0239
0004040000370875000d081500a406d5003104a900a10515000a05c000a0
0556fffd054000a705560096045500a1056b0000055600a20763000704d5
004e05c000a105c000a104a900a10540001206aa009805c700a406390063
05c000a00556009e05c7006604e300300515000a061500520556000905eb
009f05550057075500a1078000a106550000071500a8054000a505c00055
081500a405c7001a0473004a0495005b0440008802eb008804ab00000473
004b055afffb03ab003204780087047800870380008604ab00180580008c
046b00880473004404550088047300870400005003aa0026040000210695
004b0400000f0495008a042b0045066b008d0695008d0500002805c0008b
042b008404150030060000890455001f0473004b0473000002eb00890415
004b0400003f01c700880239000901c7ffa2074000130680008304730000
0380008604000021046b008803e900a1034a008808000041089500a00585
002d000001010000001e0000003100000031000001010000007e0000007e
0000008c0000008c000001010000001000000101000001210310007d0000
008c023300d20000030b0000ff04023900b9048100690456003203310019
0411002d04d1009601f9009b030f005f04ca009b04b8008c01f9009b0413
002803b0005003b4003c04ca009b04cf005001f9009b02d2003c0498005a
043c00190488006e045f007303b1001903d4000a0466009604130028058e
00640524002803f2009b03f2009b03f2009b01e3005a0356005a0686009b
01f9ffac041300280413002803b4ff5703b4ff570448002d058e0064058e
0064058e0064058e00640481006904810069048100690456003203310019
0411002d04d10096024b0000034a000004b8008c024b00000413002803b0
005003b4003c04cf005002d2003c0498005a0488006e045f007303d4000a
0466009604130028058e00640524002801f9009b0456003203b00050045f
0073049b003c0000ffdc0000ff250000ffdc0000fe51028d00ab028d00a0
02da0043034d007901a8ffba000000460000004600000046000000460000
00480000004600000046000000460435017c0435012e043500b704350081
0435012c043500be043500af043500810435009a043500db04350085028d
00c1043500b3060001000600010002420036060001000435009e04350098
043500cb0600010006000100060001000600010006000100000000460600
010006000100060001000600010006000100060001000600010006000100
051bffba06000100060001000600010005b5003a05b5003a01f4ffba01f4
ffba060001000600010006000100060001000481003604350036043dffba
043dffba03e9004a03e9004a067f0014077600140327ffba041effba067f
0014077600140327ffba041effba051b003204b500240300fff706000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010000000030
0000004600000046000000400000004606000100060001000000ffdc0000
fe510000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ff160000ff160000ffdc0000ff160000ffdc0000ff200000ffdc0473
004a08000000060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010006000100060001000600010006000100028d
007f028d005d0600010004ee0015034d007901a8000e01d6ffdc01a80056
01d60010037500320375003201a8002d01d60013051b003204b5002401f4
ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba01f4ffba
024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba02b3
005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0692003e0692003e043fffba043f
ffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5ffba
06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7
ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a039a0036
0435ffba0327ffba064f0027064f00270224ffba021affba04a7004604a7
00460224ffba021affba04cf002d04cf002d0327ffba0327ffba040d0047
040d004701a8ffba01a8ffba02b4002302b400230327ffba0327ffba0435
00450435004501f4ffba01f4ffba024200360300fff7039affba0327ffba
0375003203750032051b003204b50024051b003204b5002401f4ffba01f4
ffba045a004004ce0049045a002604ce0039045a005304ce004a045a0053
04ce004a0600010006000100000000460000004606000100060001000600
010000000046000000460600010006000100000000480000004606000100
060001000600010000000046000000460000004600000046000000400000
003006000100000000460000004606000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100028d00ca028d00c7028d
00c606000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000100ffba0800ffba1000ffba06dc0063053f004406d5
00a1055b00830000fddc0000fc2f0000fca60000fe540000fcd70000fd73
0000fe290000fe0d0000fd110000fc670000fd9d0000fbf50000fc720000
fed50000fed50000ff02041b00a006ac006b06ac00190000feb60000fd73
0000fe080000fca60000fe530000fd110000fbc80000faf40000faaf0000
fc720000fbaa0000fb6a0000fcf10000fc7d0000fbdd0000fcc10000fb98
0000fdea0000fe840000fdc20000fcf10000fd5f0000fe760000febc0000
fceb0000fd6c0000fd580000fc900000fd150000fc2c0000fc130000fc12
0000fb960000fb9601c700880556fffd0473004a0556fffd0473004a0556
fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a055600a20473004b055600a2
0473004b055600a20473004b055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b0239006301c7001f
023900ba01c7007c06390063047300440639006304730044063900630473
004406390063047300440639006304730044063900630473004406390063
0473004406dc0063053f004406dc0063053f004406dc0063053f004406dc
0063053f004406dc0063053f004405c700a10473008305c700a104730083
06d500a1055b008306d500a1055b008306d500a1055b008306d500a1055b
008306d500a1055b00830556000604000021055600060400002105560006
040000210556fffd0473004a0239ffe201c7ffb0063900630473004405c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
05c700a1047300830000fefe0000fefe0000fefe0000fefe0455fffd02eb
000c07630007055afffb04a900a10380008604a900a10380008605c700a4
046b00880473fffd040000140473fffd04000014055600090400000f0555
0057042b0045055500a10473008706050063047300550639006004730044
05b5003a01f4ffba0224ffba021affba04a7004601f4009e01f4001001f4
001b01f4001001f4006b01f4fff90227ffce0000000f0000fff502aa00a4
02aa00a40000000e00000056000000560000ffcf01a8000f01d6ffbf01a8
fff501d6ffcd01a8001d01d6fff501a8009301d600130375003203750032
0375003203750032051b003204b5002405b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba0481003604350036043dffba043dffba048100360435
0036043dffba043dffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba02b3003202b3003202b3005f02b3005f
02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3005f02b3
005f02b3005f02b3005f02b3003802b3003802b3004902b3004903e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0692003e0692003e043fffba043f
ffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba045a
002a039a00360435ffba0327ffba064f0027064f0027064f00270224ffba
021affba064f0027064f00270224ffba021affba064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba04a7004604a7004604a7004604a70046093e0032093e
00320740ffba0740ffba067f0014077600140327ffba041effba04cf002d
04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba04cf
002d04cf002d0327ffba0327ffba067f0014077600140327ffba041effba
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba040d0047040d004701a8ffba01a8ffba040d0047040d004701a8
ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba043500450435004501f4ffba01f4ffba043500450435
00450435004504350045043500450435004501f4ffba01f4ffba04350045
043500450481003604350036043dffba043dffba024200360300fff7031a
001a031a001a031a001a0375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
0032037500320375003203750032051bffba04b5ffba051b003204b50024
01f4ffba01f4ffba0375003203750032051b003204b5002401f4ffba01f4
ffba051b003204b50024067f0045067f0045067f0045067f004501a80028
0000fe290000fea20000ff300000ff1d0000ff120000ff920000fe7e08fc
003208ad00320000ffb50000ffb60000feed0000ff640000fe7e0000ff9f
018d000002f6fffd0000fe820000ff1004cd00320000ff580000ff580000
ff640692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba045a002a039a00360435ffba0327ffba034d007902b400230242
003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b101f4006d
067f00140776001401f9009b0000fed902bc000003f2009b045afff504ce
fff5045a005304ce004a045a005304ce004a045a005304ce004a045a0053
04ce004a045a005304ce004a045a005304ce004a04350071043500ad045a
000f04ce000f0473001406110014054000a7047300860540000a0473000a
05c7005105c700660400005005c7fffd067a00140540004a047300460474
00480556006e04d5005304e3ffc40639006d04fe000f070c008701c70083
0239001f055600960400008801c7001504000018072000a405c7ffb80473
008b0639006006f200630557004406090014047300860556009e0556006b
0400004f04f20094030b00440239002404e300140239002404e3003005fb
006105c700a1062e00100400002104e300290400002804e3002904e30031
045c0044045c003f0473003c0473005503ab003203e50024047300870214
00bc034e00bc04ac0072023900b00aaa009e09c7009e08640046087f0096
06aa0096039c008309c7009c078e009c062b0087047300550556fffd0473
004a0000fefe0556fffd0473004a08000001071d00440639006d0473001a
0639006d0473004205560096040000880639006304730044063900630473
004404e30029045c004c01c7ffa20aaa009e09c7009e086400460639006d
04730042084600a404f2009e05c7009c047300870556fffd0473004a0556
fffd0473004a055600a20473004b055600a20473004b0239ff8a0239ff64
023900040239fff60639006304730044063900630473004405c700a102aa
ffcc05c700a102aa006805c700a10473007605c700a1047300830556005c
0400003f04e3003002390024045c0051037e001305c700a40473008705a6
00a404d6005e0486005e04e30029040000280556fffd0473004a055600a2
0473004b06390063047300440000fefd0639006304730044063900630473
004406390063047300440556000604000021047300570473004804730086
04730086040000130400005004730046047300460473005505e9005503ab
004903ab0032050d0032040f00440239ffb9047300420473004204780050
0402001904ef00190473008b047300870473008701c7001901c7005702d9
0044029e0000026e001401c700830493008306aa008406aa008406aa0087
0473ffa60473008b046c00870473004406530044063f00570466004402aa
ffe402aaffe402aaffe402aa008502aa008502aa008502aaffe40455008a
0455008a0400003f01c7ffa20214ffb901c7ff7202cb00000239000f0239
002404730019048c0054046000880400001a05c700060400001804280019
0400002804540028045c004c045c00790400002404000050040000240400
00500639006304400088040f004904780050046b0088032e000004000008
033b008804730048040000240400005007b7004607400046080b004605b3
0024036f002405c00024061c0013054a0083050f008303e2001e04380063
03110064031100640146ffce01eb006401eb000001eb000002ea006403d9
0000029100000187005a02d7005e01c7008001c7006c01c7008a02aa00fb
02aa00fb02ca003202ca003204ac007004ac007004ac006504ac006502aa
012102aa00de02aa005902aa012102aa001d02aa005902aa00de023900b6
023900b602aa00fb02aa00fb02aa00a602aa00a602aa00a602aa001d02aa
ffe202aafffb029400000142006402b8003202a0000002ca003203100096
0310009603100096031000960310009602aa006202aa006202aa002802aa
001d02aa0047045700960457009604570096045700960457004304570043
045700430457004304570043031000430457002f0457002f0457002f0457
002f0457002f0310002f0457002504570025045700250457002504570025
0310002f0457001a0457001a0457001a0457001a0457001a0310001a0457
004204570042045700420457004204570042031000420457009604570096
045700960457009604570042045700420457004204570042045700420310
00420457002f0457002f0457002f0457002f0457002f0310002f0457002f
0457002f0457002f0457002f0457002f0310002f04570026045700260457
002604570026045700260310002604570042045700420457004204570042
045700420310004204570096045700960457009604570096045700420457
004204570042045700420457004203100042045700260457002604570026
045700260457002603100026045700230457002304570023045700230457
0023031000230457002f0457002f0457002f0457002f0457002f0310002f
0457004b0457004b0457004b0457004b0457004b0310004b045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457001a0457001a0457001a0457001a0457001a0310001a0457
002404570024045700240457002404570024031000240457002f0457002f
0457002f0457002f0457002f0310002f0457004e0457004e0457004e0457
004e0457004e0310004e045700960457009604570096045700960000fec1
0000fec60000fdac0000fed80000ff920000fee90000ff4c0000fea00000
fec40000ffce0000ff660000fea00000fed80000fed80000ff970000ff98
0000ff990000fff40000ff420000ff420000ff440000ff5f0000fe870000
ffec0000ffa60000ff510000ff510000ff510000fec90000ff1c00000000
0000fee90000ff4c0000ff930000ff2a0000ff560000ffce0000fe870000
febb0000fec40000fec40000fed80000fed80000feb30000fec90000fdad
0000fec80000feb30000fec90000fdad0000fe160000fee60000ffa60000
fe870000ff440000feba0000ff230000ff9a0000fdac0000fe8800000000
0000feb00000ff980000fe930000ffa60000fe870000fe1c0000ff660000
ff440000feb00000feb00000feb00000ff030000ff520000fd1f0000ff53
0000ff530000ff530000feb50000feb50000ffc30000feae0000fedc0000
fec70000fec80000fedc0000fe1e0000ff420000ff510000feb70000feb0
02aa00de02aa005902aa00fa049a007004600000062e001407aa0000062e
0014047b004c063f005704cf0044063900630473004405c7007004000050
04e300a8033b008804ff0000043c0032060d000a049d0042072000a406aa
0084056500630473008b056400a40400000a0556006b0556006b04e00005
04c5001905e5005f046e004403b600140347002804cf00440495005b0400
005001c7ffa2063900600389004d03890050055600a205c000a10473004b
047800870ab4006d04fe00100639001404e70014079900bf05b500880558
000104000006072e00bf0590008806a10078057b007a086d00bf06f00088
04d5006603ab001f065f0039058200480639006004730044066d0009050c
001a066d0009050c001a08980063072c004406aa002004e6001c0987006d
06d000500000fe370ab4006d04fe001005c7006604000050040700140000
fea60000febc0000ff980000ff980000fc2b0000fc4c05c000a104780087
05400004042b00140556009e04730087055d00a40464008804d5004e03ab
003204a900040380000005ef002904490028070900a4052f0088091800a0
06f600880606003e042b002305c700660400005004e3003003aa00260767
00310587002605550057042b004506e4000a0554000a06e4000a0554000a
023900bf07630007055afffb055700a1046800860540001204ab001805c7
00a4046b008805c700a4046b008805550057042b004506aa00980580008c
02aa002e0556fffd0473004a0556fffd0473004a08000001071d00440556
00a20473004b060500630473005507630007055afffb04d5004e03ab0032
04d5004e045c004c05c000a10478008705c000a104780087063900630473
0044063900600473004405c0004a0415002b0515000a040000210515000a
040000210515000a0400002105550057042b0045071500a805c0008b0540
004a0473004607bf004a0703004607a6006606860053054d006604130053
07c3001207470018084600a4070700880639006d0478005005f900300553
00260000ff430000fec90000ff770000ffb00000ff470000ff560000ff74
0000fed70000feac000000000000ff520000ff56000000000000feac0000
fd9a000000000000ff6a0000ff7c0000ff690000ff560000feac0000ff7f
0000ff560000fdef0000ff430000ff690000ff7c000000000000fdae0000
ff8c000001020000fefe0000fefe0000fedf0000fedf0000ff580000ff20
0000fefe0556fffd0473004a055600960473008605560096047300860556
00960473008605c700660400005005c7009e0473004605c7009e04730046
05c7009e0473004605c7009e0473004605c7009e04730046055600a20473
004b055600a20473004b055600a20473004b055600a20473004b055600a2
0473004b04e300a8023900130639006d0473004205c700a40473008705c7
00a40473008705c700a40473008705c700930473006805c700a404730087
0239ffdf01c7ff9202390020023900060556009604000088055600960400
008805560096040000880473009601c7007e0473009601c7ffb904730096
01c7ffa50473009601c7ffa306aa009806aa008706aa009806aa008706aa
009806aa008705c7009c0473008705c7009c0473008705c7009c04730087
05c7009c0473008706390063047300440639006304730044063900630473
004406390063047300440556009e047300870556009e0473008705c700a1
02aa008505c700a102aa008505c700a102aa005e05c700a102aa00260556
005c0400003f0556005c0400003f0556005c0400003f0556005c0400003f
0556005c0400003f04e300300239002404e300300239002404e300300239
ffff04e300300239000e05c700a10473008305c700a10473008305c700a1
0473008305c700a10473008305c700a104730083055600090400001a0556
00090400001a078d001905c70006078d001905c70006055600090400000f
055600090400000f055600060400002104e300290400002804e300290400
002804e3002904000028047300870239000305c70006040000210473004a
01c7008904a0004804a0004804a0004804a0004804a0004804a0004804a0
004804a000480556fffd0556fffd06820013068200130682001306820013
068200560682005603910062039100620391006203910062039100620391
0062061e0000061e0000076c0000076c0000076c0000076c00000473008b
0473008b0473008b0473008b0473008b0473008b0473008b0473008b068f
0000068f0000081f0000081f0000081f0000081f0000081ffff3081ffff3
01c7008101c7008101c7ff9b01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7
ffa20301000003010000049100000491000004910000049100000491fff3
0491fff3047300440473004404730044047300440473004404730044069d
0000069d0000082d0000082d000007c9000007c900000460008804600088
0460008804600088046000880460008804600088046000880682000007ae
00000812000007ae0006063f0057063f0057063f0057063f0057063f0057
063f0057063f0057063f0057065f0000065f000007ef000007ef0000078b
0000078b0000078bffff078bffff04a0004804a000480391006203910062
0473008b0473008b01c7ffe601c700680473004404730044046000880460
0088063f0057063f005704a0004804a0004804a0004804a0004804a00048
04a0004804a0004804a000480556fffd0556fffd06820013068200130682
00130682001306820056068200560473008b0473008b0473008b0473008b
0473008b0473008b0473008b0473008b068f0000068f0000081f0000081f
0000081f0000081f0000081ffff3081ffff3063f0057063f0057063f0057
063f0057063f0057063f0057063f0057063f0057065f0000065f000007ef
000007ef0000078b0000078b0000078bffff078bffff04a0004804a00048
04a0004804a0004804a0004804a0004804a000480556fffd0556fffd0556
fffd0556fffd0556fffd02aa00e502aa00fd02aa00e502aa000602aa0006
0473008b0473008b0473008b0473008b0473008b068200000682000006f3
000006f3000005c700a402aa001302aa001302aa000601c7ffbb01c7ffab
01c7ffca01c7ffca01c7ff9301c7ff930239001a0239fff5036500000365
000002aa001302aa001302aa000604600088046000880460008804600088
048d0083048d00830460008804600088055600060556000606e600000718
0000061e000002aaffea02aaffea02aa0059063f0057063f0057063f0057
063f0057063f005707650000069d000007270000065f000005fb006102aa
00de02aa00e50473000d05c7006605c7006606aa008705c70024095000a1
078d00190556001f04e30030080000290400003004c100660000ff530000
ff530000ff530000ff5301c7001901c7ffa2042b00050556001105740046
02cbffa3057a008702f0ffc8057f000a057f000a02aa008402aa008402aa
00c902aa00c902aa00a002aa005902aaffaf02aa003a02aa0006023900b9
02aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa003a0000
ff730000ffa50000fed80000ff230000ff720000ff720000fee70000ffa5
0000ff530000ff530000ff530556009e0473008703f8001905fb0019071d
00440440001904000050046900870469001903eb008703ab003201c70088
0361004104000088033600100580008c04780087047300440400001304de
004404de004404de000d078d005003a800440473004404730044042b0084
0455001f0455001f03aa00260460008804c6004405de004404c600440400
001a05c700060400002803ab0032036b003f04db001f02eb00880400001a
04550088042b008405b4007a04ab001803a00000054f0000035100320351
ffd103980032034800320348003203f80032036e0032015600690284002d
0366003202d000320415003203710032036f003204180032030f00320359
0032039c003203760031036f003204fb000002fa003202fa003203040032
04cc0032030500640305003202f9003202f90032028c0032028c00320304
00320142006402b6006404950064030f00640305003202d5003203050032
030500320306006401c20032030f00640342003204950064029200000320
00000315006402920000030600320385003202bf00000142006401eb0064
030f0064029200000315006402920000030900320385003202bf000005ed
00460a660046061300460689ffba0541ffba01e9003c045a00110000ff0d
0000ff350000fece0000feb70000fec90000ffcf0000ff4f0000ff9e0000
feca02b3005f02b3005f03e9004a03e9004a039affba0327ffba039affba
0327ffba05ad0069053d002d05fd009604dc005004e0003c05f6009b053f
00280650002804ac00720000fe3b0000fe660000fe660473fffc02aa0053
02d5ffce01a8ffba01a8ffba01a8ffba01a8ffba0658001509c500470400
000008000000040000000800000002ab0000020000000155000004730000
02390000019a000000ab00000000000005e5000305c7006606aa00980580
008c0744008307180046071800480556fffd05c70066040000140473000a
04e300300400004f0400002804a5001d000001020000ff420000febf0000
ff3a0000ff53048d000a05c7005105c7006605c70051045500a102eb0088
0000ff430000ff040000ffac02d200960000ff37021affba0250001e0000
ff3a0000ff5b0000ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a
05b5003a01f4ff9601f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba0481003604350036043dffba
043dffba0481003604350036043dffba043dffba02b3003202b3003202b3
005f02b3005f03e9004a03e9004a0692003e0692003e043fffba043fffba
045a002a039a00360435ffba0327ffba045a002a039a00360435ffba0327
ffba045a002a039a00360435ffba0327ffba064f0027064f00270224ffba
021affba064f0027064f00270224ffba021affba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba067f001407760014
0327ffba041effba02b4002302b400230327ffba0327ffba02b4002302b4
00230327ffba0327ffba043500450435004501f4ffba01f4ffba04350045
0435004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba040d
0047040d004701a8ffba01a8ffba03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0473ff93047300460239ffbf06aa
ffd50473ffb70473ff9102aaffa402aaffa40400ffff0239ffb904000028
04730089030b0064047400480649002401c7001901c700190473001e0460
001e048c000a04730086047300460239001305b400420400008801c7fffc
06aa00870473008b0473008702aafffb0400003f0318ffa20400001a0400
000f040000280473004a04730048047300460473004b03ab004903ab0032
0534005501c700880400001301c7ffa204730083045c004c0304006402d5
003202c9003302fc0032028c003201d5003201d500000304003203110064
01420019014200640142006401420019022a000001420064014200090233
00640493006404930064030fffc9030f0064030e00640305003203000032
02b800320142ffca01c20032030f001d031a00320306006402d400640292
000002de003202de003202de003202f4003202ea00320000febc0000febc
0000ff730000fea9023900b902fa003202f900320305003202a0000002f9
00320639006d0556fffd0473000f05c7006602aa004104a0004804a00048
04a0004804a0004804a0004804a0004804a0004804a0004801c7ff9b01c7
ffab01c7ff9b01c7ffab01c7ff9b01c7ffbb01c7ff9b01c7ffbb04600088
0460008804600088046000880460008804600088046000880460008801c7
ffab01c7ffab01c7ffbb01c7ffbb04600088046000880460008804600088
045a005304ce004a03a000130556001105c700290558000b055600a20473
004b0400003301c7ffa205e600630473004805c7000002aa000f05560006
0400002104000013040000500400001301c700830455fffd02eb00010556
00090400000f055600090400000f04d5005303ab00490540001204ab0018
0000fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff720000
ff730000fee7078b000a03eb004c040000130473000a01c700150473fff4
0556001105c700a1047300190239ff8b05c700a404730087055600960400
008804e30029040000280400003b049e00a403670088053000480000ff53
0000ffbc0000fefe0000fefe0000fea40000fea401c7008805c900a505c7
009c05c900a50000fecd0000ff480000fec90000fece0000fec50000fed0
0000fed10000feee0000fed60000fedc0000fdd90639005804730048078d
001905c70006059f00a40000feb905dc006304c60009084c001906ba0006
023900b9038000720187005a0187005a0400009904000099023900b00239
00b0023900b002aa001904e30030047300500473000f0473001c065b0087
064a004c000000000000002a0000002a0000002a0000002a0000002a0000
002a0000002a0000002a0000002a0000002a0000002a0000002a0000002a
0000002a0000002a0000002a0000002a0000002a0000002a0000002a0000
002a0000002a0000002a0000002a0000002a0000002a0000002a0000002a
0000002a0000008600000086000000860000008600000086000000860000
00860000008600000086000001c0000001c0000001c0000001c0000001c0
000001c0000001c0000001c0000001c0000001c0000001c00000036a0000
036a0000036a0000036a000005d6000005d6000005d6000005d6000005d6
000005d6000005d6000005d6000005d6000005d6000005d6000005d60000
05d6000005d6000005d6000008a8000008a8000008a8000008a800000a66
00000a6600000c5600000dfa00000eee00000eee00001186000012820000
1282000014480000160a000017ce000017ce000018d400001c7c00001da0
00001da000001da000001da000001da000001ff800001ff800001ff80000
1ff800001ff800001ff800001ff800001ff800001ff800001ff800001ff8
00001ff800001ff800001ff800001ff800001ff800001ff800001ff80000
1ff800001ff800001ff800001ff800001ff800001ff800001ff800001ff8
00001ff800001ff800001ff800001ff800001ff800001ff800001ff80000
1ff800001ff800001ff800001ff800001ff800001ff800001ff800001ff8
00001ff800001ff800001ff800001ff800001ff800001ff8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000021e8000021e8000021e8000021e80000
21e8000021e8000021e8000021e8000021e8000021e8000021e8000021e8
000021e8000021e8000021e8000100000d5d00f2003c009d000700020010
002f0056000004ac041d000500020000000e00ae0000000300000000006a
000000000003000000070062006a0001000000000000003500cc00010000
00000003000e01010001000000000004000e010f0001000000000006000e
011d00010000000000070031012b0003000104090000006a015c00030001
04090001001c01c60003000104090002000e01e20003000104090003001c
01f00003000104090004001c020c0003000104090006001c022800030001
040900070062024400a90020003200300031003400200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e004100720069
0061006c00200069007300200061002000740072006100640065006d0061
0072006b0020006f006600200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
002ea9203230313420546865204d6f6e6f7479706520436f72706f726174
696f6e2e20416c6c205269676874732052657365727665642e5645474e5a
532b417269616c4d545645474e5a532b417269616c4d545645474e5a532b
417269616c4d54417269616c20697320612074726164656d61726b206f66
20546865204d6f6e6f7479706520436f72706f726174696f6e2e00a90020
003200300031003400200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e005600450047004e005a0053002b00410072
00690061006c004d00540052006500670075006c00610072005600450047
004e005a0053002b0041007200690061006c004d0054005600450047004e
005a0053002b0041007200690061006c004d0054005600450047004e005a
0053002b0041007200690061006c004d00540041007200690061006c0020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e002e00>
<b900540328b326181fd0bc032900e0032900020329b22b1d1fb90327031d
b23b1f40b80323b31215320f412d03200001002f0320000100200320006f
032000af032000bf03200004005f031e00010010031e007f031e0080031e
00af031e00bf031e00d0031e00060000031e0010031e0020031e006f031e
009f031e00e0031e0006031d031cb2201f1041270319007f03190002000f
031700ef031700ff03170003001f0317002f0317004f0317005f0317008f
0317009f03170006000f0317005f0317006f0317007f031700bf031700f0
0317000600400317b2923340b80317b28b3340b80317b36a6c3240b80317
b2613340b80317b35c5d3240b80317b357593240b80317b34d513240b803
17b344493240b80317b23a3340b80317b331343240b80317b32e423240b8
0317b3272c3240b80317b312253280b80317b30a0d32c04116031600d003
16000200700316000102c4000f0101001f00a0031500b003150002030600
0f0101001f00400312b32426329fbf03040001030203010064001fffc003
01b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002edb30e11
329f414a02e200af02e200bf02e2000302e202e202e102e1007f02e00001
001002e0003f02e0009f02e000bf02e000cf02e000ef02e0000602e002e0
02df02df02de02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf
02dd00ef02dd000702dd02dd001002dc0001000002dc0001001002dc003f
02dc000202dc02dc001002db000102db02db000f02da000102da02daffc0
02d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2
171b32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b1f40bb03
22003e00330322b225311fb80318b23c691fb802e3b3202b1fa0413002d4
00b002d40002000002d4001002d4002002d4005002d4006002d4007002d4
0006006002d6007002d6008002d6009002d600a002d600b002d600060000
02d6001002d6002002ca002002cc002002d6003002d6004002d6005002d6
000802d0b2202b1fb802cfb226421f411602ce02c70017001f02cd02c800
17001f02cc02c60017001f02cb02c50017001f02c902c5001e001f02ca02
c6b21e1f00410b02c6000002c7001002c6001002c7002f02c5000502c1b3
24121fff411102bf0001001f02bf002f02bf003f02bf004f02bf005f02bf
008f02bf000602bf0222b2641f12410b02bb00ca0800001f02b200e90800
001f02a600a20800406a1f4026434932402043493240263a3d3240203a3d
329f209f26024026969932402096993240268e923240208e92324026848c
324020848c3240267a813240207a813240266c763240206c76324026646a
324020646a3240265a5f3240205a5f3240264f543240204f5432b8029eb7
24271f374f6b0120410f0277003002770040027700500277000402770277
027700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180bc018052
0180a201806501807e01808101803c01805e01802b01801c01801e018040
0180bb0138000100800140b40180400180bb013800010080013940180180
ca0180ad018073018026018025018024018020013740b80221b2493340b8
0221b2453340b80221b341423240b80221b33d3e320f410f0221003f0221
007f0221000300bf022100cf022100ff0221000300400221b320223240b8
0221b3191e3240b80222b32a3f3240b80221b32e3a326f414802c3007f02
c3008f02c300df02c30004002f02c3006002c300cf02c30003000f02c300
3f02c3005f02c300c002c300ef02c300ff02c3000600df02220001008f02
220001000f0222002f0222003f0222005f0222007f022200ef0222000600
bf022100ef02210002006f0221007f022100af02210003002f0221003f02
21004f0221000302c302c30222022202210221401d101c102b1048038f1c
010f1e014f1eff1e023700161600000012110811b8010db6f70df8f70d00
094109028e028f001d001f0290028f001d001f028fb2f91d1fb80198b226
bb1f41150197001e0401001f013900260125001f013800730401001f0135
001c0801001f0134001c02ab001f0132b21c561fb8010fb2262c1fba010e
001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51c
b802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b80201b61f
b91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b
1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f481c891f44
1c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301c
bb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b21f5537b8
0168402c07960758074f07360732072c0721071f071d071b071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a
515ab005234201b0124b004b5442b0382b4bb807ff52b0372b4bb007505b
58b101018e59b0382bb00288b801005458b801ffb101018e851bb0124358
b900010111858d1bb900010128858d5959001816763f183f123e11394644
3e113946443e113946443e113946443e11394660443e11394660442b2b2b
2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa
1d59b0324b5358b0ff1d594bb09353205c58b901f201f04544b901f101f0
45445958b9033e01f2455258b901f2033e4459594bb8015653205c58b900
2001f14544b9002601f145445958b9081e0020455258b90020081e445959
4bb8019a53205c58b9002501f24544b9002401f245445958b90909002545
5258b9002509094459594bb8040153205c58b173244544b1242445445958
b917200073455258b9007317204459594bb8040153205c58b1ca254544b1
252545445958b9168000ca455258b900ca16804459594bb03e53205c58b1
1c1c4544b11e1c45445958b9011a001c455258b9001c011a4459594bb056
53205c58b11c1c4544b12f1c45445958b90189001c455258b9001c018944
59594bb8030153205c58b11c1c4544b11c1c45445958b90de0001c455258
b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c45
6523456023456560234560b08b766818b080622020b163594565234520b0
03266062636820b003266165b059236544b063234420b13b5c4565234520
b003266062636820b003266165b05c236544b03b2344b1005c455458b15c
406544b23b403b4523614459b347503437456523456023456560234560b0
89766818b080622020b134504565234520b003266062636820b003266165
b050236544b034234420b147374565234520b003266062636820b0032661
65b037236544b0472344b10037455458b137406544b24740474523614459
004b5342014b5058b108004259435c58b108004259b3020b0a124358601b
2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342
b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f23
42b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b
7475737500184569444569444569447373737374757374752b2b2b2b7475
2b2b2b2b2b73737373737373737373737373737373737373737373737373
2b2b2b45b0406144737400004bb02a534bb03f515a58b1070745b0406044
59004bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a
515a58b1030345b040604459004bb02e534bb03c515a58b1090945b8ffc0
6044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b43
5c58b9008002bbb301401e017400735903b01e4b5402b0124b545ab01243
5c5a58ba009f02220001007359002b7473012b01732b2b2b2b2b2b2b2b73
7373732b2b2b2b2b002b2b2b2b2b2b004569447345694473456944737475
456944734569444569444569447374456944456944732b2b2b2b2b732b00
2b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b737475737475
2b2b2b742b2b000000>
[8681 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> PBAAAA+ArialMT AddT42Char 
2 42 29 <000200b9000001860426000300070038402004050006070902063c04033c
0106040a023c2f003f000220000100a108a198182b10f45d71ed003f3fed
10ed011112393912393931301335331503353315b9cdcdcd0359cdcdfca7
cdcd>PBAAAA+ArialMT AddT42Char 
2 134 38 <00010066ffe7057605d3001d00d3b563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc0402d2839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f1726200801080c0b0b06
5508191e635c182b4e10f42b5d4ded4e10f65d4dedf4ed003fed3fed1117
393130012b2b5d5d71005d2b2b0172011706042322240235341224333204
17072626232206021514121633323604b4c23dfec3e5edfed79baf0143c2
dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155b1e0
cb2da092a2feef91bbfee98abc00>PBAAAA+ArialMT AddT42Char 
2 448 49 <0001009c0000051f05ba0009017db1120bb8ffc0400a13153408180c1602
5503b8ffe840210c16025508020303200708140707080207030308090402
02090708040320060605b8ffecb40f0f025505b8fff2400b0d0d02550512
0c0c025505b8fff7401a0b0b0655055d200b01200b500b600b700b800b05
0b0809200100b8ffc0400d13153420000100201010025500b8fff6b40f0f
025500b8fff6b40d0d025500b8fffa400b0c0c025500040b0b065500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d0a3b59182b10f62b2b2b2b2b
2b2b5d2b3cfd3c105d71f42b2b2b2b3c10fd3c003f3c3f3c123939011139
3987042e2b877dc4b10602435458b90003ffe0b70c113408200c1134002b
2b5931302b2b012b435c58b40840463903b8ffc0b646390840323903b8ff
c0b632390722193902b8ffdeb619390722323902b8ffdeb6323907222339
02b8ffde400b2339070e1439070e133902b8fff4b61339070e1d3902b8ff
f4b61d39070e153902b8fff8b115392b2b2b2b2b2b2b012b2b2b2b2b2b00
2b2b2b2b59331133011133112301119cc70302bac7fcfe05bafb81047ffa
460480fb8000>PBAAAA+ArialMT AddT42Char 
2 874 53 <000200a1000005ad05ba0018002201fc4021120b0e0112361c5a1f66086d
1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550d
b8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2
b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d27340fb8
ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2b3121a34
0fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b0221
1a160a061211100d0c0518090916171a191e17b8ffc040190b0b06551717
0021221e0201020018180f0f0e081e260e9c06b8ffe8b40f0f025506b8ff
f6b40d0d025506b8ffe040220c0c025506060d0d0655065d202470248024
03242218200120000100201010025500b8fff6b40f0f025500b8fff6b40d
0d025500b8fffa400b0c0c025500060b0b065500b8fff7b40c0c065500b8
fff8400a0d0d0655005d233ba8182b4e10f42b2b2b2b2b2b2b5d3c4dfd3c
105df62b2b2b2b19e418ed003f3c103c103c3f3cfd3c12392f2bfd3c103c
392f12173901111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b
2b2b2b2b002b2b2b5d435c58400a08400f390f103a11123a2b2b2b590171
435c58b9000effde401a193911221939122219390e401c39102214391022
1f39102215392b2b2b2b2b2b2b5933112132161615140607161716171323
032e02272623231111213236363534262321a1028ac4cc7acad34d28554c
fff4c2556e572d214be101a185964e97a3fe3005ba4fc8799cd61d25244e
75fe710131848c380b07fd750333377947688600>PBAAAA+ArialMT AddT42Char 
2 1494 68 <0002004affe8041c043e00280037022d402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe040550c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030e0c0f0f
02550eb8ffeab4101002550eb8fff44015101006550e0c0d0d06550e060f
0f06550e0e1c0317b802aab61895141c1c0700b8fff4401a0c0c06550045
270a321c030b2961106100060d0d025500252124b8ffecb41010025524b8
ffec400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b
065524b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b802
5b400e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b6
0e0e0255263139b8ffc0400d1e23343039c03902a039013917b8fff44041
10100655172518222f24bf06cf06021f063f0602060e0f0f0255060c0d0d
025506180c0c0255060c0b0b0255060c0b0b0655060e0d0d065506100c0c
065506313810f62b2b2b2b2b2b2b5d71edf4ed2b105d712bf62b2b5dedf4
2b2b2b2b2b2b2b2b3cfd2be5e5003fed3fe42b3fedfde41112392f2b2b2b
2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d2b
2b0071250606232226353436363736373637363534272623220607273e02
333216161716151514161723260306070e02151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>PBAAAA+ArialMT AddT42Char 
2 2216 72 <0002004bffe8041e043e0015001d015340171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc04010101006551001010195131c040b17400db8ffdcb40d0d02550d
b8ffeeb40d0d06550db8ffeab40c0c06550db8ffc04009272a34b00d010d
1a1fb8ffc0b32526341fb8ffc040411e2334301f011f163310240740242a
341f073f074f070307200b0b025507180c0c0255071c0d0d0255070e0b0b
0655071c0c0c065507160d0d065507191e3437182b4e10f42b2b2b2b2b2b
5d2b4dfde44e10712b2bf6712b2b2b2b4ded003fedfd5d2b2be43fed1239
2f5d3cfd713c011112393912393130015d005d2b2b2b0171720117060623
22001110003332001114072116163332360121262726232206035eba2cee
b9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897ca90156
17a3b4011f0103010c0128fedefef91020afba680195864368a6>PBAAAA+ArialMT AddT42Char 
2 2662 74 <00020042fe5103ea043e001e002a016f40600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d403205
1c1c0f0a45221c0c0a16153325330a251818d01701101740176017801704
2c400b0c02552c400d0d025517121010025517b8fff440110f0f02551706
0e0e025517160d0d025517b8ffea400b0b0b065517121010065517b8ffee
b40c0c065517b8fffc404a0d0d065517740f012500221f24bf0fcf0fdf0f
ff0f041f0f3f0f4f0f030f200b0b02550f1a0c0c02550f220d0d02550f1c
0b0b06550f0c0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b
2b2b2b2b2b5d714dedf4ed10fd2b2b2b2b2b2b2b2b2b2b5d713c10fde4f6
3c003fede43fedfd5de43fede43f3c3130015d71005d7117171617163332
363736270623220235341236333217353311140606232226131416333236
35342623220666af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0
beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd9801018c9880
fc6af8cf78ab032ad1c0bfccc3c6c300>PBAAAA+ArialMT AddT42Char 
2 3158 75 <00010087000003e805ba00140161b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe0403a1719341708110c1114030501
000f1c0507140b0a0c250940333634ff0901c0090116400b0b0255164010
10025509281010025509140e0e025509b8ffec40110d0d025509040c0c02
55091a0b0b025509b8fff6400b0b0b065509141010065509b8fff8400b0d
0d0655090a0f0f065509b8fff6b60c0c0655094e16b8ffc04017343634b0
16f016027016a016b016ff1604160214250100b8ffc04010333634f00001
00002000d000e0000400b8fffab41010025500b8fffa40170e0e02550004
0c0c025500080b0b025500040b0b065500b8fffa40160f0f065500020c0c
065500020d0d0655004e154750182b10f62b2b2b2b2b2b2b2b5d712b3cfd
3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b5d712bed003f3c3fed3f1139
113901123931304379400e060e07250e060c1b010d080f1b01002b012b2b
81002b5d2b012b33113311363332161615112311342623220606151187b4
7ec076ae4bb4756b508d3c05bafdf2925da49cfd5f02a1877b538e7dfdbb
>PBAAAA+ArialMT AddT42Char 
2 3578 76 <000200880000013c05ba0003000700cd405e09360b0b02554f099009a009
b009c009df09f0090700091f09700980099f09b009c009df09e009ff090a
1f09010001070402030906037e0100060506040a0607250500049f04a004
b004c004e00406c004f0040200042004d004e0040404b8fff8b410100255
04b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8
ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e0847
50182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed0111123939
111239393130015d72712b133533150311331188b4b4b404ebcfcffb1504
26fbda00>PBAAAA+ArialMT AddT42Char 
2 3822 78 <00010088000003f805ba000b0261401b060c0d0d0655070656065a09030f
0df305f60603090c1010025506b8fff4b40c0c02550ab8fff4b40c0c0255
09b8fff4b40c0c025503b8ffe840100d0d06555503770a02120620132134
08b8fff0b312273409b8fff0b41227341205b8fff0b312213409b8fff040
84122734060404050406370947040525062d0a580a7703750ada03e30607
a60601230626072508390638093f0d4f0d59045906580759097d04790599
09c606d204d606e406e907f706f90815120a0a0503030402060607090908
0a0a050908082507061407070603040425050a1405050a0a090603040801
02000405060708080b0b000a04b8010f400905040c0c0655052208b8010f
402120073f070207100c0c0655071a900d010d0b2500022501019000013f
004f000200b8fffe40310e0e025500100d0d025500100c0c0255000a0b0b
025500120b0b065500120c0c065500080d0d065500190c0de1214766182b
2b4ef42b2b2b2b2b2b2b5d713c4d10ed10ed4e1071f62b5d4dedf42bed00
3f3c103c103c3f3c3f3c11173987052e2b047d10c487052e182b0e7d10c4
0710083c083c0310083c083cb10602435458400d4b09011f098403020918
0d1134002b5d7159313001435c58400a092c1d3909081d1d3c06b8ffdeb2
1d3906b8ffd4b2203906b8ffd4b121392b2b2b2b2b595d00715d0171002b
2b435c58b90006ffc0b2213903b8ffc0b2163903b8ffdeb2103906b8ffde
b2103903b8ffdeb20c3903b8ffdeb10b392b2b2b2b2b2b59012b2b2b435c
584012dd040108141639090814143c090814143c06b8fff6b2183906b8ff
ecb11b392b2b2b2b2b015d59005d2b2b2b2b2b015d712b33113311013301
012301071188b401aae9fe6a01bfdefea17f05bafcbc01b0fe76fd64021f
7afe5b00>PBAAAA+ArialMT AddT42Char 
2 4486 79 <000100830000013705ba000300e3b605360b0b025505b8ffc0b337383405
b8ffc0b334353405b8ffc0b330313405b8ffc0b322253405b8ffc0402515
17340f051f059f05df05044f05df05f005031f0570058005ff0504010000
0a0203250100b8ffc0b337383400b8ffc040153335349f0001c000f00002
00002000d000e0000400b8fff8b41010025500b8fffa401d0e0e02550004
0c0c0255000a0b0b025500140b0b065500081010065500b8fffeb40d0d06
5500b8ffffb40c0c065500b8fffc400a0c0c0655004e044750182b10f62b
2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130015d71722b2b2b2b2b
2b3311331183b405bafa4600>PBAAAA+ArialMT AddT42Char 
2 4738 81 <00010087000003e6043e0016017d40130503061302a810b810e303e713f0
03f6130604b8fff0403c0b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e2418401010025518400b0b02550b2810
1002550b140e0e02550bb8ffec40110d0d02550b040c0c02550b220b0b02
550bb8fff4400b0b0b06550b14101006550bb8fff9400b0d0d06550b0a0f
0f06550bb8fff640120c0c06550b40333634ff0b01ff0b010b4e18b8ffc0
401a343634b018f018027018a018b018c01804180302331516250100b8ff
f6b41111025500b8fffab41010025500b8fffa40170e0e025500040c0c02
55000a0b0b025500040b0b065500b8fffa40110f0f065500020c0c065500
040d0d065500b8ffc04012333634f0000100002000d000e00004004e1710
f65d712b2b2b2b2b2b2b2b2b2b3cfd3cf43c105d712bf65d712b2b2b2b2b
2b2b2b2b2b2b2b2bed3c103c003f3c3f3fed113901123931304379401606
11090a080a070a0306102611060e1b010f0a121b01002b012b2b2a81015d
71002b5d71331133153633321616171615112311342626232206151187a2
75dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e6d4192
ccfdbc00>PBAAAA+ArialMT AddT42Char 
2 5192 82 <00020044ffe80427043e000d0019016bb615180d0d065513b8ffe8b40d0d
06550fb8ffe840730d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14241b400d0d02551b400b0b
025507b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b
0b065507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c0655
07b8ffc04013242534300701000710072007030731df1b011bb8ffc04049
1e2334301b011b0e24000c0e0f025500120d0d0255000c0c0c0255001c0b
0b0255000e0b0b0655000e0d0d0655000c1010065500160c0c0655004024
25341f003f000200311a3437182b10f65d2b2b2b2b2b2b2b2b2bed10712b
5df65d5d2b2b2b2b2b2b2b2b2b2bed003fed3fed313001715d0071435c58
4009530553096205620904015d59002b2b2b2b1310373633320015140606
23220013141633323635342623220644a489c5db01167beb8bdffeedb9b2
8786b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca
>PBAAAA+ArialMT AddT42Char 
2 5642 83 <00020087fe690421043e0012001e0162408e0c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a0420400b
0b025520400d0d02550ab8ffe6400b0f0f02550a180d0d02550ab8fffab4
0c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f06550ab8ffe840230c0c
06550a74011333023312250000c001019001a001b001f001041f013f014f
010301b8fffc401d0e0e025501100d0d025501100c0c025501100b0b0255
010c0b0b065501b8fff6b41010065501b8fffc40160f0f0655010c0c0c06
5501120d0d065501191f473718012b4e10f42b2b2b2b2b2b2b2b2b5d7172
3c4d10fdf4e410fd2b2b2b2b2b2b2b2b5d71ed003f3fed3f3fed11391239
3130005d015d717200711311331536363332161615140206232226271103
141633323635342623220687a43a926888d06a75df7b5a8f2e11a67678ab
a77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbca
d700>PBAAAA+ArialMT AddT42Char 
2 6094 85 <00010085000002c6043e001100c9403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
900801082220130113022211250100b8ffc04010333634f0000100002000
d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c0255
00060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c06
5500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfde4
105df472e4003f3f3fed11393911393901111239390010c9870e7dc43130
005d72015d33113315363633321707262322060706151185a23e693f5b5e
3e42423b5e141e0426a171483aa727473f6072fdd400>PBAAAA+ArialMT AddT42Char 
2 6356 86 <0001003fffe803b1043e00300317407b042214223a094a09442456226522
7c098e098424a613ab2cc2030d09171a1817304b2cd617051b0255020210
32010a185c085c095c0a5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426
b4270f27262427242936245a0a590b64266428742374248024930a9c0c92
28972c9530a40aa90ca327a428b326c5261628b8fff4b40d0d065522b8ff
f4b40d0d065523b8fff4b40d0d065524b8fff4b40d0d065528b8fff4b40c
0c065522b8fff4b40c0c065523b8fff4b40c0c065524b8fff4b40c0c0655
1db8ffde40121e395a0827250c0a041a202615040b2e1d1ab802aa402219
2c0b0b02551f193f194f195f19af19cf19060f191f196f19df19041f198f
190219bd02550015000002aa0001ffc040140b0b025510014001021001d0
0102000110010201b8ffc0b314163401b8ffc040100e113401012e5c1d6c
1d021d1c150704b8fff4b40b0b025504b8ffe6b41010065504b8ffe64013
0f0f0655041c2e0b1f1a011a24194013183432b8ffc0402f0f0f02551918
0f0f025519180d0d025519160c0c025519201010065519200f0f06551910
0c0c065519160d0d065519b8025bb207242ab8ffc0b51c39d02a012ab8ff
e6b40c0c02552ab8ffe8b40f0f02552ab8ffe8b40c0c06552ab8ffeab60d
0d06552a1a32b8ffc04021272a346032c032023f32803202321001010124
00180d0d025500100d0d06550020b8fff4b40d0d025520b8fff4b4101006
5520b8fff440190f0f065520240f100b0b02550f160c0c02550f200d0d02
550fb8fffa40200f0f02550f0e0c0c06550f0c0d0d06550f22df00013f00
4f00020019313437182b4e10f45d714df42b2b2b2b2b2bed2b2b2b102b2b
ed724e105d712bf62b2b2b2b712b4dedf42b2b2b2b2b2b2b2b2bed72003f
ed2b2b2b3fed7112392f2b2b5d71722be410fd5d71722be4111239111239
0111121739313043794040272d1e2305142c261110121013100306220d20
1b000928071b01052d071b011e14201b00210e231b0022230d0c08290a1b
012827090a062b041b001f101d1b01002b2b103c103c2b103c103c2b012b
2b2b2b2a2b818181002b2b2b2b2b2b2b2b2b5d71015d72715d1337161633
323635342726272e02353436373636333216161707262623220615141716
1716171e02151406062322263fb20f897b7c78352593c6994f41382a9153
7dbd5a11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c6b726544
3d2318253249814e4779281f2b487b6718525c5237231c1d130a2433417c
5c5a9f57ac00>PBAAAA+ArialMT AddT42Char 
2 7292 87 <00010024fff2022a0599001700d8b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e0255
07b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8ff
f0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136
b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd3c10e4f43c003f
ed3f3cfd3c1139123911333310c93130015d2b2b25170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>PBAAAA+ArialMT AddT42Char 
2 7584 92 <00010021fe5103ee0426001a01f7b10202435458401d0a140f030b031c19
0f12060b061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a
1910dd1a18cd003f3f3fed12173931301bb30f1c010fb8ffde406d1c3928
14560faf0a03400d400f020f202830341020283034070c0912160d181227
0b270c270d360c360d350e99110b28122813481659125913591569126913
69157906760d79117a147a15850d8a118c128c138914980aa80bbc10bb11
ba14ea0ae714f50dfd10f914ff1c1e12b106024354584016130b1c1b040f
440f840f030f190b031c190f12060b06003f3f3fed1112395d0111123939
1b40370f0f0c101112120a00031914131325120a1412120a0f0c0f110c25
0b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021cb802
3fb50f1340124014b80254400b3f124012025f12bf120212b80142b60f01
2200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020cb801
42b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a1910
ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c103c
87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c44bb0
0e534bb018515a58bb000cffe8000bffe80138385959313001435c58b900
14ffdeb637390a2237390eb8ffe8b51539112215392b2b2b2b595d712b2b
00715d2b015d591327163332363736373637013313161736371333010607
060623227f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c412430
7c5634fe67a91028241b6b0f1d0428fd9975817c76026bfbc8af42595300
>PBAAAA+ArialMT AddT42Char 
2 8184 139 <00030003ffee05e805d3000f001f003a01334020941294169b1a9b1ea603
a80ba80db930d412d416db1adb1ed533d6360e700820b802abb32187242f
b802abb3302e012ebb0260002b0038026240104f24010f246f247f24ef24
0424940832b80262400b002b8f2bff2b032b940018b80262b2080b10b802
62b200032fb80262b22ed320b80262b321880435bd026200270264000c00
1c0262b3041a3c14b80262b50c193bb37a182b4e10f44ded4e10f64ded10
f4ed10f4edf4ed003fed3fed10f45ded10f45d71ed10fd5de410fde43130
437940543337252a011f292612250e2602251e2616260a2506261a25332a
351f003725351f00110f1421001f011c2101170914210019071c21013428
321f013626381f00130d1021011d03102101150b1821001b051821002b2b
2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b818181015d0132041215
140204232224023534122417220402151412043332241235340224131706
06232226353436363332161707262623220615141633323602f6be016aca
c7fe99c4c4fe99c8cb016abe9ffed3aaa7012ca3a3012ca6a9fed2547b1e
c38bb0dc64b97785b020771e754f73958d705a8805d3c3fe95c5c3fe98c7
c70168c3c5016bc37da3fed1a4a3fed5a7a7012ba3a4012fa3fd10247d95
e4ca84c3637f6d1d4a4fa499999d6800>PBAAAA+ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/space 3 def
/colon 29 def
/C 38 def
/N 49 def
/R 53 def
/a 68 def
/e 72 def
/g 74 def
/h 75 def
/i 76 def
/k 78 def
/l 79 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/y 92 def
/copyright 139 def
end
PBAAAA+ArialMT /Encoding get
dup 32 /space put
dup 58 /colon put
dup 67 /C put
dup 78 /N put
dup 82 /R put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
dup 169 /copyright put
pop
end
%ADOEndSubsetFont
/KVHPZJ+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/KVHPZJ+ArialMT*1 
[32{/.notdef}rp /space 25{/.notdef}rp /colon 8{/.notdef}rp /C 10{/.notdef}rp /N 
3{/.notdef}rp /R 14{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g 
/h /i /.notdef /k /l /.notdef /n /o 
/p /.notdef /r /s /t 4{/.notdef}rp /y 47{/.notdef}rp 
/copyright 86{/.notdef}rp]
KVHPZJ+ArialMT nf
KVHPZJ+ArialMT*1 [7.5 0 0 -7.5 0 0 ]msf
67.0335 806.665 mo
(\251 Copyright: )
[5.5275 2.085 5.415 4.17 4.17 3.75 2.49744 1.665 4.17 4.17 2.085 2.085 
0 ]xsh
110.909 806.665 mo
( )sh
54.7892 817.665 mo
(Norsk Regnesentral)
[5.415 4.17 2.49744 3.75 3.75 2.085 5.415 4.17 4.17 4.17 4.17 3.75 
4.17 4.17 2.085 2.49744 4.17 0 ]xsh
51.079 640.324 mo
124.78 640.324 li
124.78 78.143 li
51.079 78.143 li
cp
1 .878202 .154513 .0513008 cmyk
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT Initial
ct_T42Dict begin
-0.625 -0.375 2 1.016
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Arial-BoldMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32115d5e9f000000cc000000606376
7420fb3ea3da0000012c0000075a6670676d08e8ba2800000888000005d7
676c7966f47dc92c00008f28000007cc68656164e7a33daa00000e600000
003668686561127e162600000e9800000024686d747859bec00c00000ebc
000035746c6f6361006607e000004430000035786d617870154604760000
79a8000000206e616d6597ff067c000079c80000038b70726570f14ae516
00007d54000011d267646972000000000000000000000000000303d402bc
00050008059a05330000011b059a0533000003d1006602120805020b0704
020202020204e0002affc00078430000000900000000544d432000200020
fffc05d3fe510133073e01b2400001ffffff0000042605ba000000200004
05ba001c05ba001c05a7001c0426001c0000ffe40000ffe40000ffe4fe69
ffe405ba001cfe69ffe402ea0000011d0000011d000000000000000000b2
00ac00d70128012000b301fa001700f8011901310049000400f7000300af
00fd00950014005400960112002400160055004901040119012b008c019b
ff76ffe9003d009200a2ffb70182ffaa0016008f00c600f8001c00de0401
0037004e00550055006500e903e50059ff9a00080087000b003b00520116
006100d600d600f500000093009400be017cfff80004001400820092003c
00410041ffc1fffc002a008c049005d809b5009100bb0106ff63ff69001e
0022008a022bffd6ffdf0026005900a300ac0104012b01c004480021006b
00850098011903c6006b009500a400fe010c025d034305bf000000490056
006e0077008a00aa00ca0112015005d805f0ff7bffe70006001300280061
006900e90135014d02a5040cff3effda005b00b900c801190119011901c0
045b04a7055bfe3fff9dffc2001500b7010a01bc01c10532058efd81ffa1
ffae000c00260031003d004e00560062008300c100c900f100f2027fff7f
00480053007700c5011d01200126012801d60219027e027e03d3002e0041
005d006b0075009f00b000b200ba00bb00bd00d600db00e000e50114011b
014a0162019101f2020c026402cf039b03b403d4040104a9001600230025
002a007400a500b600cc00cd00cf0105012001300150016a016f0197019d
01e002b002ec02f70408048304fb04fd0526fee0fefbff4efff50018001a
004c007a007f009100a300b300b400ce00d500f200f300f6011001380168
01a101b001e001ec02090222024f0270029602a502ad034e039103c10435
0442046b04cd04da0586058b076107fefca6fe93feadfed1ffb7ffd10003
000e00180026004600690081008f00a500bf00d300d500d900dd00e20119
012b0138013b015a015e016801730188019401ad01c501d101ea01f20200
020002000222023b0244024f026f0272027e02820293029402a502cf02cf
02d002da02dd02eb02f5030503220336037103a103b003b803d003e60410
0426042e0431044f045a04ff053205320547055305a805ab05c205f0063c
0664067006e80782078408ccfd2afddefe00fe68feb0feb3ffaa00080059
007a0091009e00a200af00b400bb00ca00cc00ce00d900e000f40114011a
01210127012b01390146014b014d0157015c01650182018701920198019b
01a201ae01c501c501d102070222022b024102530261026502840287028d
02b402b402ba02c902d602d802ed02f503170323032b03310349035a035b
036e03710374037e03840391039103aa03cf03d303e703e803ed04080417
041e0475047a049904a704b404d1054c056d056d05a205bf05c005d105fc
05fc0602061a061c062f066a06a806e2070607360750078907d407f30870
011c012a011a01200000000000000000000000000219000b001e02aa0214
047f01ed0000001d0104000f0091002b01880153011201f3003f03fe0168
010e047f01ed036e03150219041300000000064004b00000027401bb0035
01c5007f06020301000004e000b201dc02e004c3023d00d50160011904a7
036e05ca022100ab0426009002bc02bb014200b4023c0256029c030001e5
01a800e5006b00780094016b017300ab01ed013a017d0137017f00d40216
03530184003cffa202040109014901f0006e031500810464005e00000000
0000000000000000000000000000000000000000000000000000013900dc
00e9fe9e040d047c012b00b80096005900ac00df01a900fa0105ffec0017
0003005500610004008c00a3008500280120005d00d6007f012601190104
016c06cf00b4010600000737063e047a00f000f900e905ba042604420000
ffe7fe69049e04e3ff37ff2d01200105012000a800740068004700f200e5
00d900bd00a800680047005c0048000a0028003200410050005a0064007d
00870091ffb0ff9cff83ff79ff6f00cb012000fa012c01fa01a000d500b8
005c003c00c800c8008f00d9018b00b30047000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000fe6400c000ea01180125013203b003ed0576
059005aa05b405be05cd063100780084009b00cc00e200f4010a01200163
00d100ea00f7010801420019002c00340041003800480058006c025903bd
0043011a007000d30028003700420050005a0064007300780082008c009c
00a500bd00ce00f00110015c00be00d801020117012c016300ea01080041
004b0055005f007300a60109018301b300410064001e002a00eb00fa010e
01380274002c00400082009600b600c000cc00dc00e600f000ff010a0120
012c013b01440156016300f70057006401100136005001b10000ffb60039
004e004403cc00e5002401100042012201a400f0006000e0000e001d0039
05e30102002cfe4eff38026903bd011600ff000e00a00054001b003d0171
0041000f005000fd0015014f0035fe52002c00d3010304b001d200b600c0
00990265ff870377fe6c00cb00a9005c0040047607440000404154403f3e
3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f
1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b09051582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845
441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d
2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062
602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c
45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a
45186920b01723448a8a8720b0c05158b0112bb0172344b0177ae41b21b0
177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b0
02855958b00185592d2c20b0032545b019234445b01a23444565234520b0
0325606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ff
e0001a45208a54582321b03f1b235961441cb114008a5279b31940201945
208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f432343
0b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b
2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349
b04060b0206320b000525823b002253823b002256538008a63381b212121
212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b005
251023208af500b0016023edec2d2c01b005251023208af500b0016123ed
ec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161
0110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a
2d2c352d2c76b8023623701020b802364520b0005058b00161593a2f182d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826
b00826b00826b008260f10161345683ab001162d2cb4000100000015b008
26b00826b00826b008260f1016134568653ab001162d2c4b53234b515a58
20458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b51
5a58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b0035158b00425b00425012046b0106048
2046b0106048590a21211b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b8fff060482046b8fff060
48590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b5323
4b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b212159
2d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c
462346608a8a462320468a608a61b8ff8062232010238ab902a702a78a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b202020243604259b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b2021002436042595959592d000001000000053852761b
cde45f0f3cf50819080000000000a2e33c1d00000000d2947f1bfafafcfd
1000082400010009000100010000000000010000073efe4e00431000fafa
fa7a1000000100000000000000000000000000000d5d0600010000000000
023900000239000002aa00b803cb00700473001204730046071d005905c7
005a01e7005c02aa006b02aa0043031d001c04ac00550239007502aa0073
023900930239fffd04730056047300a2047300330473004d047300260473
005b0473005704730057047300530473004102aa00c902aa00aa04ac005f
04ac005504ac005f04e3006a07cd003d05c7000005c7009605c7006105c7
00940556009504e300970639006205c700960239008c0473002305c70099
04e3009d06aa009105c7009806390059055600950639005905c700960556
004a04e3002c05c700930556ffff078d0007055600000556fffd04e30016
02aa00920239fffd02aa002604ac00730473ffed02aa002a0473004904e3
00870473005504e300540473004102aa001804e3005404e3009202390093
0239ffa20473008902390093071d007e04e3009104e3005204e3008b04e3
005b031d00870473003002aa001f04e3008d0473000b063900090473000c
0473000e04000022031d003c023d00b0031d002d04ac004305c7000005c7
000005c700610556009505c700980639005905c700930473004904730049
047300490473004904730049047300490473005504730041047300410473
004104730041023900920239ffe90239ffcd0239ffd004e3009104e30052
04e3005204e3005204e3005204e3005204e3008d04e3008d04e3008d04e3
008d0473004403330056047300540473000d0473003b02cd00420473fffe
04e3008b05e5fff705e5fff7080000d802aa00bb02aa0005046400310800
ffaa0639003f05b40098046400320464003c0464003c04730001049c006f
03f4002c05b4007a069600a1046400000231000002f6002502ec001a0625
0037071d005804e3005704e3006502aa00c304ac0055046400540473ffec
0464001f04e5001a047300600473006a080000c905c7000005c700000639
005908000048078d00580473fffc08000000040000840400006902390098
023900720464003103f4002f0473000e0556fff70156fea90473ffe002aa
004b02aa004b04e3001f04e3001f04730044023900930239007504000071
0800000105c700000556009505c7000005560095055600950239006a0239
ffae0239ffbf0239ffc106390059063900590639005905c7009305c70093
05c700930239009302aa000302aafff302aa001302aa001a02aa00cd02aa
009102aa002602aa006002aa003902aa000304e3000a0239000a0556004a
0473003004e3001604000022023d00b005c7fffd04e300530556fff70473
000e0556009504e3008b04ac005504ac006d02aa005b02aa001902aa0028
06ac005c06ac005c06ac0028047300000639006204e300540239008c0556
004a0473003005c700610473005505c700610473005504e30054046bffed
02aa00c805c700000473004905c700000473004905c7009405c0005105c7
fffd0556009504730041055600950473004104e3009d0239007904e3009d
0315009504e3009a03d5009305c7009804e3009105c7009804e300910639
005904e3005205c70096031d008705c70096031d00500556004a04730030
04e3002c02aa001f04e3002c03d5001e05c7009304e3008d05c7009304e3
008d04e300160400002204e300160400002204cf009a0639005606910056
04eb004e04da004e03cc004e0579004e0392003005b9004e046bffed04d5
00b8032b004f08c000290800004f040000990800004f040000990800004f
040000980400009807d5016a05c7008f04ab005504d5009d04ac005504d5
022204d5010505abffe9050001c905ab027e05abffe905ab027e05abffe9
05ab027e05abffe905abffe905abffe905abffe905abffe905ab01c005ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905ab02d605ab006605abffea05d5ffff04d500920800000007eb0130
07eb012007eb013007eb012004d500b204d5008004d5002a082b0198086b
01b807550010060000f40600006f0440003a0540003704c0003f04150040
04000025060000550647008c0473009005abffc701eb008d03d500860715
002303e9001804d5009202d6005c02d6005c04d500b202d6004d05c70000
0473004905c700610473005505c700610473005505560095047300410556
00950473004105560095047300410639006204e300540639006204e30054
0639006204e3005405c7009604e3009205c7000504e300190239ffba0239
ffbb0239ffda0239ffda0239ffe10239ffe2023900480239004704730023
0239ffa205c70099047300890473008d04e3009d0239ffed05c7009804e3
009105c9009c04e3008e0639005904e300520639005904e3005205c70096
031d002a0556004a0473003004e3002c02aa000705c7009304e3008d05c7
009304e3008d05c7009304e3008d05c7009304e3008d078d000706390009
0556fffd0473000e0239008d05c70000047300490800ffaa071d00580639
003f04e3005702aa00c9078d000706390009078d000706390009078d0007
063900090556fffd0473000e0239009502aaffd70473000d04cd005a06ac
005c06ac002906ac003006ac002f02aa00bc02aa002602aa00bb03b8fff4
05c7ffe806d3ffbb073fffbb03caffbb0699ffa6076bffc806b4ff9c0239
ff2905c7000005c7009605c000000556009504e3001605c700960239008c
05c700990556000006aa009105c70098052600660639005905c7009a0556
009504cd005a04e3002c0556fffd0556000006790056066a00620239ffcc
0556ffff04eb004e039c004e04e3008e0239008204a8006c04e200900473
000f03af004e04e3008e0453004e023900930476008e0473000f04e50090
0473000b0390004e04e3005204f300760429004e04a80076049b00110607
007606c2004e0239ffcd04a8007604e3004e04a8007606c2004e055a0097
0715002f048900a405b100580556004a0239008c0235ffca0473002308c0
001a0880009d0700003704e2009a04fa000005c0009905c7000005c0009b
05c70096048900a405b3fffa05560095073b00170503002c05c0009905c0
009904e2009a059d002006aa009105c700960639005905c0009905560095
05c7006104e3002c04fa000006d400590556000005d8009a059f007d080a
009a0827009a06f5001a07d5009d05c0009b05b100570840009605c00004
0473004904f1005c04eb0096035500880514fff90473004105acffff03fa
001804eb008c04eb008c040100880515001905eb009b04d5008804e30052
04d5008804e3008b0473005503eb00150473000e070000540473000c04eb
008904a5007206ab008c06c0008d05d5002806d5009504eb0099046b0038
06d5009104abfffb0473004504e3000003550088046b0051047300300239
00930240ffd00239ffa207c000180740008c04e300000401008804730012
04d5008803e50096039300880800004108eb00a306200030000001010000
001e0000003100000031000001010000007f0000007e0000008c0000008c
000001010000001000000101000001210393007d0000008c026500c80000
03020000ff0102aa00c904a90059049b004103a7000a0466003204ea0082
022f0087034e005a04ed00870503007d022f0087042c002803ed004b03f8
004104e30087050a0037022f00870316004b04e800500459000a04c00064
04b2006403ff000a0418000a04950082042c002805b8005a0563002d045e
0087045e0087045e00870236005004090050068b0087022fffac042c0028
042c002803f8ff1603f8ff160479003205b8005a05b8005a05b8005a05b8
005a04a9005904a9005904a90059049b004103a2000a0466003204ea0082
02950000038100000503007d02950000042c002803ed004b03f80041050a
00370316004b04e8005004c0006404b200640418000a04950082042c0028
05b8005a0563002d022f0087049b004103ed004b04b2006404db00410000
ffdc0000ff250000ffdc0000fe51028d00ab028d00a002da004303c0007e
0196ffba0000004600000046000000460000004600000048000000460000
004600000046047e0188047e0150047e0104047e009e047e012d047e00ea
047e00d5047e009c047e00bc047e00ee04350085028d00c1043500b30600
01000600010002be005806000100047e00a5047e00bd047e00de06000100
060001000600010006000100060001000000004606000100060001000600
0100060001000600010006000100060001000600010004e6ffba06000100
06000100060001000532003905320039022cffba022cffba060001000600
01000600010006000100049e0034047800300430ffba0430ffba0376000a
0376000a060e00290708002902e2ffba0456ffba060e00290708002902e2
ffba0456ffba05280097046f000a03520003060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100000000300000004600000046
000000400000004606000100060001000000ffdc0000fe510000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ffdc0000ff160000ffdc0000ff200000ffdc0473002d080000000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100028d007f028d00670600
010005a0002e03c0007e01e800000207ffc301bc005e01e0fffa039c0006
039c000601bc005e01e0001a05280097049e0011022cffba022cffba01bc
008801e0001a0532003905320039022cffba022cffba02be003603520003
0532003905320039022cffba022cffba0532003c0532003c022cffba022c
ffba049e0034047800300430ffba0430ffba049e0034047800300430ffba
0430ffba049e0034047800300430ffba0430ffba02be006902be006902be
006902be00690376000a0376000a0376000a0376000a0732004007320040
04deffba04deffba073200400732004004deffba04deffba088000400880
0040062cffba062cffba0880004008800040062cffba062cffba0430ffba
0430ffba0430ffba0430ffba0430ffba0430ffba0430ffba0430ffba0454
003403c000460454ffba02e2ffba0454003403c000460454ffba02e2ffba
0610002f0610002f0270ffba0298ffba04e6002704e600270270ffba0298
ffba045400290454002902e2ffba02e2ffba039c0023039c002301e0ffba
01e0ffba02e2002102e200210352ffba0352ffba0454003e0454003e022c
ffba022cffba02be00580352000303c0ffba039cffba039c0006039c0006
05280097046f000a05280097049e0011022cffba022cffba0454000004c4
000003e400220454001a03e400220454001a03e400220454001a06000100
060001000000004600000046060001000600010006000100000000460000
004606000100060001000000004800000046060001000600010006000100
000000460000004600000046000000460000004000000030060001000000
004600000046060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100028d00ca028d00c7028d00c6060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010002be0069
0100ffba0800ffba1000ffbb06d3005905b0005206a3009305cb008d0000
fd880000fbc10000fc5f0000fe310000fcad0000fd550000fe260000fdf1
0000fd180000fc690000fd950000fbe00000fc700000fed40000fecd0000
fea0041b007806ac005c06ac00190000fe450000fd550000fda60000fc5f
0000fe250000fd180000fbe00000fafa0000fb360000fc700000fb870000
fb9b0000fcce0000fc540000fbc30000fc940000fbf50000fdb00000fe59
0000fd7e0000fc820000fd340000fe500000fe460000fcd10000fd3e0000
fd020000fc3a0000fce90000fc260000fc070000fc2f0000fb9e0000fb76
0239009305c700000473004905c700000473004905c700000473004905c7
00000473004905c700000473004905c700000473004905c7000004730049
05c700000473004905c700000473004905c700000473004905c700000473
004905c70000047300490556009504730041055600950473004105560095
047300410556009504730041055600950473004105560095047300410556
00950473004105560095047300410239006a0239005d0239008c02390093
0639005904e300520639005904e300520639005904e300520639005904e3
00520639005904e300520639005904e300520639005904e3005206d30059
05b0005206d3005905b0005206d3005905b0005206d3005905b0005206d3
005905b0005205c7009304e3008d05c7009304e3008d06a3009305cb008d
06a3009305cb008d06a3009305cb008d06a3009305cb008d06a3009305cb
008d0556fffd0473000e0556fffd0473000e0556fffd0473000e05c70000
047300490239ffca0239ffca0639005904e3005205c7009304e3008d05c7
009304e3008d05c7009304e3008d05c7009304e3008d05c7009304e3008d
0000fef90000fef90000fef40000feef0489fffd03550007073b001705ac
ffff04e2009a0401008804e2009a0401008805c7009604d5008804730001
047300120473000104730012055600000473000c059f007d04a50072059f
009c04e3009205cf00590473004c0639005604e3005205320039022cffba
0270ffba0298ffba04e60027022c0065022c0016022c0016022c0011022c
0043022cffd20000fef00000000f0000fff502aa009002aa009000000000
0000005e0000005e0000ffcb01bc000f01e0ffbf01bcfff501e0ffcd01bc
001d01e0000901bc008801e0001a039c0006039c0006039c0006039c0006
05280097046f000a0532003905320039022cffba022cffba053200390532
0039022cffba022cffba0532003905320039022cffba022cffba05320039
05320039022cffba022cffba0532003905320039022cffba022cffba0532
003905320039022cffba022cffba0532003905320039022cffba022cffba
049e0034047800300430ffba0430ffba049e0034047800300430ffba0430
ffba049e0034047800300430ffba0430ffba049e0034047800300430ffba
0430ffba049e0034047800300430ffba0430ffba049e0034047800300430
ffba0430ffba02be004f02be004f02be006902be006902be006902be0069
02be004f02be004f02be006602be006602be006902be006902be006902be
006902be002f02be002f02be002202be00220376000a0376000a0376000a
0376000a0376000a0376000a0376000a0376000a0376000a0376000a0376
000a0376000a0376000a0376000a0376000a0376000a0732004007320040
04deffba04deffba073200400732004004deffba04deffba073200400732
004004deffba04deffba0880004008800040062cffba062cffba08800040
08800040062cffba062cffba0430ffba0430ffba0454003403c000460454
ffba02e2ffba0610002f0610002f0610002f0270ffba0298ffba0610002f
0610002f0270ffba0298ffba0610002f0610002f0270ffba0298ffba0610
002f0610002f0270ffba0298ffba0610002f0610002f0270ffba0298ffba
04e6002704e6002704e6002704e60027093e0032093e00320740ffba0740
ffba060e00290708002902e2ffba0456ffba045400290454002902e2ffba
02e2ffba045400290454002902e2ffba02e2ffba045400290454002902e2
ffba02e2ffba060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba060e00290708002902e2ffba0456ffba060e00290708
002902e2ffba0456ffba060e00290708002902e2ffba0456ffba039c0023
039c002301e0ffba01e0ffba039c0023039c002301e0ffb101e0ffb1039c
0023039c002301e0ffba01e0ffba039c0023039c002301e0ffba01e0ffba
0454003e0454003e022cffba022cffba0454003e0454003e0454003e0454
003e0454003e0454003e022cffba022cffba0454003e0454003e049e0034
047800300430ffba0430ffba02be005803520003031a001a031a001a031a
001a039c0006039c0006039c0006039c0006039c0006039c0006039c0006
039c0006039c0006039c0006039c0006039c0006039c0006039c0006039c
0006039c000605280042046fffd905280097046f000a022cffba022cffba
039c0006039c000605280097046f000a022cffba022cffba05280097046f
000a067f0044067f0045067f0044067f004501a800280000fe290000fe8c
0000ff250000ff230000fefa0000ff7a0000fe5908fc003208ad00320000
ffb50000ffb60000fef00000ff590000fe590000ff8c01b4000002f70000
0000fe850000ff0704cd00320000ff580000ff580000ff59073200400732
004004deffba04deffba0880004008800040062cffba062cffba04540034
03c000460454ffba02e2ffba03c0007e02e2002102be0058022cffba0290
ffba01f4002f01f4003b01f4001201f400b101f4006d060e002907080029
022f00870000fec803500000045e008703e4fff50454fff503e400220454
001a03e400220454001a03e400220454001a03e400220454001a03e40022
0454001a03e400220454001a047e0072047e00bd03e4000f0454000f04e3
001b06b1001e05c0009b04e3008705c0000a04e3000a05c7006905c70061
0473005505c7fffd06b3001e05c0005c04e3005404da004e055600660503
006f04e3ffac063900620518000207720092023900930239000705c70099
047300890239001b0473000f07ef009605c7ffad04e3008e063900560718
005905f300550641001e04e3008b05560095055600640473006304cd005a
02e1001e02aa001f04e3001802aa001f04e3002d066a006205c700930629
00000473000e04e300160400002204e3003a04e300590436002a04360039
047300330473005b03fa001e04a2001f04e3008b023d00b003fb00b004ad
005602aa00b80aaa009409c7009408e300540956009d071c009d04720093
0a3a009808000098071c00910473004c05c70000047300490000fefe05c7
0000047300490800ffaa071d00580639006204e300240639006204e30054
05c70099047300890639005904e300520639005904e3005204e3003a0436
00220239ffa20aaa009409c7009408e300540639006204e3005408430096
0552009505c7009804e3009105c700000473004905c70000047300490556
00950473004105560095047300410239ff370239ff2d0239fff40239ffe6
0639005904e300520639005904e3005205c70096031dffcd05c70096031d
008005c7009304e3006705c7009304e3008d0556004a0473003004e3002c
02aa001f049e002e0429004905c7009604e30092059f009c050c0052050c
005204e300160400002205c7000004730049055600950473004106390059
04e300520000fefd0639005904e300520639005904e300520639005904e3
00520556fffd0473000e0473004504e3005404e3008204e3008704730034
0473001404e3005404e300540473004c0641004c03fa004f03fa00180587
0018048a005202aaffc404e3005404e3005404b000520473000f04ce000f
04e3008a04e3009204e300920239001b0239006b033e004402a8000002d9
00140239009304d40093071d0085071d0085071d007e04e3ffa604e30091
04eb008c04e3005206ab005206c2004e05ff0052031dffe6031dffe6031d
ffe6031d0087031d0087031d0087031dffe604ab008a04ab008a04730030
02aaffc402aaffc402aaff9b0451001e02aa001902aa001f04e3001b04f8
004b04a8009104730012063900090473000f0491000f0400002205700022
0436002204360022047300420473005504730042047300550639005904eb
0096048a004f04b0005204d5008803ab001e04730014039e008804e3005b
0473004204730055083f00540789005409af00540682001f0446001f0698
001f06f4001806350093058a00930445001e0482008802f1003202f10032
018effe202040032020400000204000003000032042f000002e2000001e7
005c03cb007002390098023900750239009402aa00f302aa00f303000032
0300003204ac005f04ac005f04ac002a04ac002a02aa012102aa00bb02aa
002a02aa012102aa001302aa002a02aa00bb02aa00ca02aa00ca02aa00f3
02aa00f302aa00a602aa00a602aa00a602aa001302aaffe102aafffb02ed
0000012100320302003202ee000003000032031000960310009603100096
031000960310009602aa006202aa006202aa000302aa001d040000690457
009604570096045700960457009604570043045700430457004304570043
04570043031000430457002f0457002f0457002f0457002f0457002f0310
002f04570025045700250457002504570025045700250310002f0457001a
0457001a0457001a0457001a0457001a0310001a04570042045700420457
004204570042045700420310004204570096045700960457009604570096
0457004204570042045700420457004204570042031000420457002f0457
002f0457002f0457002f0457002f0310002f0457002f0457002f0457002f
0457002f0457002f0310002f045700260457002604570026045700260457
002603100026045700420457004204570042045700420457004203100042
045700960457009604570096045700960457004204570042045700420457
004204570042031000420457002604570026045700260457002604570026
031000260457002304570023045700230457002304570023031000230457
002f0457002f0457002f0457002f0457002f0310002f0457004b0457004b
0457004b0457004b0457004b0310004b0457009604570096045700960457
00960457004204570042045700420457004204570042031000420457001a
0457001a0457001a0457001a0457001a0310001a04570024045700240457
00240457002404570024031000240457002f0457002f0457002f0457002f
0457002f0310002f0457004e0457004e0457004e0457004e0457004e0310
004e045700960457009604570096045700960000feaf0000febf0000fdb5
0000fec80000ff780000feb10000ff3d0000fe6f0000feae0000ffce0000
ff660000fe6f0000fec80000fec80000ff680000ff680000ff6800000000
0000ff1f0000ff1f0000ff440000ff5f0000fe870000ffec0000ff9c0000
ff510000ff510000ff510000febf0000ff15000000000000feb10000ff3d
0000ff6b0000fef20000ff470000ffce0000fe870000febb0000feae0000
feae0000fec80000fec80000fea60000febf0000fdb70000febe0000fea6
0000febf0000fdb50000fe1f0000fee20000ff9c0000fe870000ff440000
feba0000ff230000ff9a0000fdb90000fe3b000000000000fea70000ff68
0000fe170000ff740000fe870000fe000000ff660000ff440000fea70000
fea70000fea70000ff030000ff520000fd1f0000ff530000ff530000ff53
0000feb10000feb00000ffa10000fe8c0000feb80000feaf0000fea20000
feba0000fdf40000ff190000ff2d0000fe8c0000fe8802aa00bb02aa002a
02aa00c804e2006704a8000a06290000080200000629000005ff005206c2
004e056900140639005904e3005205c700770473005504e30097039e0088
06030000043c001d066f000a04e2000a07ef0096071d0085059f007d04e3
008a059f009c04d7000a05560064055600640524001404d4000a05e10055
04a0004b040e0014038400280569001404f1005c047300550239ffa20639
005603d4005103d400510556009505c000990473004104eb008c0a3d0059
063a001406f4001a059f001b07ce008c065e0093055600000473000b0768
008c066700930679005606070076089e008c07d800930503004603fa0043
06790056060700760639005604e300520685ffff052c000b0685ffff052c
000b08f6005907cb005206840023051a00230a3d0059073500550000fe37
0a3d0059063a001405c700610473005504ac000f0000fea60000feb10000
ff8d0000ff8d0000fc2b0000fc4c05c0009904eb008c05c0001104eb001b
0556009504e3008b059f009c04c900880503002c03fa001804e200110401
000d0617001a04fc00280709009605b6008809020099075f008805c7003b
049f003405c700610473005504e3002d03eb001506d2002c05830015059f
007d04a5007206da000a056d000a06da000a056d000a0239008c073b0017
05acffff059d009a04c80088059d00200515001905c7009604d5008805c7
009604d50088059f007d04a5007206aa009105eb009b02aa001a05c70000
0473004905c70000047300490800ffaa071d0058055600950473004105cf
00590473004c073b001705acffff0503002c03fa00180503002c04360022
05c0009904eb008c05c0009904eb008c0639005904e300520639005604e3
005205b10057046b003804fa00000473000e04fa00000473000e04fa0000
0473000e059f007d04a5007207d5009d06d5009505c0005e04e30054083e
005e077a005407ad004606c4004305430046044a0043081a002007a50019
08430096076600880639006204b000520620002d059b00150000ff430000
fec90000ff770000ffb00000ff470000ff560000ff740000fed70000feac
000000000000ff520000ff56000000000000feac0000fd9a000000000000
ff6a0000ff7c0000ff690000ff560000feac0000ff7f0000ff560000fdef
0000ff430000ff690000ff7c000000000000fdae0000ff8c000001020000
feef0000feef0000fefd0000fef90000ff530000fef80000fef905c70000
0473004905c7009604e3008705c7009604e3008705c7009604e3008705c7
00610473005505c7009404e3005405c7009404e3005405c7009404e30054
05c7009404e3005405c7009404e300540556009504730041055600950473
004105560095047300410556009504730041055600950473004104e30097
02aa00180639006204e3005405c7009604e3009205c7009604e3009205c7
009604e3009205c7004e04e3003b05c7009604e300920239ffd20239ffd2
0239001b0239ffce05c700990473008905c700990473008905c700990473
008904e3009d0239009304e3009d0239ffeb04e3009d0239ffdd04e3009d
0239ffcb06aa0091071d007e06aa0091071d007e06aa0091071d007e05c7
009804e3009105c7009804e3009105c7009804e3009105c7009804e30091
0639005904e300520639005904e300520639005904e300520639005904e3
00520556009504e3008b0556009504e3008b05c70096031d008705c70096
031d008705c70096031d008705c70096031d00590556004a047300300556
004a047300300556004a047300300556004a047300300556004a04730030
04e3002c02aa001f04e3002c02aa001f04e3002c02aa001f04e3002c02aa
001f05c7009304e3008d05c7009304e3008d05c7009304e3008d05c70093
04e3008d05c7009304e3008d0556ffff0473000b0556ffff0473000b078d
000706390009078d000706390009055600000473000c055600000473000c
0556fffd0473000e04e300160400002204e300160400002204e300160400
002204e3009202aaffde063900090473000e047300490239008d04eb004e
04eb004e04eb004e04eb004e04eb004e04eb004e04eb004e04eb004e05c7
000005c7000006f3fff206f3000006f3fff206f3000006f3004306f30043
03cc004e03cc004e03cc004e03cc004e03cc004e03cc004e061efff2061e
000007aefff207ae000007aefff207ae000004e3008e04e3008e04e3008e
04e3008e04e3008e04e3008e04e3008e04e3008e068ffff2068f0000081f
fff2081f0000081ffff2081f0000081f0014081f00140239009002390090
0239ffb60239ffc40239ffde0239ffec0239ffb30239ffc00301fff20301
00000491fff2049100000491fff204910000049100140491001404e30052
04e3005204e3005204e3005204e3005204e30052069dfff2069d00000855
fff20855000007c9fff207c9000004a8007604a8007604a8007604a80076
04a8007604a8007604a8007604a800760682000007fe00000862000007ae
fff306c2004e06c2004e06c2004e06c2004e06c2004e06c2004e06c2004e
06c2004e06cefff206ce00000886fff20886000007fafff207fa000007fa
fff307fafff304eb004e04eb004e03cc004e03cc004e04e3008e04e3008e
0239ffe70239008d04e3005204e3005204a8007604a8007606c2004e06c2
004e04eb004e04eb004e04eb004e04eb004e04eb004e04eb004e04eb004e
04eb004e05c7000005c7000006f3fff206f3000006f3fff206f3000006f3
004306f3004304e3008c04e3008c04e3008c04e3008c04e3008c04e3008c
04e3008c04e3008c068ffff2068f0000081ffff2081f0000081ffff2081f
0000081ffff3081ffff306c2004e06c2004e06c2004e06c2004e06c2004e
06c2004e06c2004e06c2004e06cefff206ce00000886fff20886000007fa
fff207fa000007fafff307fafff304eb004e04eb004e04eb004e04eb004e
04eb004e04eb004e04eb004e05c7000005c7000005c7ffd105c7ffdd05c7
000002aa00dc02aa00ca02aa00dc02aafff302aafff304e3008c04e3008c
04e3008c04e3008e04e3008c06e6000006e60000075700000757000005c7
009602aafff202aafff202aafff30239ffe50239ffdb0239ffce0239ffce
0239ffc20239ffbb0239ffe80239ffde03c9000003c9000002aa000002aa
000002aafff304a8007604a8007604a8007604a8007604f3007604f30076
04a8007604a800760556fffd0556fffd06e6ffd8074affdd061e000003b8
fff403b8fff402aa002a06c2004e06c2004e06c2004e06c2004e06c2004e
0765ffd1069dffdd0796ffd106ceffdd066a006202aa00bb02aa00dc0473
000a05c7006105c70061071d007e05c7002109cd0096078d000705c70020
04e3002d08b000140400003004c100660000ff530000ff530000ff530000
ff530239001b0239ffa2047300000556001206b3005403fe005706ab0091
040c001f05d6ffe605d6ffe602aa008402aa008402aa00c902aa00c902aa
009102aa002a02aaffc502aaffc302aafff302aa00c902aa00a902aa00a9
02aa00a902aa00a9032e001e032e001e02aa003a0000ff730000ff9d0000
fec80000ff230000ff720000ff720000fee70000ff9d0000ff530000ff53
0000ff530556009504e3008b04b5000006350000071d006104eb000f0473
0055049900910499001b0401008c03fa001802390093040f00490476008e
039e000e05eb009b04eb008c04e300520473003404f1005204f1005204f1
0021078d00540492004b04e3005304e3005304e9008c04abfffb04abfffb
03eb001504a8007604e300510624005104e000510473000b063900090400
002203df002203f2004b04ec0014035500880473001204d5008804e9008c
060700760515001903e300000591000003a2003203a2000003a300320355
00320355003204030032037c00320172005502de003203b00032031e0032
04220032037700320378003204260032037a0032035b003203ac00320377
0032037b00320514000003050032030500320321003204b6003203210032
03210032030200320302003202cf003202cf0032032000320121003202ca
00320484003402f2003203480032030a0032034900320349003203200032
01bc000a02f20032034200320484003202e90000034c000a031b003202e9
00000343003203da003203080000012100320204003202f2003202e90000
031b003202e900000342003203da00320308000005ed00460a9800460613
00460689ffba0541ffba01e9001e045400100000ff0d0000ff350000fece
0000feb70000fec90000ffc70000ff4f0000ff9e0000fef002be006902be
00690376000a0376000a03c0ffba039cffba03c0ffba039cffba05c80039
05920032061600820519004b05240041060f008705580028068f002d04ac
00550000fe3b0000fe660000fe680473fffc0400008403d5ffba01e0ffba
01e0ffb101e0ffba01e0ffba06d0002e0984002304000000080000000400
00000800000002ab000002000000015500000473000002390000019a0000
00ab00000000000005e5fff705c7006106aa009105eb009b0760008d07a1
005407a1005b05c7000005c700610473001404e3001104e3002c04730039
0400002205290042000001010000ff420000fead0000ff3a0000ff5304f3
000a05c7006905c7006105c70069048900a4035500880000ff430000ff01
0000ffac0316007d0000ff370298ffba033d001e0000ff3a0000ff480000
ff490000ff7e0000ff4f0000ff4a0000fe9e0532003905320039022cffb6
022cffb60532003c0532003c022cffba022cffba0532003905320039022c
ffba022cffba0532003905320039022cffba022cffba0532003905320039
022cffba022cffba0532003905320039022cffba022cffba053200390532
0039022cffba022cffba049e0034047800300430ffba0430ffba049e0034
047800300430ffba0430ffba02be004f02be004f02be006902be00690376
000a0376000a073200400732004004deffba04deffba0454003403c00046
0454ffba02e2ffba0454003403c000460454ffba02e2ffba0454003403c0
00460454ffba02e2ffba0610002f0610002f0270ffba0298ffba0610002f
0610002f0270ffba0298ffba060e00290708002902e2ffba0456ffba060e
00290708002902e2ffba0456ffba060e00290708002902e2ffba0456ffba
02e2002102e200210352ffba0352ffba02e2002102e200210352ffba0352
ffba0454003e0454003e022cffba022cffba0454003e0454003e022cffba
022cffba0454003e0454003e022cffba022cffba039c0023039c002301e0
ffba01e0ffba0376000a0376000a0376000a0376000a0732004007320040
04deffba04deffba04e3ffc104e3005402aafff3071dffc104e3ffd504e3
ffc5031dffc1031dffc10473ffff02aaffda0400002104e3008302f00032
04dc004e06fb001f0239001b0239001b04e3001404a8001404f8001404e3
008704e3005402aa0018062500540473008902390070071d007e04e30091
04e3008b031d00660473003003baffc40473000b0473000c040000220473
004904e3005404e300540473004103fa004f03fa0018053e005102390093
0473003402aaffc404e3008d0436002203210032030a0032030a00060348
003202cf003201f0000a01f000000320003202f100320174000a01210032
012100320174000a02760000018e00320150003202490032048400340484
0032035f0000035f003202fa003203480032040300320302003202390000
01bc000a0340000a035e003202ea003202ea003202e9000002e4003202e4
003203be0032030a003202e800320000fe920000fe920000ff730000fe9f
02aa00c903050032030200320348003202ee0000030200320639006205c7
00000556001e05c7006102aa004104eb004e04eb004e04eb004e04eb004e
04eb004e04eb004e04eb004e04eb004e0239ffb60239ffb60239ffc40239
ffc40239ffb60239ffb60239ffc40239ffc404a8007604a8007604a80076
04a8007604a8007604a8007604a8007604a800760239ffc90239ffc90239
ffc90239ffc904a8007604a8007604a8007604a8007603e400220454001a
03df003005c7fffd05c70016055600000556009504730041047300230239
ffa20633005904e3005b05c70000031d001b0556fffd0473000e04730034
047300550473003402390093048900110355001b055600000473000c0556
00000473000c0503006f03fa004f059d0020051500190000fec60000fed4
0000fec60000fed40000fe5f0000fe5f0000ff720000ff730000fee70800
00000401005d0473003404e300110239001b04e300060556fffd05c70096
0473004902aaffcd05c7009604e3009205c700990473008904e300160400
00220473002804540096037c008805b9004e0000ff530000ffbc0000fefe
0000fefe0000fea40000fea40239009305c9009c05c7009805c9009c0000
fee00000ff300000fed40000fed50000fec00000fed00000fed80000fed8
0000fed80000fed80000fdc60639005904e3005b078d00070639000905b9
00910000fe9b061b005904d90006085b000706de000602aa00c9031c0055
01e7005c01e7005c040000990400009902aa00b802aa00b802aa00b802aa
000304e3002c0473002b04c3000a04730014069700870738005000000000
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c000001d0000001d0000001d0000001d0000001d0000001d0000001d0
000001d0000001d0000001d0000001d0000001d0000001d0000001d00000
01d0000001d0000001d0000001d0000001d0000003dc000003dc000003dc
000003dc000003dc000003dc000003dc000003dc000003dc000003dc0000
04cc000005c8000005c8000006ac000006ac000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000007cc000007cc000007cc000007cc000007cc000007cc0000
07cc000007cc000007cc000007cc000007cc000007cc000007cc000007cc
000007cc000100000d5d00f2003c008f000600020010002f00550000073c
02c20005000200>
<0000000e00ae0000000300000000006a000000000003000000070062006a
0001000000000000003500cc000100000000000300130101000100000000
00040013011400010000000000060013012700010000000000070031013a
0003000104090000006a016b0003000104090001002601d5000300010409
0002000e01fb00030001040900030026020900030001040900040026022f
00030001040900060026025500030001040900070062027b00a900200032
00300031003400200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e0041007200690061006c00200069007300200061
002000740072006100640065006d00610072006b0020006f006600200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e002ea9203230313420546865204d
6f6e6f7479706520436f72706f726174696f6e2e20416c6c205269676874
732052657365727665642e5259445056412b417269616c2d426f6c644d54
5259445056412b417269616c2d426f6c644d545259445056412b41726961
6c2d426f6c644d54417269616c20697320612074726164656d61726b206f
6620546865204d6f6e6f7479706520436f72706f726174696f6e2e00a900
20003200300031003400200054006800650020004d006f006e006f007400
790070006500200043006f00720070006f0072006100740069006f006e00
2e00200041006c006c002000520069006700680074007300200052006500
7300650072007600650064002e005200590044005000560041002b004100
7200690061006c002d0042006f006c0064004d0054005200650067007500
6c00610072005200590044005000560041002b0041007200690061006c00
2d0042006f006c0064004d0054005200590044005000560041002b004100
7200690061006c002d0042006f006c0064004d0054005200590044005000
560041002b0041007200690061006c002d0042006f006c0064004d005400
41007200690061006c002000690073002000610020007400720061006400
65006d00610072006b0020006f006600200054006800650020004d006f00
6e006f007400790070006500200043006f00720070006f00720061007400
69006f006e002e00b15480410d03ac00af03ac0002001003ac002003ac00
a003ac0003004003acb3070d3240b803acb312143240b803acb2162b32b9
ffc003acb23a3340b803acb32d943280bc03ab005f0033ffc003abb25533
40b803abb340443240b803abb3333b3240b803abb32f313240b803abb208
3340b803abb30714321f411a03ab002f03ab0002000f03ab002f03ab004f
03ab008f03ab009f03ab00bf03ab0006001003ab00df03ab00ff03ab0003
03a803a2b2461f40b803a5b208330f411403a50001004003a500cf03a500
ff03a50003002003a500af03a500ef03a500ff03a50004ffc003a3b3090c
3240b803a3b208330f411b03a30001000f03a3001003a3008003a300af03
a300cf03a30005006f03a3009f03a300ff03a30003009f03a200af03a200
0203a203a1b2101f10410a039e007f039e0002039a000f0101001fffc003
98b310143240b80399b30f1332404110039500500395000200b0034d00c0
034d0002006f0391007f03910002ffc0034bb22d3132b9ffc0034bb30a0e
32104110038b0020038b0080038b000300a0038b00010020038b0040038b
0002ffc0038bb313163240b80383b20f1132b9ffc0037bb2303432b9ffc0
037bb3101832504114037800010365036e0023001f037e036e001e001f03
63036e001d001f03620364000d001fffc00340b30f1032804110033f0001
033f03150029001f034103160032001f0344031a001b001fffc00375b20e
1132b9ffc00375b2282a32410a034303180032001f030f030d0034001f03
080307b2321f20bb0340000100400388b3090b3240b80388b2101532bd03
8503070014001f03800307b2171f0fbd030a002f030a0002ffc00354b309
0d3290410c035400a003540002001f036e0001009f036e00010040036eb2
090b3241110345031c0016001f036b031d0015001f0346031e0015001f03
a703a10046001f039db3261c1fc0bb0393000100400392b3090d3240b803
3eb2083340b8033eb30d0e32c04109033e000100b0038e00c0038e0002ff
c00390b326383200412603280030032800020020037f0030037f00020010
038a0030038a0050038a006f038a007f038a009f038a0006000003890030
03890002002f037a0070037700900377009f037a0004ffc00315b20f1032
b9ffc00315b2242832b903190318b2321f10bb031a0001ffc0031ab3090e
3240b80318b2121332b9ffc00318b30c0e323fbd0373004f037300020040
0374b31718326fbb032a00010040032cb3181b3240b80370b2090c32bd03
1703160032001fffc00316b20e1132bd031c031e0016001f031d031eb215
1fb0411f031e0001000f031f000102ca02d00015001f02d302d5000d001f
02cf02d0000d001f02cb02d0000d001f02cd02d0000d001f02ce02d0000d
001fffc002d0b3090c3240b802d2b3090c32e0411c02e50001005f02dd00
9f02e5000202bb02c30030001f02da02b80032001f02d902b9003f001f02
d802b80064001f02b902b80033001f02bab221c81fb802b8b321c81f40b8
039bb20d1632b9ffc002c3b22b2f32b9ffc002c3b21f2532b9ffc002c3b2
171b32b9ffc002c3b2121632412502c202c1001c001f02d702c10024001f
02c102c00022001f02bf02c00018001f02c0027400c8001f02b50235003b
001f02b40235003b001f02c402bc001e001f02b702b60038001f02b3b20e
c81fb802b0b207c81fb802afb206c81fb802aeb200c81fb802afb2502f1f
bc02ae02ab001a001f02adb2261a1fb802a8b326241f0fbb0235000102a5
0274b21d1f12410a02a1015801f4001f02a000d801f4001f001202a2b237
c81fb80290b2bc201fb9029002904018374025402d40a6033025302d30a6
032025202d203720a6204110028e0005009f028b0001028b028b00370020
0289003002890040028900900289b20437b041fd027400c0027400020080
027400a00274000200600274007002740002000002740010027400020080
027400f002740002003f0285004f028500020090027e0090027f00900280
0090028100040090027a0090027b0090027c0090027d0004009002740090
02750090027700030070027e0070027f007002800070028100040070027a
0070027b0070027c0070027d000400700274007002750070027700030060
027e0060027f006002800060028100040060027a0060027b0060027c0060
027d000400600274006002750060027700030050027e0050027f00500280
0050028100040050027a0050027b0050027c0050027d0004005002740050
02750050027700030040027e0040027f004002800040028100040040027a
0040027b0040027c0040027d000400400274004002750040027700030030
027e0030027f003002800030028100040030027a0030027b0030027c0030
027d000400300274003002750030027700030020027e0020027f00200280
0020028100040020027a0020027b0020027c0020027d0004002002740020
02750020027700030010027e0010027f001002800010028100040010027a
0010027b0010027c0010027d0004001002740010027500100277000300e0
027e00e0027f00e0028000e00281000400e0027a00e0027b00e0027c00e0
027d000400e0027400e0027500e00277b103d041c5027e00d0027f00d002
8000d00281000400d0027a00d0027b00d0027c00d0027d000400d0027400
d0027500d0027700030030027400400274000200c0027e00c0027f00c002
8000c00281000400c0027a00c0027b00c0027c00c0027d000400c0027400
c0027500c00277000300b0027e00b0027f00b0028000b00281000400b002
7a00b0027b00b0027c00b0027d000400b0027400b0027500b00277000300
a0027e00a0027f00a0028000a00281000400a0027a00a0027b00a0027c00
a0027d000400a0027400a0027500a0027700030090027e0090027f009002
800090028100040090027a0090027b0090027c0090027d00040090027400
9002750090027700030020027e0020027f00200280002002810004002002
7a0020027b0020027c0020027d0004002002740020027500200277000302
8101580801001f028001290801001f027f00ec0801001f027e00d8080100
1f027d00b10801001f027c00a60801001f027b00820801001f027a003708
01001f027700260801001f027500200801001f0274001f0801b21f370f41
160235004f0235005f0235006f0235009f023500af023500bf0235000700
af023500cf023500df023500ff02354022040f074f079f07af07bf0705af
07e007020f064f069f06af06bf0605af06e0060220411b020d0001005f02
350001008f02350001007f023500ef02350002002f0235003f0235000200
3f0234004f0234000202350235023402344011ed20ef2a01cf2a01bf2a01
af2a018f2a01410902470104001e001f022000370201001f0158400c263e
1fd8263e1f3726273e1fb8028eb6ec171fb226361fb801bcb226361fb801
29402b26361fec26361fb126361fa626361f8226361f3726361f3226361f
2d26361f2526361f1f26361f37262a1fb801584022263e1fd8263e1fbc26
3e1f27263e1f21263e1f20263e1f3700161600000012110840b9020d01a6
b3c50d0009b801bcb227281fb801bbb227301fb801b8b2274f1fb801b7b2
27621f410901b600270101001f01b5002002ab001f01afb21fe41fb801ad
b21fe41fb801acb21fbb1fb801a8b21f341fb8015db2272e1fb8015bb227
cd1f410d0155001f0401001f0154001f0401001f0153001f0201001f0152
b21f561fb80151b21f291fb8012bb227261f410d012a00270125001f0129
015800e4001f0125001f0401001f0124b21fe41fb80123b21f3b1fb80122
b21f391f410d010800270801001f0106002d0101001f0105001f0101001f
0103b31fbb1fefb901580401400b1fed1f931fec1fe41feb1fb80201b21f
d920b80401b21fcf25b80156400a1fbc2d9e1fbb1f411fb2410a01580401
001f00b101580401001f00b001580401b51fa625891f9bb901580125b61f
991f2e1f8e2db80801b51f8d1f291f89b901580401b21f8220b802ab4013
1f801f301f742de41f731f4a1f611f521f5d25b802abb21f5c1fbc080100
1f0059015802abb61f5025891f491fb80125b21f4725b80401400b1f461f
791f401f271f3920bc02ab001f003801580401b21f372dbc0125001f0032
01580125b61f2c1f341f2a25b80801b21f5537b80111402a07f00790075b
0742073b07230722071e071d071408120810080e080c080a080808060804
080208000814b8ffe0402b00000100140610000001000604000001000410
000001001002000001000200000001000002010802004a00b013034b024b
5342014bb0c063004b6220b0f65323b8010a515ab005234201b0124b004b
5442b0382b4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288
b801005458b801ffb101018e851bb0124358b10100858d1bb90001011985
8d5959001816763f183f123e113946443e113946443e113946443e113946
443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b
2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb08153
205c58b9020f020d4544b9020e020d45445958b90470020f455258b9020f
04704459594bb0e453205c58b90020020e4544b90027020e45445958b908
420020455258b9002008424459594bb8012553205c58b90026020f4544b9
0021020f45445958b90a0d0026455258b900260a0d4459594bb804015320
5c58b1d8204544b1202045445958b9250000d8455258b900d82500445959
4bb8040153205c58b9015800264544b1262645445958b923200158455258
b9015823204459594bb02953205c58b11f1f4544b12d1f45445958b9010d
001f455258b9001f010d4459594bb02f53205c58b11f1f4544b1251f4544
5958b90135001f455258b9001f01354459594bb8030153205c58b11f1f45
44b11f1f45445958b91428001f455258b9001f14284459592b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b6542
2b01b331757ec3456523456023456560234560b08b766818b080622020b1
7e754565234520b003266062636820b003266165b075236544b07e234420
b131c34565234520b003266062636820b003266165b0c3236544b0312344
b100c3455458b1c3406544b23140314523614459b33f3c58414565234560
23456560234560b089766818b080622020b1583c4565234520b003266062
636820b003266165b03c236544b058234420b13f414565234520b0032660
62636820b003266165b041236544b03f2344b10041455458b141406544b2
3f403f452361445945695342014b5058b108004259435c58b108004259b3
020b0a124358601b2159421610703eb0124358b93b21187e1bba040001a8
000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b
59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b010
2342b0112342002b2b2b2b2b2b2b2b00b01243584bb035514bb021535a58
b1262645b040614459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73
7373737345b040614418004569444569447373737473737374737473742b
2b2b2b2b2b2b2b2b2b2b2b00737373737373737373737373737373737373
737373737474747474747474747474747474747474747474747575757374
757575752b7300004bb02a534bb036515a58b1070745b040604459004bb0
2e534bb036515a58b1030345b0406044b1090945b8ffc06044592b456944
0174007373732b4569442b012b435c58400a0006000702a006a00702b9ff
c00274b31a1d326fbd0277007f02770002ffc00277b22f3132b9ffc00277
b322253240b80274b32f353240b80274b3282a3240b80274b21a2132b8ff
c0b3371a1d32b8ffc0b3251a1d32b8ffc040112d1a1d329025902d9037a0
25a02da03706b8ffc0b6a61a1d321fa61fb8028eb22fa60300742b732b2b
2b2b2b2b2b2b742b737459002b2b435c58b9ffc002a1b21c1d32b9ffc002
a0b21c1d322b2b592b73012b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b012b2b2b2b2b2b2b73742b2b2b2b2b2b2b2b73732b2b2b2b2b2b
732b732b2b2b742b2b2b73737373732b73732b2b2b732b2b002b2b2b2b73
74732b732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b7374
752b2b7373732b2b2b732b737374752b2b7374752b2b7374752b2b2b2b2b
2b2b2b2b2b2b2b74752b000000>
[1997 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 108 53 <00020096000005bc05ba0015002100f84082390f490f57076a0b6a0caa09
a70ea023b60ed8090a0608060a1708160a360e460e460f0708100911140e
140f1410360e360f470f750e7910d30a0b78097819761d88098819861d06
091614090c0f0e530e750e840e940ea30e050e200d0c140d0d0c0f0c150d
171625131014016014a014021414002021250201020d0e0e1500080eb801
bc4027000d100d020dd41b27a006b006c006d00604068770230120233023
022321152001200030000200b8028bb3223163182b4e10f45d3c4dfd3c10
5d71f65dedf45ded003f3c3c103c3f3cfd3c12392f5d713cfd3c01111239
39872e2b5d0e7d10c4011139001112393130005d01715d5d331121321616
151406071616171321032e0223231111333236363534262726232396026f
ebd580c2c1607d6ab3fe9ed672545e663cdbd56a3c4f4824b4e705ba4fca
82a5d71c3886abfee2013fab5921fd9c034e2458424a5b0c0500>HIBBAA+Arial-BoldMT AddT42Char 
2 464 72 <00020041ffe80427043e0014001c01a3b90010fff840460b3999099a0d96
10a805a70abb09bb0db81a0808140148024706460a4f1ea80db606b61ac7
0ac80cd60ad80cf807f70d0d1c0f1c15401b1d3415400e11340f15bf15cf
150315b8ffc0b30f1e3f15b8ffc0b30e173f15b8028d400c0f0e12500e60
0e020e181201b8ffc0b6191b3401331200b8ffc0b31d203400b8ffc0b322
293400b8ffc0b32b2d3400b8ffc0b3181c3400b8ffc0400f0e0f34a00001
0000100002005f1212b80274b3040b1218b8027440240b070021012f1521
4f0e010e1a2f1e5f1e6f1e9f1e041e0f2108400d0f3408191d6941182b4e
10f42b4ded4e105df65d4dedf4ed003fed435c584014184028143f18401e
0f3f18401b103f18401c113f2b2b2b2b593ffd435c58b90012ffc0b32814
3f12b8ffc0b31e0f3f12b8ffc0b31b103f12b8ffc0b21c113f2b2b2b2b59
f45d712b2b2b2b2b435c58b90000ffc0b2123900b8ffc0b2173900b8ffb0
b3090a3e00b8ffc0b241213f2b002b2b2b59e42b1112395d435c5840140e
400f1e3f0e401c113f0e401b103f0e400e173f002b2b2b2b592f3cfd2b2b
722b2b3c0111333130015d71005d2b010506062320272635100033320003
211616333236132626232207061702fa011836e9affeeb85690114d3ed01
1206fd40038261425a270378565c3c3c0101522f9aa1b591dd0108012bfe
c7febd7d8b48016c7a7f43437300>HIBBAA+Arial-BoldMT AddT42Char 
2 988 82 <00020052ffe8049a043e000d001900974048e801e708f713f71504c702e8
05021219051909025910561356165918970298069808970cb809d502db05
dc09d50ce705e706e80d10a708cb02cc06c308c60c057508890684080311
b80274b20a0b17b80274401404071439071a601b701b021b0e2100191a58
41182b4e10f44ded4e1071f64ded003fed3fed313000715d015d71435840
09691066126616691804015d59005d015d13341236333200151400232224
26251416333236353426232206528afd9cf10134fec9ec92fef78a012096
6e6e95956e6e9602228c01068afec7eff1fec384ffa89ea8a8a09ca8a800
>HIBBAA+Arial-BoldMT AddT42Char 
2 1228 83 <0002008bfe6c0497043e0010001c009a402e3813481302123403390d3913
341b4403490d4913441bf91b095606560a591256165618591cf607f91b08
0100061ab80274b2050714b8027440160b0b100f0e1721081a701e011e11
290e0e0f26101001b80129400b700080000200191d3f41182b4e10f4714d
ed3c10fd3c10e44e1071f64ded003f3c3fed3fed3f3c3130015d005d0143
58400d6606660a691266166618691c065d59005d13211536363332001110
002322262711210114163332363534262322068b010633ae6ab90102fefc
b9588f4ffee701168e6662828663678804269c5064fedefefdfef6fed946
55fde903b9b3ab9db3a7a29f>HIBBAA+Arial-BoldMT AddT42Char 
2 1480 85 <0001008700000337043e001000a84028970501090e01530566057505032f
12580e680e7012040a090f0c1f0c028f0cff0c023f0c4f0c020cb8027740
29070701000a0302060a28000910093009700904091a7f129f12025f127f
12af12d01204121000260103b80129400b02028001a001020119113fb901
1c00182b4e10f4713c4d10ed10fd3c4e105d71f65d194de400183f3c3f3c
3fed5d717239323130015d005d71004bb017534bb035515a58b10a323859
005d212111211536363332170726232206061101a0fee70105436b446059
57473d3b522f0426976b4435f52e41aafef1>HIBBAA+Arial-BoldMT AddT42Char 
2 1708 87 <0001001fffe80291059d001900cd402920002001230a290f3a0e4a0e590f
07191500180316150017121314011712021401180309070a070c18b80101
400f0017a017b017036017a017c0170317b80104b2150114b80274b30015
0607b80274400e0c0b092f0a2f00002f015f010201b80104402818032617
1255153f149f14af1403601480149014d014f01405001410142014301404
14191a78a0182b4e10f45d71724bb037534bb03b515a58b90014ffc03859
3c4dfc3cfd3cf45d3c10f419e400183fed3f3cfd3c10f45d71e411123911
330f0f0f0f3130015d011523111416163332371706232226262726351123
3533352511027ac00b271c274a18627c4c7a390b098181011a0426e0fe54
822b1c1bda2a335145319501cfe0d3a4fe89>HIBBAA+Arial-BoldMT AddT42Char 
2 0 0 <00020100000005000500000300070042b40201fe0607b8023f4013000504
fe03000a0704fe010019080605fe0203bc0126000901b0011800182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/R 53 def
/e 72 def
/o 82 def
/p 83 def
/r 85 def
/t 87 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 82 /R put
dup 101 /e put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/KVHPZK+Arial-BoldMT /HIBBAA+Arial-BoldMT findfont ct_VMDictPut
/KVHPZK+Arial-BoldMT*1 
[82{/.notdef}rp /R 18{/.notdef}rp /e 9{/.notdef}rp /o /p /.notdef 
/r /.notdef /t 139{/.notdef}rp]
KVHPZK+Arial-BoldMT nf
KVHPZK+Arial-BoldMT*1 [0 -40 -40 0 0 0 ]msf
102.49 426.677 mo
(Report)
[-30.08 -23.44 -25.6397 -25.6397 -16.7603 0 ]ysh
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
580.602 78.1429 mo
580.602 827.217 li
161.286 827.217 li
1 .878202 .154513 .0513008 cmyk
@
74.702 47.8692 mo
65.625 33.6502 li
57.966 33.6502 li
57.966 58.4622 li
63.838 58.4622 li
63.838 41.4352 li
74.4 58.4622 li
80.572 58.4622 li
80.572 33.6502 li
74.702 33.6502 li
cp
0 0 0 0 cmyk
f
gsave
51.079 68.191 mo
276.089 68.191 li
276.089 24.3281 li
51.079 24.3281 li
cp
clp
99.6864 42.8981 mo
99.4814 43.3132 99.1574 43.6912 98.7154 44.0342 cv
98.2524 44.3862 97.6764 44.6072 96.9884 44.7082 cv
96.3084 44.8072 95.4554 44.8572 94.4384 44.8572 cv
92.4794 44.8572 li
92.4794 38.2222 li
94.7854 38.2222 li
95.5504 38.2222 96.2154 38.2491 96.7954 38.2861 cv
97.3644 38.3262 97.8684 38.4272 98.2984 38.6052 cv
98.9174 38.8632 99.3594 39.2062 99.6094 39.6481 cv
99.8644 40.0942 99.9924 40.6212 99.9924 41.2372 cv
99.9924 41.9332 99.8904 42.4852 99.6864 42.8981 cv
105.382 44.9412 mo
106.233 43.7892 106.663 42.2991 106.663 40.4622 cv
106.663 39.1312 106.386 38.0242 105.837 37.1422 cv
105.283 36.2571 104.539 35.5432 103.603 34.9832 cv
102.678 34.4312 101.688 34.0692 100.63 33.9042 cv
99.5704 33.7332 98.3084 33.6501 96.8354 33.6501 cv
86.0784 33.6501 li
86.0784 58.4622 li
92.4794 58.4622 li
92.4794 49.3542 li
95.4234 49.3542 li
102.186 58.4622 li
110.017 58.4622 li
101.721 47.8232 li
103.31 47.0591 104.527 46.0992 105.382 44.9412 cv
f
148.86 64.6373 mo
149.134 64.4623 149.404 64.2823 149.669 64.0953 cv
149.404 64.2823 149.134 64.4623 148.86 64.6373 cv
148.86 64.6373 mo
148.636 64.7803 148.41 64.9203 148.181 65.0554 cv
148.41 64.9203 148.636 64.7803 148.86 64.6373 cv
155.356 58.2643 mo
155.445 58.1293 155.534 57.9944 155.62 57.8574 cv
155.534 57.9944 155.445 58.1293 155.356 58.2643 cv
155.356 58.2643 mo
155.112 58.6284 154.859 58.9854 154.596 59.3334 cv
154.859 58.9854 155.112 58.6284 155.356 58.2643 cv
115.132 48.8063 mo
115.149 48.9434 115.167 49.0804 115.187 49.2164 cv
115.167 49.0804 115.148 48.9443 115.132 48.8063 cv
115.187 49.2164 mo
115.192 49.2494 115.196 49.2823 115.201 49.3154 cv
115.196 49.2823 115.192 49.2494 115.187 49.2164 cv
159.043 46.0414 mo
144.797 46.0414 li
141.757 46.0414 139.005 44.8094 137.008 42.8163 cv
137.001 42.8163 li
135.006 44.8094 132.255 46.0414 129.214 46.0414 cv
114.96 46.0414 li
114.96 46.0474 114.96 46.0533 114.96 46.0594 cv
114.96 46.9874 115.019 47.9014 115.131 48.7994 cv
129.214 48.7994 li
132.255 48.7994 135.006 47.5674 137.001 45.5764 cv
137.008 45.5764 li
139.005 47.5674 141.757 48.7994 144.797 48.7994 cv
158.874 48.7994 li
158.985 47.9014 159.044 46.9874 159.044 46.0594 cv
159.044 46.0533 159.043 46.0474 159.043 46.0414 cv
115.201 49.3154 mo
115.225 49.4764 115.25 49.6364 115.277 49.7964 cv
115.25 49.6364 115.225 49.4764 115.201 49.3154 cv
115.132 48.8063 mo
115.131 48.8044 115.131 48.8024 115.131 48.7994 cv
115.131 48.8024 115.131 48.8044 115.132 48.8063 cv
125.476 64.8464 mo
125.104 64.6183 124.74 64.3793 124.384 64.1304 cv
124.741 64.3793 125.104 64.6183 125.476 64.8464 cv
117.19 55.7244 mo
117.274 55.8954 117.359 56.0663 117.447 56.2354 cv
117.359 56.0663 117.274 55.8954 117.19 55.7244 cv
137.008 49.7043 mo
137.001 49.7043 li
135.006 51.6943 132.255 52.9274 129.214 52.9274 cv
116.053 52.9274 li
116.365 53.8774 116.74 54.7983 117.172 55.6874 cv
129.214 55.6874 li
132.255 55.6874 135.006 54.4543 137.001 52.4623 cv
137.008 52.4623 li
139.005 54.4543 141.757 55.6874 144.797 55.6874 cv
156.833 55.6874 li
157.266 54.7994 157.639 53.8774 157.95 52.9274 cv
144.797 52.9274 li
141.757 52.9274 139.005 51.6943 137.008 49.7043 cv
117.19 55.7244 mo
117.184 55.7123 117.178 55.6993 117.172 55.6874 cv
117.171 55.6874 li
117.177 55.6993 117.184 55.7123 117.19 55.7244 cv
127.882 25.9854 mo
128.24 25.8224 128.603 25.6683 128.97 25.5244 cv
128.603 25.6683 128.24 25.8224 127.882 25.9854 cv
124.621 27.8224 mo
124.969 27.5864 125.322 27.3574 125.684 27.1404 cv
125.322 27.3574 124.969 27.5864 124.621 27.8224 cv
124.621 27.8224 mo
124.144 28.1473 123.679 28.4883 123.23 28.8483 cv
123.679 28.4883 124.144 28.1473 124.621 27.8224 cv
115.208 42.7614 mo
115.197 42.8293 115.187 42.8973 115.178 42.9664 cv
115.187 42.8973 115.197 42.8293 115.208 42.7614 cv
115.178 42.9664 mo
115.156 43.1194 115.136 43.2723 115.117 43.4274 cv
115.135 43.2723 115.156 43.1194 115.178 42.9664 cv
115.251 42.4874 mo
115.236 42.5784 115.221 42.6694 115.208 42.7614 cv
115.221 42.6694 115.236 42.5784 115.251 42.4874 cv
115.351 41.9114 mo
115.331 42.0193 115.312 42.1274 115.293 42.2364 cv
115.312 42.1274 115.332 42.0193 115.352 41.9114 cv
cp
115.293 42.2364 mo
115.278 42.3193 115.265 42.4034 115.251 42.4874 cv
115.265 42.4034 115.278 42.3193 115.293 42.2364 cv
137.001 38.6893 mo
137.008 38.6893 li
139.005 40.6794 141.757 41.9114 144.797 41.9114 cv
158.652 41.9114 li
158.472 40.9694 158.233 40.0483 157.938 39.1523 cv
144.797 39.1523 li
141.757 39.1523 139.005 37.9214 137.008 35.9274 cv
137.001 35.9274 li
135.006 37.9214 132.255 39.1523 129.214 39.1523 cv
116.065 39.1523 li
115.77 40.0483 115.532 40.9694 115.352 41.9114 cv
129.214 41.9114 li
132.255 41.9114 135.006 40.6794 137.001 38.6893 cv
122.284 29.6523 mo
122.314 29.6254 122.343 29.5983 122.372 29.5724 cv
122.343 29.5983 122.314 29.6254 122.284 29.6523 cv
121.896 30.0093 mo
121.929 29.9783 121.961 29.9474 121.994 29.9164 cv
121.961 29.9474 121.929 29.9783 121.896 30.0093 cv
121.994 29.9164 mo
122.09 29.8273 122.187 29.7394 122.284 29.6523 cv
122.187 29.7394 122.09 29.8273 121.994 29.9164 cv
120.883 31.0273 mo
120.863 31.0483 120.843 31.0693 120.824 31.0903 cv
120.843 31.0693 120.863 31.0483 120.883 31.0273 cv
121.252 30.6414 mo
121.224 30.6683 121.198 30.6964 121.171 30.7244 cv
121.198 30.6964 121.224 30.6683 121.252 30.6414 cv
121.171 30.7244 mo
121.074 30.8243 120.978 30.9254 120.883 31.0273 cv
120.978 30.9254 121.074 30.8243 121.171 30.7244 cv
122.372 29.5724 mo
122.499 29.4594 122.627 29.3483 122.756 29.2383 cv
122.627 29.3483 122.499 29.4594 122.372 29.5724 cv
121.621 30.2723 mo
121.712 30.1833 121.803 30.0964 121.896 30.0093 cv
121.803 30.0964 121.712 30.1833 121.621 30.2723 cv
121.252 30.6414 mo
121.343 30.5483 121.435 30.4564 121.527 30.3644 cv
121.435 30.4564 121.343 30.5483 121.252 30.6414 cv
129.214 35.0223 mo
132.255 35.0223 135.006 33.7914 137.001 31.7994 cv
137.008 31.7994 li
139.005 33.7914 141.757 35.0223 144.797 35.0223 cv
156.085 35.0223 li
154.919 33.0104 153.443 31.1993 151.725 29.6553 cv
152.616 30.4564 153.441 31.3293 154.193 32.2643 cv
144.797 32.2643 li
141.757 32.2643 139.005 31.0323 137.008 29.0394 cv
137.001 29.0394 li
135.006 31.0323 132.255 32.2643 129.214 32.2643 cv
119.811 32.2643 li
120.029 31.9924 120.254 31.7253 120.486 31.4644 cv
119.517 32.5594 118.656 33.7493 117.918 35.0223 cv
cp
121.527 30.3644 mo
121.559 30.3334 121.59 30.3033 121.621 30.2723 cv
121.59 30.3033 121.559 30.3334 121.527 30.3644 cv
120.824 31.0903 mo
120.718 31.2054 120.613 31.3204 120.509 31.4374 cv
120.613 31.3204 120.718 31.2054 120.824 31.0903 cv
120.509 31.4374 mo
120.501 31.4464 120.493 31.4554 120.486 31.4644 cv
120.493 31.4554 120.501 31.4464 120.509 31.4374 cv
122.427 62.5894 mo
122.421 62.5844 122.416 62.5793 122.41 62.5743 cv
122.415 62.5793 122.421 62.5844 122.427 62.5894 cv
122.427 62.5894 mo
122.538 62.6874 122.649 62.7844 122.762 62.8804 cv
122.649 62.7844 122.538 62.6874 122.427 62.5894 cv
137.008 56.5903 mo
137.001 56.5903 li
135.006 58.5864 132.255 59.8154 129.214 59.8154 cv
119.784 59.8154 li
119.418 59.3594 119.071 58.8884 118.742 58.4034 cv
119.786 59.9443 121.02 61.3453 122.41 62.5743 cv
129.214 62.5743 li
132.255 62.5743 135.006 61.3423 137.001 59.3503 cv
137.008 59.3503 li
139.005 61.3423 141.757 62.5743 144.797 62.5743 cv
151.593 62.5743 li
152.546 61.7324 153.427 60.8094 154.221 59.8154 cv
144.797 59.8154 li
141.757 59.8154 139.005 58.5864 137.008 56.5903 cv
151.594 62.5743 mo
151.593 62.5743 li
151.472 62.6813 151.351 62.7874 151.227 62.8914 cv
151.351 62.7874 151.473 62.6813 151.594 62.5743 cv
118.742 58.4034 mo
118.72 58.3704 118.697 58.3373 118.675 58.3033 cv
118.697 58.3373 118.72 58.3704 118.742 58.4034 cv
118.675 58.3033 mo
118.573 58.1514 118.472 57.9984 118.374 57.8434 cv
118.472 57.9984 118.573 58.1514 118.675 58.3033 cv
f
171.345 52.8691 mo
172.028 52.5402 172.555 52.1252 172.923 51.6252 cv
173.291 51.1252 173.473 50.4781 173.473 49.6832 cv
173.473 49.1062 173.353 48.6272 173.116 48.2452 cv
172.88 47.8632 172.559 47.5511 172.152 47.3112 cv
171.752 47.0712 171.326 46.9142 170.869 46.8422 cv
170.411 46.7701 169.865 46.7352 169.229 46.7352 cv
164.58 46.7352 li
164.58 57.4812 li
167.357 57.4812 li
167.357 53.5362 li
168.62 53.5362 li
171.546 57.4812 li
174.93 57.4812 li
cp
170.458 50.7372 mo
170.369 50.9192 170.229 51.0822 170.039 51.2342 cv
169.842 51.3852 169.594 51.4852 169.299 51.5282 cv
169.004 51.5712 168.636 51.5901 168.2 51.5901 cv
167.357 51.5901 li
167.357 48.7062 li
168.349 48.7062 li
168.679 48.7062 168.966 48.7162 169.214 48.7332 cv
169.462 48.7491 169.675 48.7952 169.861 48.8732 cv
170.129 48.9832 170.318 49.1352 170.426 49.3262 cv
170.535 49.5182 170.589 49.7491 170.589 50.0162 cv
170.589 50.3192 170.546 50.5591 170.458 50.7372 cv
1 .878202 .154513 .0513008 cmyk
f
184.307 52.9893 mo
184.307 51.7413 183.974 50.7803 183.311 50.1154 cv
182.648 49.4504 181.656 49.1174 180.338 49.1174 cv
178.907 49.1174 177.78 49.5084 176.961 50.2913 cv
176.14 51.0743 175.729 52.1323 175.729 53.4703 cv
175.729 54.8223 176.164 55.8654 177.032 56.5974 cv
177.896 57.3264 179.144 57.6913 180.768 57.6913 cv
181.4 57.6913 181.973 57.6403 182.493 57.5364 cv
183.016 57.4274 183.567 57.2563 184.155 57.0203 cv
184.155 54.9313 li
183.864 54.9313 li
183.567 55.1633 183.159 55.3804 182.644 55.5823 cv
182.128 55.7874 181.597 55.8843 181.05 55.8843 cv
180.182 55.8843 179.527 55.7183 179.082 55.3773 cv
178.636 55.0364 178.396 54.5433 178.357 53.8964 cv
184.307 53.8964 li
cp
178.35 52.3813 mo
178.388 51.8074 178.57 51.3923 178.892 51.1323 cv
179.214 50.8734 179.629 50.7413 180.129 50.7413 cv
180.667 50.7413 181.066 50.8773 181.322 51.1523 cv
181.578 51.4274 181.709 51.8384 181.725 52.3813 cv
178.35 52.3813 li
f
194.574 49.3749 mo
192.044 49.3749 li
191.95 49.732 li
191.656 49.549 191.33 49.4059 190.973 49.303 cv
190.613 49.199 190.218 49.1479 189.779 49.1479 cv
189.291 49.1479 188.819 49.241 188.354 49.429 cv
187.888 49.6169 187.497 49.879 187.179 50.2159 cv
186.837 50.5779 186.575 51.001 186.388 51.486 cv
186.198 51.97 186.105 52.547 186.105 53.218 cv
186.105 54.613 186.412 55.652 187.028 56.334 cv
187.644 57.016 188.52 57.358 189.655 57.358 cv
190.121 57.358 190.547 57.284 190.927 57.137 cv
191.307 56.986 191.652 56.784 191.965 56.528 cv
191.965 56.679 li
191.965 57.016 191.931 57.3069 191.865 57.548 cv
191.796 57.788 191.687 57.982 191.54 58.137 cv
191.381 58.299 191.152 58.4269 190.849 58.516 cv
190.551 58.606 190.156 58.6479 189.675 58.6479 cv
189.315 58.6479 188.907 58.598 188.45 58.493 cv
187.993 58.389 187.605 58.2759 187.288 58.1479 cv
186.969 58.1479 li
186.969 60.183 li
187.369 60.28 187.846 60.361 188.392 60.431 cv
188.939 60.4969 189.493 60.532 190.059 60.532 cv
190.753 60.532 191.377 60.4659 191.927 60.334 cv
192.477 60.2029 192.951 59.985 193.338 59.687 cv
193.73 59.3929 194.031 58.989 194.249 58.4659 cv
194.466 57.947 194.574 57.3069 194.574 56.548 cv
cp
191.28 55.249 mo
191.032 55.33 190.78 55.369 190.52 55.369 cv
189.946 55.369 189.517 55.218 189.23 54.908 cv
188.939 54.602 188.791 54.055 188.791 53.2759 cv
188.791 52.575 188.962 52.024 189.303 51.633 cv
189.645 51.241 190.156 51.0439 190.834 51.0439 cv
191.009 51.0439 191.202 51.063 191.42 51.098 cv
191.632 51.137 191.815 51.187 191.965 51.249 cv
191.965 54.924 li
191.756 55.059 191.532 55.168 191.28 55.249 cv
f
205 57.4816 mo
202.391 57.4816 li
202.391 53.4547 li
202.391 53.1287 202.373 52.7997 202.341 52.4736 cv
202.306 52.1487 202.249 51.9077 202.167 51.7567 cv
202.074 51.5787 201.93 51.4467 201.748 51.3657 cv
201.562 51.2836 201.306 51.2416 200.976 51.2416 cv
200.74 51.2416 200.504 51.2797 200.264 51.3577 cv
200.02 51.4346 199.76 51.5596 199.477 51.7256 cv
199.477 57.4816 li
196.865 57.4816 li
196.865 49.3746 li
199.477 49.3746 li
199.477 50.2667 li
199.939 49.9056 200.38 49.6287 200.803 49.4366 cv
201.228 49.2457 201.698 49.1487 202.217 49.1487 cv
203.089 49.1487 203.772 49.4026 204.264 49.9117 cv
204.756 50.4236 205 51.1866 205 52.2026 cv
205 57.4816 li
f
215.574 52.9893 mo
215.574 51.7413 215.241 50.7803 214.578 50.1154 cv
213.916 49.4504 212.924 49.1174 211.605 49.1174 cv
210.175 49.1174 209.051 49.5084 208.229 50.2913 cv
207.412 51.0743 207.001 52.1323 207.001 53.4703 cv
207.001 54.8223 207.431 55.8654 208.299 56.5974 cv
209.163 57.3264 210.411 57.6913 212.04 57.6913 cv
212.668 57.6913 213.241 57.6403 213.764 57.5364 cv
214.284 57.4274 214.834 57.2563 215.423 57.0203 cv
215.423 54.9313 li
215.132 54.9313 li
214.834 55.1633 214.427 55.3804 213.916 55.5823 cv
213.4 55.7874 212.869 55.8843 212.318 55.8843 cv
211.45 55.8843 210.795 55.7183 210.35 55.3773 cv
209.904 55.0364 209.663 54.5433 209.624 53.8964 cv
215.574 53.8964 li
cp
209.617 52.3813 mo
209.656 51.8074 209.838 51.3923 210.159 51.1323 cv
210.485 50.8734 210.897 50.7413 211.396 50.7413 cv
211.934 50.7413 212.334 50.8773 212.59 51.1523 cv
212.845 51.4274 212.981 51.8384 212.993 52.3813 cv
209.617 52.3813 li
f
225.128 54.9117 mo
225.128 55.7488 224.756 56.4278 224.004 56.9388 cv
223.253 57.4507 222.226 57.7068 220.919 57.7068 cv
220.199 57.7068 219.543 57.6407 218.958 57.5048 cv
218.369 57.3728 217.896 57.2218 217.539 57.0588 cv
217.539 54.9158 li
217.779 54.9158 li
217.907 55.0088 218.058 55.1098 218.229 55.2178 cv
218.4 55.3268 218.644 55.4427 218.958 55.5708 cv
219.225 55.6828 219.532 55.7758 219.872 55.8578 cv
220.213 55.9388 220.582 55.9778 220.97 55.9778 cv
221.482 55.9778 221.861 55.9238 222.105 55.8068 cv
222.35 55.6948 222.474 55.5238 222.474 55.3038 cv
222.474 55.1058 222.399 54.9618 222.256 54.8728 cv
222.113 54.7838 221.838 54.6988 221.431 54.6178 cv
221.24 54.5748 220.977 54.5278 220.648 54.4778 cv
220.319 54.4238 220.02 54.3658 219.748 54.2917 cv
219.012 54.0978 218.462 53.7997 218.105 53.3928 cv
217.749 52.9858 217.57 52.4778 217.57 51.8688 cv
217.57 51.0898 217.942 50.4427 218.682 49.9238 cv
219.423 49.4058 220.431 49.1478 221.714 49.1478 cv
222.322 49.1478 222.903 49.2088 223.462 49.3307 cv
224.016 49.4548 224.45 49.5858 224.764 49.7258 cv
224.764 51.7728 li
224.54 51.7728 li
224.156 51.5088 223.714 51.2917 223.221 51.1288 cv
222.725 50.9618 222.226 50.8768 221.718 50.8768 cv
221.299 50.8768 220.943 50.9348 220.659 51.0518 cv
220.372 51.1678 220.229 51.3348 220.229 51.5478 cv
220.229 51.7378 220.291 51.8848 220.423 51.9858 cv
220.555 52.0898 220.857 52.1908 221.342 52.2917 cv
221.606 52.3418 221.892 52.3968 222.198 52.4468 cv
222.505 52.4968 222.81 52.5588 223.121 52.6368 cv
223.802 52.8148 224.31 53.0938 224.636 53.4778 cv
224.965 53.8618 225.128 54.3378 225.128 54.9117 cv
f
235.276 52.9893 mo
235.276 51.7413 234.943 50.7803 234.28 50.1154 cv
233.617 49.4504 232.625 49.1174 231.307 49.1174 cv
229.876 49.1174 228.753 49.5084 227.931 50.2913 cv
227.113 51.0743 226.702 52.1323 226.702 53.4703 cv
226.702 54.8223 227.133 55.8654 228.001 56.5974 cv
228.865 57.3264 230.113 57.6913 231.741 57.6913 cv
232.369 57.6913 232.942 57.6403 233.462 57.5364 cv
233.985 57.4274 234.536 57.2563 235.125 57.0203 cv
235.125 54.9313 li
234.834 54.9313 li
234.536 55.1633 234.129 55.3804 233.617 55.5823 cv
233.101 55.7874 232.57 55.8843 232.02 55.8843 cv
231.152 55.8843 230.496 55.7183 230.051 55.3773 cv
229.605 55.0364 229.365 54.5433 229.326 53.8964 cv
235.276 53.8964 li
cp
229.319 52.3813 mo
229.357 51.8074 229.54 51.3923 229.861 51.1323 cv
230.183 50.8734 230.598 50.7413 231.098 50.7413 cv
231.636 50.7413 232.035 50.8773 232.291 51.1523 cv
232.547 51.4274 232.679 51.8384 232.694 52.3813 cv
229.319 52.3813 li
f
245.558 57.4816 mo
242.945 57.4816 li
242.945 53.4547 li
242.945 53.1287 242.931 52.7997 242.896 52.4736 cv
242.864 52.1487 242.807 51.9077 242.725 51.7567 cv
242.628 51.5787 242.488 51.4467 242.306 51.3657 cv
242.12 51.2836 241.864 51.2416 241.534 51.2416 cv
241.298 51.2416 241.062 51.2797 240.818 51.3577 cv
240.578 51.4346 240.314 51.5596 240.035 51.7256 cv
240.035 57.4816 li
237.423 57.4816 li
237.423 49.3746 li
240.035 49.3746 li
240.035 50.2667 li
240.493 49.9056 240.938 49.6287 241.361 49.4366 cv
241.786 49.2457 242.256 49.1487 242.775 49.1487 cv
243.647 49.1487 244.33 49.4026 244.822 49.9117 cv
245.314 50.4236 245.558 51.1866 245.558 52.2026 cv
245.558 57.4816 li
f
253.462 57.404 mo
253.182 57.474 252.884 57.532 252.574 57.571 cv
252.259 57.613 251.875 57.633 251.423 57.633 cv
250.411 57.633 249.655 57.427 249.163 57.02 cv
248.666 56.61 248.423 55.912 248.423 54.923 cv
248.423 51.137 li
247.357 51.137 li
247.357 49.375 li
248.423 49.375 li
248.423 47.053 li
251.031 47.053 li
251.031 49.375 li
253.462 49.375 li
253.462 51.137 li
251.031 51.137 li
251.031 54.009 li
251.031 54.295 251.035 54.54 251.039 54.7531 cv
251.042 54.966 251.082 55.156 251.155 55.323 cv
251.221 55.493 251.341 55.625 251.511 55.722 cv
251.682 55.823 251.93 55.873 252.255 55.873 cv
252.391 55.873 252.566 55.842 252.786 55.788 cv
253.005 55.73 253.158 55.675 253.244 55.629 cv
253.462 55.629 li
253.462 57.404 li
f
261.194 51.8498 mo
260.962 51.8498 li
260.853 51.8109 260.675 51.7798 260.43 51.7568 cv
260.186 51.7378 259.98 51.7298 259.818 51.7298 cv
259.45 51.7298 259.124 51.7528 258.841 51.7998 cv
258.559 51.8498 258.256 51.9308 257.93 52.0479 cv
257.93 57.4818 li
255.318 57.4818 li
255.318 49.3748 li
257.93 49.3748 li
257.93 50.5668 li
258.5 50.0768 258.996 49.7488 259.415 49.5878 cv
259.838 49.4278 260.225 49.3438 260.582 49.3438 cv
260.671 49.3438 260.775 49.3478 260.891 49.3518 cv
261.004 49.3578 261.105 49.3658 261.194 49.3728 cv
261.194 51.8498 li
f
267.884 57.4816 mo
270.466 57.4816 li
270.466 51.9697 li
270.466 50.9977 270.136 50.2836 269.482 49.8307 cv
268.826 49.3746 267.764 49.1487 266.291 49.1487 cv
265.671 49.1487 265.055 49.1967 264.438 49.2957 cv
263.822 49.3947 263.376 49.4777 263.101 49.5516 cv
263.101 51.5007 li
263.338 51.5007 li
263.551 51.4197 263.896 51.3036 264.38 51.1526 cv
264.865 51.0007 265.318 50.9236 265.745 50.9236 cv
266.454 50.9236 266.989 51.0087 267.353 51.1797 cv
267.717 51.3536 267.9 51.6597 267.9 52.1097 cv
267.9 52.1526 li
267.136 52.1946 266.4 52.2646 265.69 52.3536 cv
264.981 52.4467 264.384 52.6017 263.907 52.8146 cv
263.423 53.0317 263.047 53.3307 262.784 53.7026 cv
262.52 54.0787 262.388 54.5627 262.388 55.1556 cv
262.388 55.8926 262.648 56.5046 263.163 56.9777 cv
263.683 57.4547 264.326 57.6907 265.094 57.6907 cv
265.419 57.6907 265.718 57.6677 265.993 57.6136 cv
266.264 57.5557 266.528 57.4736 266.784 57.3577 cv
266.965 57.2726 267.16 57.1517 267.365 57.0046 cv
267.57 56.8536 267.745 56.7297 267.884 56.6216 cv
cp
267.182 55.7726 mo
266.919 55.8807 266.656 55.9316 266.4 55.9316 cv
266.074 55.9316 265.834 55.9077 265.682 55.8657 cv
265.527 55.8187 265.399 55.7487 265.287 55.6526 cv
265.175 55.5557 265.101 55.4547 265.074 55.3497 cv
265.043 55.2457 265.031 55.1057 265.031 54.9387 cv
265.031 54.6837 265.098 54.4777 265.233 54.3226 cv
265.369 54.1677 265.566 54.0477 265.826 53.9656 cv
266.035 53.9006 266.345 53.8417 266.749 53.7917 cv
267.156 53.7416 267.536 53.6987 267.884 53.6716 cv
267.884 55.3577 li
267.683 55.5287 267.45 55.6677 267.182 55.7726 cv
f
272.686 57.482 mo
275.295 57.482 li
275.295 46.249 li
272.686 46.249 li
cp
f
174.369 43.0202 mo
171.706 43.0202 li
167.116 35.6442 li
167.116 43.0202 li
164.581 43.0202 li
164.581 32.2722 li
167.893 32.2722 li
171.834 38.4293 li
171.834 32.2722 li
174.369 32.2722 li
cp
f
183.903 35.8128 mo
183.128 35.0418 182.036 34.6558 180.621 34.6558 cv
179.226 34.6558 178.136 35.0399 177.357 35.8048 cv
176.574 36.5709 176.182 37.6268 176.182 38.9698 cv
176.182 40.3048 176.57 41.3578 177.349 42.1248 cv
178.124 42.8928 179.218 43.2778 180.621 43.2778 cv
182.028 43.2778 183.116 42.8928 183.896 42.1248 cv
184.671 41.3578 185.062 40.3048 185.062 38.9698 cv
185.062 37.6368 184.675 36.5839 183.903 35.8128 cv
181.322 41.3518 mo
181.105 41.4308 180.881 41.4719 180.643 41.4719 cv
180.369 41.4719 180.125 41.4288 179.907 41.3419 cv
179.694 41.2528 179.508 41.1168 179.353 40.9268 cv
179.194 40.7299 179.074 40.4678 178.992 40.1408 cv
178.907 39.8148 178.868 39.4288 178.868 38.9858 cv
178.868 38.4868 178.915 38.0748 179.008 37.7448 cv
179.104 37.4178 179.229 37.1578 179.392 36.9698 cv
179.57 36.7668 179.756 36.6328 179.95 36.5628 cv
180.147 36.4968 180.369 36.4619 180.621 36.4619 cv
180.873 36.4619 181.109 36.5048 181.326 36.5858 cv
181.543 36.6678 181.729 36.8088 181.884 37.0048 cv
182.036 37.1989 182.16 37.4578 182.245 37.7819 cv
182.329 38.1058 182.376 38.5068 182.376 38.9858 cv
182.376 39.5028 182.333 39.9078 182.248 40.1989 cv
182.164 40.4929 182.036 40.7408 181.869 40.9508 cv
181.717 41.1389 181.535 41.2719 181.322 41.3518 cv
f
192.853 37.3884 mo
192.621 37.3884 li
192.512 37.3475 192.334 37.3185 192.089 37.2975 cv
191.845 37.2764 191.639 37.2665 191.477 37.2665 cv
191.109 37.2665 190.783 37.2914 190.5 37.3405 cv
190.218 37.3865 189.915 37.4695 189.589 37.5865 cv
189.589 43.0204 li
186.977 43.0204 li
186.977 34.9135 li
189.589 34.9135 li
189.589 36.1055 li
190.159 35.6155 190.655 35.2875 191.074 35.1265 cv
191.497 34.9664 191.884 34.8845 192.241 34.8845 cv
192.33 34.8845 192.434 34.8865 192.55 34.8925 cv
192.663 34.8965 192.764 34.9045 192.853 34.9135 cv
192.853 37.3884 li
f
201.923 40.4505 mo
201.923 41.2896 201.547 41.9655 200.799 42.4775 cv
200.047 42.9915 199.02 43.2465 197.713 43.2465 cv
196.993 43.2465 196.338 43.1795 195.752 43.0455 cv
195.163 42.9095 194.691 42.7606 194.333 42.5955 cv
194.333 40.4545 li
194.573 40.4545 li
194.701 40.5475 194.853 40.6486 195.023 40.7565 cv
195.194 40.8655 195.438 40.9835 195.752 41.1096 cv
196.019 41.2216 196.326 41.3165 196.667 41.3965 cv
197.011 41.4775 197.377 41.5165 197.767 41.5165 cv
198.276 41.5165 198.656 41.4605 198.9 41.3455 cv
199.148 41.2335 199.268 41.0645 199.268 40.8416 cv
199.268 40.6445 199.194 40.5005 199.05 40.4116 cv
198.908 40.3225 198.632 40.2375 198.225 40.1555 cv
198.035 40.1135 197.771 40.0645 197.442 40.0145 cv
197.113 39.9635 196.81 39.9035 196.543 39.8305 cv
195.803 39.6365 195.256 39.3385 194.899 38.9315 cv
194.543 38.5245 194.364 38.0165 194.364 37.4095 cv
194.364 36.6306 194.736 35.9815 195.476 35.4645 cv
196.214 34.9445 197.225 34.6865 198.508 34.6865 cv
199.116 34.6865 199.697 34.7485 200.256 34.8705 cv
200.81 34.9935 201.248 35.1245 201.558 35.2645 cv
201.558 37.3126 li
201.338 37.3126 li
200.95 37.0475 200.508 36.8325 200.016 36.6655 cv
199.52 36.5005 199.02 36.4155 198.512 36.4155 cv
198.093 36.4155 197.741 36.4755 197.454 36.5916 cv
197.163 36.7086 197.023 36.8726 197.023 37.0865 cv
197.023 37.2775 197.086 37.4255 197.217 37.5266 cv
197.345 37.6265 197.655 37.7296 198.136 37.8305 cv
198.4 37.8825 198.686 37.9345 198.992 37.9855 cv
199.299 38.0355 199.605 38.0975 199.915 38.1755 cv
200.597 38.3555 201.104 38.6345 201.434 39.0186 cv
201.76 39.4005 201.923 39.8785 201.923 40.4505 cv
f
212.558 43.0202 mo
209.554 43.0202 li
207.283 39.4852 li
206.578 40.3612 li
206.578 43.0202 li
203.965 43.0202 li
203.965 31.7872 li
206.578 31.7872 li
206.578 38.4752 li
209.345 34.9132 li
212.345 34.9132 li
209.446 38.4082 li
cp
f
167.828 68.0978 mo
167.124 68.0978 li
165.111 64.2878 li
165.111 68.0978 li
164.58 68.0978 li
164.58 63.8419 li
165.459 63.8419 li
167.297 67.3188 li
167.297 63.8419 li
167.828 63.8419 li
cp
f
171.791 63.9001 mo
171.547 63.7991 171.276 63.7491 170.969 63.7491 cv
170.675 63.7491 170.404 63.7991 170.156 63.9001 cv
169.908 63.9971 169.698 64.1401 169.532 64.3261 cv
169.357 64.5241 169.222 64.7601 169.133 65.0361 cv
169.039 65.3111 168.993 65.6251 168.993 65.9701 cv
168.993 66.3221 169.039 66.6361 169.133 66.9121 cv
169.225 67.1871 169.357 67.4191 169.528 67.6091 cv
169.698 67.7991 169.908 67.9431 170.152 68.0401 cv
170.396 68.1401 170.671 68.1911 170.969 68.1911 cv
171.276 68.1911 171.547 68.1401 171.787 68.0431 cv
172.028 67.9461 172.234 67.8031 172.411 67.6091 cv
172.578 67.4231 172.714 67.1911 172.807 66.9161 cv
172.9 66.6361 172.946 66.3221 172.946 65.9701 cv
172.946 65.6211 172.9 65.3071 172.807 65.0281 cv
172.718 64.7531 172.582 64.5201 172.411 64.3261 cv
172.241 64.1401 172.035 64.0011 171.791 63.9001 cv
171.982 67.2571 mo
171.729 67.5551 171.396 67.7021 170.973 67.7021 cv
170.551 67.7021 170.214 67.5551 169.962 67.2571 cv
169.71 66.9581 169.586 66.5321 169.586 65.9701 cv
169.586 65.4161 169.71 64.9891 169.954 64.6871 cv
170.202 64.3841 170.54 64.2331 170.973 64.2331 cv
171.4 64.2331 171.737 64.3841 171.985 64.6871 cv
172.234 64.9891 172.358 65.4161 172.358 65.9701 cv
172.358 66.5321 172.23 66.9581 171.982 67.2571 cv
f
176.044 66.2374 mo
176.314 66.1324 176.527 65.9775 176.682 65.7684 cv
176.837 65.5635 176.914 65.3074 176.914 65.0015 cv
176.914 64.7725 176.872 64.5865 176.783 64.4355 cv
176.699 64.2875 176.578 64.1675 176.423 64.0704 cv
176.283 63.9855 176.132 63.9235 175.958 63.8925 cv
175.787 63.8575 175.574 63.8425 175.314 63.8425 cv
174.12 63.8425 li
174.12 68.0975 li
174.69 68.0975 li
174.69 66.4045 li
175.484 66.4045 li
176.911 68.0975 li
177.643 68.0975 li
cp
176.259 65.4355 mo
176.221 65.5394 176.156 65.6324 176.07 65.7145 cv
175.977 65.7994 175.865 65.8575 175.732 65.8884 cv
175.596 65.9194 175.442 65.9355 175.263 65.9355 cv
174.69 65.9355 li
174.69 64.3265 li
175.356 64.3265 li
175.507 64.3265 175.643 64.3384 175.753 64.3615 cv
175.868 64.3804 175.965 64.4194 176.046 64.4734 cv
176.143 64.5394 176.217 64.6215 176.259 64.7145 cv
176.302 64.8074 176.322 64.9155 176.322 65.0394 cv
176.322 65.1985 176.302 65.3304 176.259 65.4355 cv
f
183.392 63.842 mo
182.288 68.0981 li
181.652 68.0981 li
180.76 64.563 li
179.888 68.0981 li
179.264 68.0981 li
178.14 63.842 li
178.729 63.842 li
179.613 67.381 li
180.493 63.842 li
181.066 63.842 li
181.95 67.4161 li
182.837 63.842 li
cp
f
187.457 68.0978 mo
184.647 68.0978 li
184.647 63.8419 li
187.457 63.8419 li
187.457 64.3419 li
185.217 64.3419 li
185.217 65.5089 li
187.457 65.5089 li
187.457 66.0129 li
185.217 66.0129 li
185.217 67.5978 li
187.457 67.5978 li
cp
f
192.318 67.7916 mo
192.086 67.8967 191.83 67.9897 191.554 68.0707 cv
191.279 68.1487 191.011 68.1907 190.756 68.1907 cv
190.427 68.1907 190.12 68.1447 189.845 68.0516 cv
189.566 67.9626 189.333 67.8226 189.136 67.6407 cv
188.942 67.4547 188.791 67.2217 188.682 66.9426 cv
188.573 66.6677 188.524 66.3417 188.524 65.9697 cv
188.524 65.2877 188.721 64.7487 189.12 64.3577 cv
189.516 63.9626 190.062 63.7646 190.756 63.7646 cv
191 63.7646 191.248 63.7957 191.5 63.8536 cv
191.752 63.9117 192.023 64.0087 192.318 64.1487 cv
192.318 64.8187 li
192.267 64.8187 li
192.206 64.7756 192.121 64.7137 192.007 64.6407 cv
191.895 64.5667 191.783 64.5046 191.678 64.4547 cv
191.547 64.3967 191.395 64.3456 191.229 64.3077 cv
191.062 64.2687 190.872 64.2487 190.663 64.2487 cv
190.186 64.2487 189.807 64.4037 189.531 64.7106 cv
189.252 65.0167 189.116 65.4316 189.116 65.9547 cv
189.116 66.5087 189.26 66.9387 189.551 67.2446 cv
189.837 67.5516 190.232 67.7026 190.732 67.7026 cv
190.915 67.7026 191.097 67.6866 191.279 67.6487 cv
191.458 67.6136 191.62 67.5667 191.755 67.5087 cv
191.755 66.4587 li
190.616 66.4587 li
190.616 65.9587 li
192.318 65.9587 li
192.318 67.7916 li
f
198.132 63.842 mo
197.38 63.842 li
195.83 68.0981 li
196.403 68.0981 li
196.818 66.9161 li
198.66 66.9161 li
199.074 68.0981 li
199.679 68.0981 li
cp
196.993 66.4271 mo
197.741 64.342 li
198.481 66.4271 li
cp
f
203.989 68.0978 mo
203.287 68.0978 li
201.271 64.2878 li
201.271 68.0978 li
200.74 68.0978 li
200.74 63.8419 li
201.62 63.8419 li
203.457 67.3188 li
203.457 63.8419 li
203.989 63.8419 li
cp
f
254.019 67.7877 mo
253.915 67.8348 253.822 67.8768 253.736 67.9158 cv
253.651 67.9587 253.539 67.9968 253.403 68.0438 cv
253.287 68.0787 253.163 68.1097 253.024 68.1368 cv
252.888 68.1597 252.737 68.1757 252.573 68.1757 cv
252.268 68.1757 251.985 68.1287 251.733 68.0438 cv
251.481 67.9587 251.264 67.8228 251.074 67.6368 cv
250.891 67.4548 250.749 67.2258 250.647 66.9468 cv
250.543 66.6677 250.493 66.3417 250.493 65.9738 cv
250.493 65.6248 250.539 65.3107 250.639 65.0358 cv
250.741 64.7568 250.88 64.5237 251.07 64.3348 cv
251.249 64.1478 251.469 64.0087 251.725 63.9117 cv
251.981 63.8148 252.264 63.7648 252.577 63.7648 cv
252.806 63.7648 253.035 63.7917 253.264 63.8458 cv
253.488 63.9037 253.744 64.0007 254.019 64.1407 cv
254.019 64.8107 li
253.977 64.8107 li
253.744 64.6177 253.512 64.4738 253.279 64.3848 cv
253.051 64.2958 252.806 64.2488 252.543 64.2488 cv
252.325 64.2488 252.132 64.2838 251.961 64.3538 cv
251.79 64.4238 251.636 64.5317 251.5 64.6797 cv
251.369 64.8228 251.267 65.0007 251.194 65.2217 cv
251.121 65.4387 251.082 65.6907 251.082 65.9777 cv
251.082 66.2758 251.125 66.5317 251.206 66.7488 cv
251.287 66.9617 251.388 67.1407 251.52 67.2728 cv
251.651 67.4158 251.806 67.5208 251.985 67.5867 cv
252.162 67.6558 252.349 67.6868 252.546 67.6868 cv
252.821 67.6868 253.073 67.6407 253.314 67.5477 cv
253.551 67.4548 253.771 67.3148 253.98 67.1248 cv
254.019 67.1248 li
254.019 67.7877 li
f
258.187 68.0978 mo
255.377 68.0978 li
255.377 63.8419 li
258.187 63.8419 li
258.187 64.3419 li
255.946 64.3419 li
255.946 65.5089 li
258.187 65.5089 li
258.187 66.0129 li
255.946 66.0129 li
255.946 67.5978 li
258.187 67.5978 li
cp
f
262.741 68.0978 mo
262.039 68.0978 li
260.023 64.2878 li
260.023 68.0978 li
259.492 68.0978 li
259.492 63.8419 li
260.373 63.8419 li
262.209 67.3188 li
262.209 63.8419 li
262.741 63.8419 li
cp
f
267.396 64.342 mo
265.877 64.342 li
265.877 68.0981 li
265.306 68.0981 li
265.306 64.342 li
263.791 64.342 li
263.791 63.842 li
267.396 63.842 li
cp
f
271.259 68.0978 mo
268.449 68.0978 li
268.449 63.8419 li
271.259 63.8419 li
271.259 64.3419 li
269.019 64.3419 li
269.019 65.5089 li
271.259 65.5089 li
271.259 66.0129 li
269.019 66.0129 li
269.019 67.5978 li
271.259 67.5978 li
cp
f
274.492 66.2374 mo
274.76 66.1324 274.973 65.9775 275.128 65.7684 cv
275.283 65.5635 275.36 65.3074 275.36 65.0015 cv
275.36 64.7725 275.318 64.5865 275.228 64.4355 cv
275.144 64.2875 275.023 64.1675 274.868 64.0704 cv
274.729 63.9855 274.577 63.9235 274.403 63.8925 cv
274.233 63.8575 274.02 63.8425 273.76 63.8425 cv
272.566 63.8425 li
272.566 68.0975 li
273.136 68.0975 li
273.136 66.4045 li
273.93 66.4045 li
275.356 68.0975 li
276.09 68.0975 li
cp
274.705 65.4355 mo
274.667 65.5394 274.601 65.6324 274.516 65.7145 cv
274.423 65.7994 274.31 65.8575 274.178 65.8884 cv
274.043 65.9194 273.888 65.9355 273.709 65.9355 cv
273.136 65.9355 li
273.136 64.3265 li
273.802 64.3265 li
273.953 64.3265 274.089 64.3384 274.197 64.3615 cv
274.314 64.3804 274.407 64.4194 274.492 64.4734 cv
274.589 64.5394 274.663 64.6215 274.705 64.7145 cv
274.748 64.8074 274.768 64.9155 274.768 65.0394 cv
274.768 65.1985 274.748 65.3304 274.705 65.4355 cv
f
193.965 68.098 mo
194.527 68.098 li
194.527 63.842 li
193.965 63.842 li
cp
f
211.5 67.7877 mo
211.392 67.8348 211.299 67.8768 211.213 67.9158 cv
211.128 67.9587 211.02 67.9968 210.88 68.0438 cv
210.764 68.0787 210.64 68.1097 210.504 68.1368 cv
210.364 68.1597 210.217 68.1757 210.054 68.1757 cv
209.744 68.1757 209.465 68.1287 209.213 68.0438 cv
208.957 67.9587 208.741 67.8228 208.55 67.6368 cv
208.368 67.4548 208.229 67.2258 208.124 66.9468 cv
208.019 66.6677 207.969 66.3417 207.969 65.9738 cv
207.969 65.6248 208.019 65.3107 208.116 65.0358 cv
208.217 64.7568 208.361 64.5237 208.546 64.3348 cv
208.729 64.1478 208.946 64.0087 209.202 63.9117 cv
209.457 63.8148 209.744 63.7648 210.054 63.7648 cv
210.283 63.7648 210.512 63.7917 210.74 63.8458 cv
210.969 63.9037 211.221 64.0007 211.5 64.1407 cv
211.5 64.8107 li
211.457 64.8107 li
211.221 64.6177 210.988 64.4738 210.76 64.3848 cv
210.531 64.2958 210.283 64.2488 210.02 64.2488 cv
209.806 64.2488 209.613 64.2838 209.438 64.3538 cv
209.267 64.4238 209.113 64.5317 208.977 64.6797 cv
208.849 64.8228 208.745 65.0007 208.67 65.2217 cv
208.597 65.4387 208.562 65.6907 208.562 65.9777 cv
208.562 66.2758 208.601 66.5317 208.682 66.7488 cv
208.763 66.9617 208.869 67.1407 208.996 67.2728 cv
209.128 67.4158 209.283 67.5208 209.461 67.5867 cv
209.64 67.6558 209.829 67.6868 210.027 67.6868 cv
210.298 67.6868 210.554 67.6407 210.791 67.5477 cv
211.027 67.4548 211.252 67.3148 211.457 67.1248 cv
211.5 67.1248 li
211.5 67.7877 li
f
215.272 63.9001 mo
215.028 63.7991 214.756 63.7491 214.45 63.7491 cv
214.156 63.7491 213.884 63.7991 213.636 63.9001 cv
213.388 63.9971 213.178 64.1401 213.012 64.3261 cv
212.834 64.5241 212.702 64.7601 212.609 65.0361 cv
212.52 65.3111 212.473 65.6251 212.473 65.9701 cv
212.473 66.3221 212.52 66.6361 212.613 66.9121 cv
212.702 67.1871 212.838 67.4191 213.008 67.6091 cv
213.178 67.7991 213.388 67.9431 213.632 68.0401 cv
213.876 68.1401 214.148 68.1911 214.45 68.1911 cv
214.756 68.1911 215.032 68.1401 215.268 68.0431 cv
215.508 67.9461 215.714 67.8031 215.892 67.6091 cv
216.059 67.4231 216.19 67.1911 216.287 66.9161 cv
216.38 66.6361 216.427 66.3221 216.427 65.9701 cv
216.427 65.6211 216.38 65.3071 216.291 65.0281 cv
216.198 64.7531 216.063 64.5201 215.892 64.3261 cv
215.721 64.1401 215.516 64.0011 215.272 63.9001 cv
215.462 67.2571 mo
215.21 67.5551 214.872 67.7021 214.453 67.7021 cv
214.028 67.7021 213.694 67.5551 213.442 67.2571 cv
213.19 66.9581 213.066 66.5321 213.066 65.9701 cv
213.066 65.4161 213.19 64.9891 213.434 64.6871 cv
213.682 64.3841 214.02 64.2331 214.453 64.2331 cv
214.88 64.2331 215.217 64.3841 215.465 64.6871 cv
215.714 64.9891 215.838 65.4161 215.838 65.9701 cv
215.838 66.5321 215.71 66.9581 215.462 67.2571 cv
f
221.535 68.0978 mo
220.965 68.0978 li
220.965 64.4308 li
219.784 66.9308 li
219.446 66.9308 li
218.271 64.4308 li
218.271 68.0978 li
217.741 68.0978 li
217.741 63.8419 li
218.516 63.8419 li
219.648 66.2139 li
220.744 63.8419 li
221.535 63.8419 li
cp
f
225.74 64.5126 mo
225.656 64.3497 225.528 64.2137 225.365 64.1057 cv
225.229 64.0167 225.07 63.9467 224.896 63.9037 cv
224.717 63.8617 224.5 63.8417 224.245 63.8417 cv
223.09 63.8417 li
223.09 68.0977 li
223.659 68.0977 li
223.659 66.5126 li
224.225 66.5126 li
224.531 66.5126 224.78 66.4737 224.981 66.4006 cv
225.182 66.3307 225.353 66.2177 225.5 66.0707 cv
225.616 65.9547 225.709 65.8146 225.776 65.6517 cv
225.841 65.4937 225.872 65.3146 225.872 65.1287 cv
225.872 64.8807 225.829 64.6757 225.74 64.5126 cv
225.229 65.4817 mo
225.19 65.5826 225.128 65.6797 225.038 65.7687 cv
224.95 65.8577 224.833 65.9236 224.69 65.9656 cv
224.546 66.0046 224.361 66.0287 224.136 66.0287 cv
223.659 66.0287 li
223.659 64.3267 li
224.217 64.3267 li
224.396 64.3267 224.542 64.3387 224.659 64.3657 cv
224.776 64.3926 224.88 64.4316 224.973 64.4937 cv
225.078 64.5597 225.156 64.6487 225.205 64.7567 cv
225.256 64.8657 225.284 64.9937 225.284 65.1407 cv
225.284 65.2687 225.264 65.3807 225.229 65.4817 cv
f
230.237 66.3885 mo
230.237 66.6985 230.205 66.9695 230.136 67.1985 cv
230.07 67.4275 229.957 67.6215 229.802 67.7725 cv
229.656 67.9155 229.485 68.0245 229.291 68.0905 cv
229.093 68.1555 228.865 68.1905 228.605 68.1905 cv
228.338 68.1905 228.105 68.1555 227.907 68.0825 cv
227.71 68.0125 227.543 67.9075 227.407 67.7725 cv
227.256 67.6175 227.144 67.4275 227.074 67.2065 cv
227.008 66.9855 226.973 66.7145 226.973 66.3885 cv
226.973 63.8415 li
227.543 63.8415 li
227.543 66.4195 li
227.543 66.6485 227.559 66.8305 227.59 66.9665 cv
227.62 67.0975 227.675 67.2185 227.748 67.3305 cv
227.834 67.4545 227.946 67.5475 228.09 67.6095 cv
228.233 67.6715 228.403 67.7025 228.605 67.7025 cv
228.806 67.7025 228.981 67.6715 229.121 67.6095 cv
229.264 67.5475 229.38 67.4545 229.465 67.3305 cv
229.539 67.2185 229.589 67.0945 229.621 66.9545 cv
229.652 66.8145 229.67 66.6405 229.67 66.4355 cv
229.67 63.8415 li
230.237 63.8415 li
230.237 66.3885 li
f
234.772 64.342 mo
233.253 64.342 li
233.253 68.0981 li
232.686 68.0981 li
232.686 64.342 li
231.167 64.342 li
231.167 63.842 li
234.772 63.842 li
cp
f
241.453 68.0978 mo
240.751 68.0978 li
238.74 64.2878 li
238.74 68.0978 li
238.205 68.0978 li
238.205 63.8419 li
239.085 63.8419 li
240.922 67.3188 li
240.922 63.8419 li
241.453 63.8419 li
cp
f
246.555 67.7916 mo
246.322 67.8967 246.066 67.9897 245.792 68.0707 cv
245.516 68.1487 245.248 68.1907 244.992 68.1907 cv
244.66 68.1907 244.356 68.1447 244.081 68.0516 cv
243.802 67.9626 243.57 67.8226 243.376 67.6407 cv
243.178 67.4547 243.027 67.2217 242.919 66.9426 cv
242.814 66.6677 242.76 66.3417 242.76 65.9697 cv
242.76 65.2877 242.958 64.7487 243.356 64.3577 cv
243.753 63.9626 244.299 63.7646 244.996 63.7646 cv
245.236 63.7646 245.484 63.7957 245.736 63.8536 cv
245.988 63.9117 246.264 64.0087 246.555 64.1487 cv
246.555 64.8187 li
246.503 64.8187 li
246.442 64.7756 246.357 64.7137 246.244 64.6407 cv
246.132 64.5667 246.023 64.5046 245.915 64.4547 cv
245.783 64.3967 245.632 64.3456 245.464 64.3077 cv
245.298 64.2687 245.108 64.2487 244.899 64.2487 cv
244.423 64.2487 244.048 64.4037 243.768 64.7106 cv
243.488 65.0167 243.352 65.4316 243.352 65.9547 cv
243.352 66.5087 243.496 66.9387 243.783 67.2446 cv
244.074 67.5516 244.468 67.7026 244.964 67.7026 cv
245.151 67.7026 245.335 67.6866 245.516 67.6487 cv
245.695 67.6136 245.856 67.5667 245.992 67.5087 cv
245.992 66.4587 li
244.852 66.4587 li
244.852 65.9587 li
246.555 65.9587 li
246.555 67.7916 li
f
235.908 68.098 mo
236.47 68.098 li
236.47 63.842 li
235.908 63.842 li
cp
f
98.2989 38.6055 mo
97.8689 38.4276 97.3649 38.3265 96.7949 38.2856 cv
96.2159 38.2485 95.5509 38.2216 94.7849 38.2216 cv
92.4789 38.2216 li
92.4789 44.8575 li
94.4389 44.8575 li
95.4559 44.8575 96.3089 44.8076 96.9889 44.7086 cv
97.6769 44.6075 98.2519 44.3865 98.7159 44.0336 cv
99.1569 43.6906 99.4809 43.3126 99.6869 42.8986 cv
99.8899 42.4855 99.9929 41.9326 99.9929 41.2375 cv
99.9929 40.6205 99.8649 40.0936 99.6089 39.6486 cv
99.3589 39.2065 98.9169 38.8636 98.2989 38.6055 cv
f
102.187 58.4622 mo
95.4225 49.3533 li
92.4795 49.3533 li
92.4795 58.4622 li
86.0775 58.4622 li
86.0775 33.6503 li
96.8355 33.6503 li
98.3085 33.6503 99.5705 33.7333 100.63 33.9042 cv
101.688 34.0682 102.678 34.4313 103.604 34.9833 cv
104.539 35.5433 105.283 36.2562 105.837 37.1423 cv
106.386 38.0242 106.663 39.1302 106.663 40.4622 cv
106.663 42.2993 106.232 43.7892 105.382 44.9412 cv
104.527 46.0992 103.31 47.0593 101.721 47.8232 cv
110.017 58.4622 li
cp
80.5725 58.4622 mo
74.3995 58.4622 li
63.8375 41.4352 li
63.8375 58.4622 li
57.9655 58.4622 li
57.9655 33.6503 li
65.6245 33.6503 li
74.7015 47.8693 li
74.7015 33.6503 li
80.5725 33.6503 li
cp
112.188 46.0573 mo
112.188 36.4622 117.639 28.1423 125.61 24.0142 cv
51.0765 24.0142 li
51.0765 68.0983 li
125.608 68.0983 li
124.862 67.7103 124.137 67.2883 123.437 66.8303 cv
116.665 62.4003 112.188 54.7532 112.188 46.0573 cv
f
144.797 62.5746 mo
141.756 62.5746 139.004 61.3416 137.008 59.3496 cv
137.001 59.3496 li
135.006 61.3416 132.254 62.5746 129.214 62.5746 cv
122.409 62.5746 li
126.295 66.0126 131.406 68.0976 137.003 68.0976 cv
142.599 68.0976 147.708 66.0126 151.594 62.5746 cv
144.797 62.5746 li
f
137 35.9272 mo
137.008 35.9272 li
139.004 37.9212 141.756 39.1522 144.796 39.1522 cv
157.938 39.1522 li
157.461 37.7022 156.841 36.3222 156.087 35.0222 cv
144.796 35.0222 li
141.756 35.0222 139.004 33.7912 137.008 31.7992 cv
137 31.7992 li
135.006 33.7912 132.254 35.0222 129.213 35.0222 cv
117.915 35.0222 li
117.163 36.3222 116.541 37.7022 116.064 39.1522 cv
129.213 39.1522 li
132.254 39.1522 135.006 37.9212 137 35.9272 cv
f
137 49.7045 mo
137.008 49.7045 li
139.004 51.6946 141.756 52.9276 144.796 52.9276 cv
157.95 52.9276 li
158.383 51.6016 158.698 50.2236 158.874 48.7996 cv
144.796 48.7996 li
141.756 48.7996 139.004 47.5666 137.008 45.5765 cv
137 45.5765 li
135.006 47.5666 132.254 48.7996 129.213 48.7996 cv
115.13 48.7996 li
115.304 50.2236 115.618 51.6016 116.052 52.9276 cv
129.213 52.9276 li
132.254 52.9276 135.006 51.6946 137 49.7045 cv
f
137 42.8167 mo
137.008 42.8167 li
139.004 44.8087 141.756 46.0417 144.796 46.0417 cv
159.043 46.0417 li
159.043 44.6287 158.907 43.2507 158.653 41.9117 cv
144.796 41.9117 li
141.756 41.9117 139.004 40.6788 137.008 38.6887 cv
137 38.6887 li
135.006 40.6788 132.254 41.9117 129.213 41.9117 cv
115.351 41.9117 li
115.097 43.2507 114.959 44.6287 114.959 46.0417 cv
129.213 46.0417 li
132.254 46.0417 135.006 44.8087 137 42.8167 cv
f
137 29.0397 mo
137.008 29.0397 li
139.004 31.0317 141.756 32.2648 144.796 32.2648 cv
154.192 32.2648 li
150.155 27.2338 143.955 24.0148 137.002 24.0148 cv
130.048 24.0148 123.851 27.2338 119.81 32.2648 cv
129.213 32.2648 li
132.254 32.2648 135.006 31.0317 137 29.0397 cv
f
137 56.5901 mo
137.008 56.5901 li
139.004 58.5861 141.756 59.8151 144.796 59.8151 cv
154.221 59.8151 li
155.237 58.5471 156.114 57.1641 156.833 55.6871 cv
144.796 55.6871 li
141.756 55.6871 139.004 54.4541 137.008 52.4621 cv
137 52.4621 li
135.006 54.4541 132.254 55.6871 129.213 55.6871 cv
117.171 55.6871 li
117.888 57.1641 118.766 58.5471 119.783 59.8151 cv
129.213 59.8151 li
132.254 59.8151 135.006 58.5861 137 56.5901 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/KVHPZK+Arial-BoldMT*1 uf
/KVHPZK+Arial-BoldMT uf
/HIBBAA+Arial-BoldMT uf
/KVHPZJ+ArialMT*1 uf
/KVHPZJ+ArialMT uf
/PBAAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
